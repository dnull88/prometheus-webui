{"ast":null,"code":"import _toConsumableArray from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/app/src/pages/targets/ScrapePoolList.tsx\";\n\nimport React from 'react';\nimport { useFetch } from '../../hooks/useFetch';\nimport { groupTargets } from './target';\nimport ScrapePoolPanel from './ScrapePoolPanel';\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\nexport var ScrapePoolContent = function ScrapePoolContent(_ref) {\n  var filter = _ref.filter,\n      activeTargets = _ref.activeTargets;\n  var targetGroups = groupTargets(activeTargets);\n  var showHealthy = filter.showHealthy,\n      showUnhealthy = filter.showUnhealthy;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, Object.keys(targetGroups).reduce(function (panels, scrapePool) {\n    var targetGroup = targetGroups[scrapePool];\n    var isHealthy = targetGroup.upCount === targetGroup.targets.length;\n    return isHealthy && showHealthy || !isHealthy && showUnhealthy ? [].concat(_toConsumableArray(panels), [/*#__PURE__*/React.createElement(ScrapePoolPanel, {\n      key: scrapePool,\n      scrapePool: scrapePool,\n      targetGroup: targetGroup,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 25\n      }\n    })]) : panels;\n  }, []));\n};\nScrapePoolContent.displayName = 'ScrapePoolContent';\nvar ScrapePoolListWithStatusIndicator = withStatusIndicator(ScrapePoolContent);\n\nvar ScrapePoolList = function ScrapePoolList(_ref2) {\n  var filter = _ref2.filter;\n  var pathPrefix = usePathPrefix();\n\n  var _useFetch = useFetch(\"\".concat(pathPrefix, \"/\").concat(API_PATH, \"/targets?state=active\")),\n      response = _useFetch.response,\n      error = _useFetch.error,\n      isLoading = _useFetch.isLoading;\n\n  var responseStatus = response.status;\n  var badResponse = responseStatus !== 'success' && responseStatus !== 'start fetching';\n  return /*#__PURE__*/React.createElement(ScrapePoolListWithStatusIndicator, Object.assign({}, response.data, {\n    filter: filter,\n    error: badResponse ? new Error(responseStatus) : error,\n    isLoading: isLoading,\n    componentTitle: \"Targets information\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default ScrapePoolList;","map":{"version":3,"sources":["/app/src/pages/targets/ScrapePoolList.tsx"],"names":["React","useFetch","groupTargets","ScrapePoolPanel","withStatusIndicator","usePathPrefix","API_PATH","ScrapePoolContent","filter","activeTargets","targetGroups","showHealthy","showUnhealthy","Object","keys","reduce","panels","scrapePool","targetGroup","isHealthy","upCount","targets","length","displayName","ScrapePoolListWithStatusIndicator","ScrapePoolList","pathPrefix","response","error","isLoading","responseStatus","status","badResponse","data","Error"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AAEA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,YAAT,QAAqC,UAArC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,mBAAT,QAAoC,sCAApC;AACA,SAASC,aAAT,QAA8B,kCAA9B;AACA,SAASC,QAAT,QAAyB,2BAAzB;AAOA,OAAO,IAAMC,iBAA0C,GAAG,SAA7CA,iBAA6C,OAA+B;AAAA,MAA5BC,MAA4B,QAA5BA,MAA4B;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;AACvF,MAAMC,YAAY,GAAGR,YAAY,CAACO,aAAD,CAAjC;AADuF,MAE/EE,WAF+E,GAEhDH,MAFgD,CAE/EG,WAF+E;AAAA,MAElEC,aAFkE,GAEhDJ,MAFgD,CAElEI,aAFkE;AAGvF,sBACE,0CACGC,MAAM,CAACC,IAAP,CAAYJ,YAAZ,EAA0BK,MAA1B,CAAgD,UAACC,MAAD,EAASC,UAAT,EAAwB;AACvE,QAAMC,WAAW,GAAGR,YAAY,CAACO,UAAD,CAAhC;AACA,QAAME,SAAS,GAAGD,WAAW,CAACE,OAAZ,KAAwBF,WAAW,CAACG,OAAZ,CAAoBC,MAA9D;AACA,WAAQH,SAAS,IAAIR,WAAd,IAA+B,CAACQ,SAAD,IAAcP,aAA7C,gCACCI,MADD,iBACS,oBAAC,eAAD;AAAiB,MAAA,GAAG,EAAEC,UAAtB;AAAkC,MAAA,UAAU,EAAEA,UAA9C;AAA0D,MAAA,WAAW,EAAEC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADT,KAEHF,MAFJ;AAGD,GANA,EAME,EANF,CADH,CADF;AAWD,CAdM;AAePT,iBAAiB,CAACgB,WAAlB,GAAgC,mBAAhC;AAEA,IAAMC,iCAAiC,GAAGpB,mBAAmB,CAACG,iBAAD,CAA7D;;AAEA,IAAMkB,cAA0C,GAAG,SAA7CA,cAA6C,QAAgB;AAAA,MAAbjB,MAAa,SAAbA,MAAa;AACjE,MAAMkB,UAAU,GAAGrB,aAAa,EAAhC;;AADiE,kBAE1BJ,QAAQ,WAAyByB,UAAzB,cAAuCpB,QAAvC,2BAFkB;AAAA,MAEzDqB,QAFyD,aAEzDA,QAFyD;AAAA,MAE/CC,KAF+C,aAE/CA,KAF+C;AAAA,MAExCC,SAFwC,aAExCA,SAFwC;;AAAA,MAGjDC,cAHiD,GAG9BH,QAH8B,CAGzDI,MAHyD;AAIjE,MAAMC,WAAW,GAAGF,cAAc,KAAK,SAAnB,IAAgCA,cAAc,KAAK,gBAAvE;AACA,sBACE,oBAAC,iCAAD,oBACMH,QAAQ,CAACM,IADf;AAEE,IAAA,MAAM,EAAEzB,MAFV;AAGE,IAAA,KAAK,EAAEwB,WAAW,GAAG,IAAIE,KAAJ,CAAUJ,cAAV,CAAH,GAA+BF,KAHnD;AAIE,IAAA,SAAS,EAAEC,SAJb;AAKE,IAAA,cAAc,EAAC,qBALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AASD,CAdD;;AAgBA,eAAeJ,cAAf","sourcesContent":["import React, { FC } from 'react';\nimport { FilterData } from './Filter';\nimport { useFetch } from '../../hooks/useFetch';\nimport { groupTargets, Target } from './target';\nimport ScrapePoolPanel from './ScrapePoolPanel';\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\n\ninterface ScrapePoolListProps {\n  filter: FilterData;\n  activeTargets: Target[];\n}\n\nexport const ScrapePoolContent: FC<ScrapePoolListProps> = ({ filter, activeTargets }) => {\n  const targetGroups = groupTargets(activeTargets);\n  const { showHealthy, showUnhealthy } = filter;\n  return (\n    <>\n      {Object.keys(targetGroups).reduce<JSX.Element[]>((panels, scrapePool) => {\n        const targetGroup = targetGroups[scrapePool];\n        const isHealthy = targetGroup.upCount === targetGroup.targets.length;\n        return (isHealthy && showHealthy) || (!isHealthy && showUnhealthy)\n          ? [...panels, <ScrapePoolPanel key={scrapePool} scrapePool={scrapePool} targetGroup={targetGroup} />]\n          : panels;\n      }, [])}\n    </>\n  );\n};\nScrapePoolContent.displayName = 'ScrapePoolContent';\n\nconst ScrapePoolListWithStatusIndicator = withStatusIndicator(ScrapePoolContent);\n\nconst ScrapePoolList: FC<{ filter: FilterData }> = ({ filter }) => {\n  const pathPrefix = usePathPrefix();\n  const { response, error, isLoading } = useFetch<ScrapePoolListProps>(`${pathPrefix}/${API_PATH}/targets?state=active`);\n  const { status: responseStatus } = response;\n  const badResponse = responseStatus !== 'success' && responseStatus !== 'start fetching';\n  return (\n    <ScrapePoolListWithStatusIndicator\n      {...response.data}\n      filter={filter}\n      error={badResponse ? new Error(responseStatus) : error}\n      isLoading={isLoading}\n      componentTitle=\"Targets information\"\n    />\n  );\n};\n\nexport default ScrapePoolList;\n"]},"metadata":{},"sourceType":"module"}