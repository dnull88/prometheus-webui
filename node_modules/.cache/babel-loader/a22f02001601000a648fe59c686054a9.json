{"ast":null,"code":"import _toConsumableArray from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/app/src/pages/graph/Legend.tsx\";\nimport React, { PureComponent } from 'react';\nimport SeriesName from './SeriesName';\nexport var Legend = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Legend, _PureComponent);\n\n  var _super = _createSuper(Legend);\n\n  function Legend() {\n    var _this;\n\n    _classCallCheck(this, Legend);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      selectedIndexes: []\n    };\n\n    _this.handleSeriesSelect = function (index) {\n      return function (ev) {\n        // TODO: add proper event type\n        var selectedIndexes = _this.state.selectedIndexes;\n        var selected = [index];\n\n        if (ev.ctrlKey || ev.metaKey) {\n          var chartData = _this.props.chartData;\n\n          if (selectedIndexes.includes(index)) {\n            selected = selectedIndexes.filter(function (idx) {\n              return idx !== index;\n            });\n          } else {\n            selected = // Flip the logic - In case none is selected ctrl + click should deselect clicked series.\n            selectedIndexes.length === 0 ? chartData.reduce(function (acc, _, i) {\n              return i === index ? acc : [].concat(_toConsumableArray(acc), [i]);\n            }, []) : [].concat(_toConsumableArray(selectedIndexes), [index]); // Select multiple.\n          }\n        } else if (selectedIndexes.length === 1 && selectedIndexes.includes(index)) {\n          selected = [];\n        }\n\n        _this.setState({\n          selectedIndexes: selected\n        });\n\n        _this.props.onSeriesToggle(selected, index);\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(Legend, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.shouldReset && prevProps.shouldReset !== this.props.shouldReset) {\n        this.setState({\n          selectedIndexes: []\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          chartData = _this$props.chartData,\n          onLegendMouseOut = _this$props.onLegendMouseOut,\n          onHover = _this$props.onHover;\n      var selectedIndexes = this.state.selectedIndexes;\n      var canUseHover = chartData.length > 1 && selectedIndexes.length === 0;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"graph-legend\",\n        onMouseOut: canUseHover ? onLegendMouseOut : undefined,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 7\n        }\n      }, chartData.map(function (_ref) {\n        var index = _ref.index,\n            color = _ref.color,\n            labels = _ref.labels;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            opacity: selectedIndexes.length === 0 || selectedIndexes.includes(index) ? 1 : 0.5\n          },\n          onClick: chartData.length > 1 ? _this2.handleSeriesSelect(index) : undefined,\n          onMouseOver: canUseHover ? onHover(index) : undefined,\n          key: index,\n          className: \"legend-item\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"legend-swatch\",\n          style: {\n            backgroundColor: color\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }\n        }), /*#__PURE__*/React.createElement(SeriesName, {\n          labels: labels,\n          format: true,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }\n        }));\n      }), chartData.length > 1 && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pl-1 mt-1 text-muted\",\n        style: {\n          fontSize: 13\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }\n      }, \"Click: select series, \", navigator.platform.includes('Mac') ? 'CMD' : 'CTRL', \" + click: toggle multiple series\"));\n    }\n  }]);\n\n  return Legend;\n}(PureComponent);","map":{"version":3,"sources":["/app/src/pages/graph/Legend.tsx"],"names":["React","PureComponent","SeriesName","Legend","state","selectedIndexes","handleSeriesSelect","index","ev","selected","ctrlKey","metaKey","chartData","props","includes","filter","idx","length","reduce","acc","_","i","setState","onSeriesToggle","prevProps","shouldReset","onLegendMouseOut","onHover","canUseHover","undefined","map","color","labels","opacity","backgroundColor","fontSize","navigator","platform"],"mappings":"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","sourcesContent":["import React, { PureComponent, SyntheticEvent } from 'react';\nimport SeriesName from './SeriesName';\nimport { GraphSeries } from './Graph';\n\ninterface LegendProps {\n  chartData: GraphSeries[];\n  shouldReset: boolean;\n  onLegendMouseOut: (ev: SyntheticEvent<HTMLDivElement>) => void;\n  onSeriesToggle: (selected: number[], index: number) => void;\n  onHover: (index: number) => (ev: SyntheticEvent<HTMLDivElement>) => void;\n}\n\ninterface LegendState {\n  selectedIndexes: number[];\n}\n\nexport class Legend extends PureComponent<LegendProps, LegendState> {\n  state = {\n    selectedIndexes: [] as number[],\n  };\n  componentDidUpdate(prevProps: LegendProps) {\n    if (this.props.shouldReset && prevProps.shouldReset !== this.props.shouldReset) {\n      this.setState({ selectedIndexes: [] });\n    }\n  }\n  handleSeriesSelect = (index: number) => (ev: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // TODO: add proper event type\n    const { selectedIndexes } = this.state;\n\n    let selected = [index];\n    if (ev.ctrlKey || ev.metaKey) {\n      const { chartData } = this.props;\n      if (selectedIndexes.includes(index)) {\n        selected = selectedIndexes.filter(idx => idx !== index);\n      } else {\n        selected =\n          // Flip the logic - In case none is selected ctrl + click should deselect clicked series.\n          selectedIndexes.length === 0\n            ? chartData.reduce<number[]>((acc, _, i) => (i === index ? acc : [...acc, i]), [])\n            : [...selectedIndexes, index]; // Select multiple.\n      }\n    } else if (selectedIndexes.length === 1 && selectedIndexes.includes(index)) {\n      selected = [];\n    }\n\n    this.setState({ selectedIndexes: selected });\n    this.props.onSeriesToggle(selected, index);\n  };\n\n  render() {\n    const { chartData, onLegendMouseOut, onHover } = this.props;\n    const { selectedIndexes } = this.state;\n    const canUseHover = chartData.length > 1 && selectedIndexes.length === 0;\n\n    return (\n      <div className=\"graph-legend\" onMouseOut={canUseHover ? onLegendMouseOut : undefined}>\n        {chartData.map(({ index, color, labels }) => (\n          <div\n            style={{ opacity: selectedIndexes.length === 0 || selectedIndexes.includes(index) ? 1 : 0.5 }}\n            onClick={chartData.length > 1 ? this.handleSeriesSelect(index) : undefined}\n            onMouseOver={canUseHover ? onHover(index) : undefined}\n            key={index}\n            className=\"legend-item\"\n          >\n            <span className=\"legend-swatch\" style={{ backgroundColor: color }}></span>\n            <SeriesName labels={labels} format />\n          </div>\n        ))}\n        {chartData.length > 1 && (\n          <div className=\"pl-1 mt-1 text-muted\" style={{ fontSize: 13 }}>\n            Click: select series, {navigator.platform.includes('Mac') ? 'CMD' : 'CTRL'} + click: toggle multiple series\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}