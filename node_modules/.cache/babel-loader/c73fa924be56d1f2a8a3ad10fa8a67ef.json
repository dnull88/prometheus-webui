{"ast":null,"code":"import _objectSpread from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/app/src/pages/graph/Panel.tsx\";\nimport React, { Component } from 'react';\nimport { Alert, Button, Col, Nav, NavItem, NavLink, Row, TabContent, TabPane } from 'reactstrap';\nimport moment from 'moment-timezone';\nimport ExpressionInput from './ExpressionInput';\nimport GraphControls from './GraphControls';\nimport { GraphTabContent } from './GraphTabContent';\nimport DataTable from './DataTable';\nimport TimeInput from './TimeInput';\nimport QueryStatsView from './QueryStatsView';\nimport { API_PATH } from '../../constants/constants';\nexport var PanelType;\n\n(function (PanelType) {\n  PanelType[\"Graph\"] = \"graph\";\n  PanelType[\"Table\"] = \"table\";\n})(PanelType || (PanelType = {}));\n\nexport var PanelDefaultOptions = {\n  type: PanelType.Table,\n  expr: '',\n  range: 60 * 60 * 1000,\n  endTime: null,\n  resolution: null,\n  stacked: false\n};\n\nvar Panel = /*#__PURE__*/function (_Component) {\n  _inherits(Panel, _Component);\n\n  var _super = _createSuper(Panel);\n\n  function Panel(props) {\n    var _this;\n\n    _classCallCheck(this, Panel);\n\n    _this = _super.call(this, props);\n    _this.abortInFlightFetch = null;\n\n    _this.executeQuery = function () {\n      var expr = _this.state.exprInputValue;\n      var queryStart = Date.now();\n\n      _this.props.onExecuteQuery(expr);\n\n      if (_this.props.options.expr !== expr) {\n        _this.setOptions({\n          expr\n        });\n      }\n\n      if (expr === '') {\n        return;\n      }\n\n      if (_this.abortInFlightFetch) {\n        _this.abortInFlightFetch();\n\n        _this.abortInFlightFetch = null;\n      }\n\n      var abortController = new AbortController();\n\n      _this.abortInFlightFetch = function () {\n        return abortController.abort();\n      };\n\n      _this.setState({\n        loading: true\n      });\n\n      var endTime = _this.getEndTime().valueOf() / 1000; // TODO: shouldn't valueof only work when it's a moment?\n\n      var startTime = endTime - _this.props.options.range / 1000;\n      var resolution = _this.props.options.resolution || Math.max(Math.floor(_this.props.options.range / 250000), 1);\n      var params = new URLSearchParams({\n        query: expr\n      });\n      var path;\n\n      switch (_this.props.options.type) {\n        case 'graph':\n          path = 'query_range';\n          params.append('start', startTime.toString());\n          params.append('end', endTime.toString());\n          params.append('step', resolution.toString());\n          break;\n\n        case 'table':\n          path = 'query';\n          params.append('time', endTime.toString());\n          break;\n\n        default:\n          throw new Error('Invalid panel type \"' + _this.props.options.type + '\"');\n      }\n\n      fetch(\"\".concat(_this.props.pathPrefix, \"/\").concat(API_PATH, \"/\").concat(path, \"?\").concat(params), {\n        cache: 'no-store',\n        credentials: 'same-origin',\n        signal: abortController.signal\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (json) {\n        if (json.status !== 'success') {\n          throw new Error(json.error || 'invalid response JSON');\n        }\n\n        var resultSeries = 0;\n\n        if (json.data) {\n          var _json$data = json.data,\n              resultType = _json$data.resultType,\n              result = _json$data.result;\n\n          if (resultType === 'scalar') {\n            resultSeries = 1;\n          } else if (result && result.length > 0) {\n            resultSeries = result.length;\n          }\n        }\n\n        _this.setState({\n          error: null,\n          data: json.data,\n          lastQueryParams: {\n            startTime,\n            endTime,\n            resolution\n          },\n          stats: {\n            loadTime: Date.now() - queryStart,\n            resolution,\n            resultSeries\n          },\n          loading: false\n        });\n\n        _this.abortInFlightFetch = null;\n      }).catch(function (error) {\n        if (error.name === 'AbortError') {\n          // Aborts are expected, don't show an error for them.\n          return;\n        }\n\n        _this.setState({\n          error: 'Error executing query: ' + error.message,\n          loading: false\n        });\n      });\n    };\n\n    _this.handleExpressionChange = function (expr) {\n      _this.setState({\n        exprInputValue: expr\n      });\n    };\n\n    _this.handleChangeRange = function (range) {\n      _this.setOptions({\n        range: range\n      });\n    };\n\n    _this.getEndTime = function () {\n      if (_this.props.options.endTime === null) {\n        return moment();\n      }\n\n      return _this.props.options.endTime;\n    };\n\n    _this.handleChangeEndTime = function (endTime) {\n      _this.setOptions({\n        endTime: endTime\n      });\n    };\n\n    _this.handleChangeResolution = function (resolution) {\n      _this.setOptions({\n        resolution: resolution\n      });\n    };\n\n    _this.handleChangeType = function (type) {\n      if (_this.props.options.type === type) {\n        return;\n      }\n\n      _this.setState({\n        data: null\n      });\n\n      _this.setOptions({\n        type: type\n      });\n    };\n\n    _this.handleChangeStacking = function (stacked) {\n      _this.setOptions({\n        stacked: stacked\n      });\n    };\n\n    _this.state = {\n      data: null,\n      lastQueryParams: null,\n      loading: false,\n      error: null,\n      stats: null,\n      exprInputValue: props.options.expr\n    };\n    return _this;\n  }\n\n  _createClass(Panel, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref) {\n      var prevOpts = _ref.options;\n      var _this$props$options = this.props.options,\n          endTime = _this$props$options.endTime,\n          range = _this$props$options.range,\n          resolution = _this$props$options.resolution,\n          type = _this$props$options.type;\n\n      if (prevOpts.endTime !== endTime || prevOpts.range !== range || prevOpts.resolution !== resolution || prevOpts.type !== type) {\n        this.executeQuery();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.executeQuery();\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(opts) {\n      var newOpts = _objectSpread(_objectSpread({}, this.props.options), opts);\n\n      this.props.onOptionsChanged(newOpts);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          pastQueries = _this$props.pastQueries,\n          metricNames = _this$props.metricNames,\n          options = _this$props.options;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"panel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ExpressionInput, {\n        value: this.state.exprInputValue,\n        onExpressionChange: this.handleExpressionChange,\n        executeQuery: this.executeQuery,\n        loading: this.state.loading,\n        enableAutocomplete: this.props.enableAutocomplete,\n        autocompleteSections: {\n          'Query History': pastQueries,\n          'Metric Names': metricNames\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }\n      }))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }\n      }, this.state.error && /*#__PURE__*/React.createElement(Alert, {\n        color: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 37\n        }\n      }, this.state.error))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Nav, {\n        tabs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(NavItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(NavLink, {\n        className: options.type === 'table' ? 'active' : '',\n        onClick: function onClick() {\n          return _this2.handleChangeType(PanelType.Table);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 17\n        }\n      }, \"Table\")), /*#__PURE__*/React.createElement(NavItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(NavLink, {\n        className: options.type === 'graph' ? 'active' : '',\n        onClick: function onClick() {\n          return _this2.handleChangeType(PanelType.Graph);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 17\n        }\n      }, \"Graph\")), !this.state.loading && !this.state.error && this.state.stats && /*#__PURE__*/React.createElement(QueryStatsView, Object.assign({}, this.state.stats, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 80\n        }\n      }))), /*#__PURE__*/React.createElement(TabContent, {\n        activeTab: options.type,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TabPane, {\n        tabId: \"table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 15\n        }\n      }, options.type === 'table' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"table-controls\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TimeInput, {\n        time: options.endTime,\n        useLocalTime: this.props.useLocalTime,\n        range: options.range,\n        placeholder: \"Evaluation time\",\n        onChangeTime: this.handleChangeEndTime,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 23\n        }\n      })), /*#__PURE__*/React.createElement(DataTable, {\n        data: this.state.data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 21\n        }\n      }))), /*#__PURE__*/React.createElement(TabPane, {\n        tabId: \"graph\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 15\n        }\n      }, this.props.options.type === 'graph' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GraphControls, {\n        range: options.range,\n        endTime: options.endTime,\n        useLocalTime: this.props.useLocalTime,\n        resolution: options.resolution,\n        stacked: options.stacked,\n        onChangeRange: this.handleChangeRange,\n        onChangeEndTime: this.handleChangeEndTime,\n        onChangeResolution: this.handleChangeResolution,\n        onChangeStacking: this.handleChangeStacking,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(GraphTabContent, {\n        data: this.state.data,\n        stacked: options.stacked,\n        useLocalTime: this.props.useLocalTime,\n        lastQueryParams: this.state.lastQueryParams,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }\n      })))))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"float-right\",\n        color: \"link\",\n        onClick: this.props.removePanel,\n        size: \"sm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }\n      }, \"Remove Panel\"))));\n    }\n  }]);\n\n  return Panel;\n}(Component);\n\nexport default Panel;","map":{"version":3,"sources":["/app/src/pages/graph/Panel.tsx"],"names":["React","Component","Alert","Button","Col","Nav","NavItem","NavLink","Row","TabContent","TabPane","moment","ExpressionInput","GraphControls","GraphTabContent","DataTable","TimeInput","QueryStatsView","API_PATH","PanelType","PanelDefaultOptions","type","Table","expr","range","endTime","resolution","stacked","Panel","props","abortInFlightFetch","executeQuery","state","exprInputValue","queryStart","Date","now","onExecuteQuery","options","setOptions","abortController","AbortController","abort","setState","loading","getEndTime","valueOf","startTime","Math","max","floor","params","URLSearchParams","query","path","append","toString","Error","fetch","pathPrefix","cache","credentials","signal","then","resp","json","status","error","resultSeries","data","resultType","result","length","lastQueryParams","stats","loadTime","catch","name","message","handleExpressionChange","handleChangeRange","handleChangeEndTime","handleChangeResolution","handleChangeType","handleChangeStacking","prevOpts","opts","newOpts","onOptionsChanged","pastQueries","metricNames","enableAutocomplete","Graph","useLocalTime","removePanel"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport { Alert, Button, Col, Nav, NavItem, NavLink, Row, TabContent, TabPane } from 'reactstrap';\n\nimport moment from 'moment-timezone';\n\nimport ExpressionInput from './ExpressionInput';\nimport GraphControls from './GraphControls';\nimport { GraphTabContent } from './GraphTabContent';\nimport DataTable from './DataTable';\nimport TimeInput from './TimeInput';\nimport QueryStatsView, { QueryStats } from './QueryStatsView';\nimport { QueryParams } from '../../types/types';\nimport { API_PATH } from '../../constants/constants';\n\ninterface PanelProps {\n  options: PanelOptions;\n  onOptionsChanged: (opts: PanelOptions) => void;\n  useLocalTime: boolean;\n  pastQueries: string[];\n  metricNames: string[];\n  removePanel: () => void;\n  onExecuteQuery: (query: string) => void;\n  pathPrefix: string;\n  enableAutocomplete: boolean;\n}\n\ninterface PanelState {\n  data: any; // TODO: Type data.\n  lastQueryParams: QueryParams | null;\n  loading: boolean;\n  error: string | null;\n  stats: QueryStats | null;\n  exprInputValue: string;\n}\n\nexport interface PanelOptions {\n  expr: string;\n  type: PanelType;\n  range: number; // Range in milliseconds.\n  endTime: number | null; // Timestamp in milliseconds.\n  resolution: number | null; // Resolution in seconds.\n  stacked: boolean;\n}\n\nexport enum PanelType {\n  Graph = 'graph',\n  Table = 'table',\n}\n\nexport const PanelDefaultOptions: PanelOptions = {\n  type: PanelType.Table,\n  expr: '',\n  range: 60 * 60 * 1000,\n  endTime: null,\n  resolution: null,\n  stacked: false,\n};\n\nclass Panel extends Component<PanelProps, PanelState> {\n  private abortInFlightFetch: (() => void) | null = null;\n\n  constructor(props: PanelProps) {\n    super(props);\n\n    this.state = {\n      data: null,\n      lastQueryParams: null,\n      loading: false,\n      error: null,\n      stats: null,\n      exprInputValue: props.options.expr,\n    };\n  }\n\n  componentDidUpdate({ options: prevOpts }: PanelProps) {\n    const { endTime, range, resolution, type } = this.props.options;\n    if (\n      prevOpts.endTime !== endTime ||\n      prevOpts.range !== range ||\n      prevOpts.resolution !== resolution ||\n      prevOpts.type !== type\n    ) {\n      this.executeQuery();\n    }\n  }\n\n  componentDidMount() {\n    this.executeQuery();\n  }\n\n  executeQuery = (): void => {\n    const { exprInputValue: expr } = this.state;\n    const queryStart = Date.now();\n    this.props.onExecuteQuery(expr);\n    if (this.props.options.expr !== expr) {\n      this.setOptions({ expr });\n    }\n    if (expr === '') {\n      return;\n    }\n\n    if (this.abortInFlightFetch) {\n      this.abortInFlightFetch();\n      this.abortInFlightFetch = null;\n    }\n\n    const abortController = new AbortController();\n    this.abortInFlightFetch = () => abortController.abort();\n    this.setState({ loading: true });\n\n    const endTime = this.getEndTime().valueOf() / 1000; // TODO: shouldn't valueof only work when it's a moment?\n    const startTime = endTime - this.props.options.range / 1000;\n    const resolution = this.props.options.resolution || Math.max(Math.floor(this.props.options.range / 250000), 1);\n    const params: URLSearchParams = new URLSearchParams({\n      query: expr,\n    });\n\n    let path: string;\n    switch (this.props.options.type) {\n      case 'graph':\n        path = 'query_range';\n        params.append('start', startTime.toString());\n        params.append('end', endTime.toString());\n        params.append('step', resolution.toString());\n        break;\n      case 'table':\n        path = 'query';\n        params.append('time', endTime.toString());\n        break;\n      default:\n        throw new Error('Invalid panel type \"' + this.props.options.type + '\"');\n    }\n\n    fetch(`${this.props.pathPrefix}/${API_PATH}/${path}?${params}`, {\n      cache: 'no-store',\n      credentials: 'same-origin',\n      signal: abortController.signal,\n    })\n      .then(resp => resp.json())\n      .then(json => {\n        if (json.status !== 'success') {\n          throw new Error(json.error || 'invalid response JSON');\n        }\n\n        let resultSeries = 0;\n        if (json.data) {\n          const { resultType, result } = json.data;\n          if (resultType === 'scalar') {\n            resultSeries = 1;\n          } else if (result && result.length > 0) {\n            resultSeries = result.length;\n          }\n        }\n\n        this.setState({\n          error: null,\n          data: json.data,\n          lastQueryParams: {\n            startTime,\n            endTime,\n            resolution,\n          },\n          stats: {\n            loadTime: Date.now() - queryStart,\n            resolution,\n            resultSeries,\n          },\n          loading: false,\n        });\n        this.abortInFlightFetch = null;\n      })\n      .catch(error => {\n        if (error.name === 'AbortError') {\n          // Aborts are expected, don't show an error for them.\n          return;\n        }\n        this.setState({\n          error: 'Error executing query: ' + error.message,\n          loading: false,\n        });\n      });\n  };\n\n  setOptions(opts: object): void {\n    const newOpts = { ...this.props.options, ...opts };\n    this.props.onOptionsChanged(newOpts);\n  }\n\n  handleExpressionChange = (expr: string): void => {\n    this.setState({ exprInputValue: expr });\n  };\n\n  handleChangeRange = (range: number): void => {\n    this.setOptions({ range: range });\n  };\n\n  getEndTime = (): number | moment.Moment => {\n    if (this.props.options.endTime === null) {\n      return moment();\n    }\n    return this.props.options.endTime;\n  };\n\n  handleChangeEndTime = (endTime: number | null) => {\n    this.setOptions({ endTime: endTime });\n  };\n\n  handleChangeResolution = (resolution: number | null) => {\n    this.setOptions({ resolution: resolution });\n  };\n\n  handleChangeType = (type: PanelType) => {\n    if (this.props.options.type === type) {\n      return;\n    }\n\n    this.setState({ data: null });\n    this.setOptions({ type: type });\n  };\n\n  handleChangeStacking = (stacked: boolean) => {\n    this.setOptions({ stacked: stacked });\n  };\n\n  render() {\n    const { pastQueries, metricNames, options } = this.props;\n    return (\n      <div className=\"panel\">\n        <Row>\n          <Col>\n            <ExpressionInput\n              value={this.state.exprInputValue}\n              onExpressionChange={this.handleExpressionChange}\n              executeQuery={this.executeQuery}\n              loading={this.state.loading}\n              enableAutocomplete={this.props.enableAutocomplete}\n              autocompleteSections={{\n                'Query History': pastQueries,\n                'Metric Names': metricNames,\n              }}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>{this.state.error && <Alert color=\"danger\">{this.state.error}</Alert>}</Col>\n        </Row>\n        <Row>\n          <Col>\n            <Nav tabs>\n              <NavItem>\n                <NavLink\n                  className={options.type === 'table' ? 'active' : ''}\n                  onClick={() => this.handleChangeType(PanelType.Table)}\n                >\n                  Table\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  className={options.type === 'graph' ? 'active' : ''}\n                  onClick={() => this.handleChangeType(PanelType.Graph)}\n                >\n                  Graph\n                </NavLink>\n              </NavItem>\n              {!this.state.loading && !this.state.error && this.state.stats && <QueryStatsView {...this.state.stats} />}\n            </Nav>\n            <TabContent activeTab={options.type}>\n              <TabPane tabId=\"table\">\n                {options.type === 'table' && (\n                  <>\n                    <div className=\"table-controls\">\n                      <TimeInput\n                        time={options.endTime}\n                        useLocalTime={this.props.useLocalTime}\n                        range={options.range}\n                        placeholder=\"Evaluation time\"\n                        onChangeTime={this.handleChangeEndTime}\n                      />\n                    </div>\n                    <DataTable data={this.state.data} />\n                  </>\n                )}\n              </TabPane>\n              <TabPane tabId=\"graph\">\n                {this.props.options.type === 'graph' && (\n                  <>\n                    <GraphControls\n                      range={options.range}\n                      endTime={options.endTime}\n                      useLocalTime={this.props.useLocalTime}\n                      resolution={options.resolution}\n                      stacked={options.stacked}\n                      onChangeRange={this.handleChangeRange}\n                      onChangeEndTime={this.handleChangeEndTime}\n                      onChangeResolution={this.handleChangeResolution}\n                      onChangeStacking={this.handleChangeStacking}\n                    />\n                    <GraphTabContent\n                      data={this.state.data}\n                      stacked={options.stacked}\n                      useLocalTime={this.props.useLocalTime}\n                      lastQueryParams={this.state.lastQueryParams}\n                    />\n                  </>\n                )}\n              </TabPane>\n            </TabContent>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Button className=\"float-right\" color=\"link\" onClick={this.props.removePanel} size=\"sm\">\n              Remove Panel\n            </Button>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Panel;\n"]},"metadata":{},"sourceType":"module"}