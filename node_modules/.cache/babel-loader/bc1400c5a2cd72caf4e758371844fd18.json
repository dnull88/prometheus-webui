{"ast":null,"code":"import _classCallCheck from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/app/src/pages/graph/Graph.tsx\";\nimport $ from 'jquery';\nimport React, { PureComponent } from 'react';\nimport ReactResizeDetector from 'react-resize-detector';\nimport { Legend } from './Legend';\nimport { isPresent } from '../../utils';\nimport { normalizeData, getOptions, toHoverColor } from './GraphHelpers';\n\nrequire('../../vendor/flot/jquery.flot');\n\nrequire('../../vendor/flot/jquery.flot.stack');\n\nrequire('../../vendor/flot/jquery.flot.time');\n\nrequire('../../vendor/flot/jquery.flot.crosshair');\n\nrequire('jquery.flot.tooltip');\n\nvar Graph = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Graph, _PureComponent);\n\n  var _super = _createSuper(Graph);\n\n  function Graph() {\n    var _this;\n\n    _classCallCheck(this, Graph);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.chartRef = React.createRef();\n    _this.$chart = void 0;\n    _this.rafID = 0;\n    _this.selectedSeriesIndexes = [];\n    _this.state = {\n      chartData: normalizeData(_this.props)\n    };\n\n    _this.plot = function () {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.chartData;\n\n      if (!_this.chartRef.current) {\n        return;\n      }\n\n      _this.destroyPlot();\n\n      _this.$chart = $.plot($(_this.chartRef.current), data, getOptions(_this.props.stacked, _this.props.useLocalTime));\n    };\n\n    _this.destroyPlot = function () {\n      if (isPresent(_this.$chart)) {\n        _this.$chart.destroy();\n      }\n    };\n\n    _this.handleSeriesSelect = function (selected, selectedIndex) {\n      var chartData = _this.state.chartData;\n\n      _this.plot(_this.selectedSeriesIndexes.length === 1 && _this.selectedSeriesIndexes.includes(selectedIndex) ? chartData.map(toHoverColor(selectedIndex, _this.props.stacked)) : chartData.filter(function (_, i) {\n        return selected.includes(i);\n      }) // draw only selected\n      );\n\n      _this.selectedSeriesIndexes = selected;\n    };\n\n    _this.handleSeriesHover = function (index) {\n      return function () {\n        if (_this.rafID) {\n          cancelAnimationFrame(_this.rafID);\n        }\n\n        _this.rafID = requestAnimationFrame(function () {\n          _this.plotSetAndDraw(_this.state.chartData.map(toHoverColor(index, _this.props.stacked)));\n        });\n      };\n    };\n\n    _this.handleLegendMouseOut = function () {\n      cancelAnimationFrame(_this.rafID);\n\n      _this.plotSetAndDraw();\n    };\n\n    _this.handleResize = function () {\n      if (isPresent(_this.$chart)) {\n        _this.plot(_this.$chart.getData());\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Graph, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          data = _this$props.data,\n          stacked = _this$props.stacked,\n          useLocalTime = _this$props.useLocalTime;\n\n      if (prevProps.data !== data) {\n        this.selectedSeriesIndexes = [];\n        this.setState({\n          chartData: normalizeData(this.props)\n        }, this.plot);\n      } else if (prevProps.stacked !== stacked) {\n        this.setState({\n          chartData: normalizeData(this.props)\n        }, function () {\n          if (_this2.selectedSeriesIndexes.length === 0) {\n            _this2.plot();\n          } else {\n            _this2.plot(_this2.state.chartData.filter(function (_, i) {\n              return _this2.selectedSeriesIndexes.includes(i);\n            }));\n          }\n        });\n      }\n\n      if (prevProps.useLocalTime !== useLocalTime) {\n        this.plot();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.plot();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.destroyPlot();\n    }\n  }, {\n    key: \"plotSetAndDraw\",\n    value: function plotSetAndDraw() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.chartData;\n\n      if (isPresent(this.$chart)) {\n        this.$chart.setData(data);\n        this.$chart.draw();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var chartData = this.state.chartData;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"graph\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ReactResizeDetector, {\n        handleWidth: true,\n        onResize: this.handleResize,\n        skipOnMount: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"graph-chart\",\n        ref: this.chartRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Legend, {\n        shouldReset: this.selectedSeriesIndexes.length === 0,\n        chartData: chartData,\n        onHover: this.handleSeriesHover,\n        onLegendMouseOut: this.handleLegendMouseOut,\n        onSeriesToggle: this.handleSeriesSelect,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Graph;\n}(PureComponent);\n\nexport default Graph;","map":{"version":3,"sources":["/app/src/pages/graph/Graph.tsx"],"names":["$","React","PureComponent","ReactResizeDetector","Legend","isPresent","normalizeData","getOptions","toHoverColor","require","Graph","chartRef","createRef","$chart","rafID","selectedSeriesIndexes","state","chartData","props","plot","data","current","destroyPlot","stacked","useLocalTime","destroy","handleSeriesSelect","selected","selectedIndex","length","includes","map","filter","_","i","handleSeriesHover","index","cancelAnimationFrame","requestAnimationFrame","plotSetAndDraw","handleLegendMouseOut","handleResize","getData","prevProps","setState","setData","draw"],"mappings":"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","sourcesContent":["import $ from 'jquery';\nimport React, { PureComponent } from 'react';\nimport ReactResizeDetector from 'react-resize-detector';\n\nimport { Legend } from './Legend';\nimport { Metric, QueryParams } from '../../types/types';\nimport { isPresent } from '../../utils';\nimport { normalizeData, getOptions, toHoverColor } from './GraphHelpers';\n\nrequire('../../vendor/flot/jquery.flot');\nrequire('../../vendor/flot/jquery.flot.stack');\nrequire('../../vendor/flot/jquery.flot.time');\nrequire('../../vendor/flot/jquery.flot.crosshair');\nrequire('jquery.flot.tooltip');\n\nexport interface GraphProps {\n  data: {\n    resultType: string;\n    result: Array<{ metric: Metric; values: [number, string][] }>;\n  };\n  stacked: boolean;\n  useLocalTime: boolean;\n  queryParams: QueryParams | null;\n}\n\nexport interface GraphSeries {\n  labels: { [key: string]: string };\n  color: string;\n  data: (number | null)[][]; // [x,y][]\n  index: number;\n}\n\ninterface GraphState {\n  chartData: GraphSeries[];\n}\n\nclass Graph extends PureComponent<GraphProps, GraphState> {\n  private chartRef = React.createRef<HTMLDivElement>();\n  private $chart?: jquery.flot.plot;\n  private rafID = 0;\n  private selectedSeriesIndexes: number[] = [];\n\n  state = {\n    chartData: normalizeData(this.props),\n  };\n\n  componentDidUpdate(prevProps: GraphProps) {\n    const { data, stacked, useLocalTime } = this.props;\n    if (prevProps.data !== data) {\n      this.selectedSeriesIndexes = [];\n      this.setState({ chartData: normalizeData(this.props) }, this.plot);\n    } else if (prevProps.stacked !== stacked) {\n      this.setState({ chartData: normalizeData(this.props) }, () => {\n        if (this.selectedSeriesIndexes.length === 0) {\n          this.plot();\n        } else {\n          this.plot(this.state.chartData.filter((_, i) => this.selectedSeriesIndexes.includes(i)));\n        }\n      });\n    }\n\n    if (prevProps.useLocalTime !== useLocalTime) {\n      this.plot();\n    }\n  }\n\n  componentDidMount() {\n    this.plot();\n  }\n\n  componentWillUnmount() {\n    this.destroyPlot();\n  }\n\n  plot = (data: GraphSeries[] = this.state.chartData) => {\n    if (!this.chartRef.current) {\n      return;\n    }\n    this.destroyPlot();\n\n    this.$chart = $.plot($(this.chartRef.current), data, getOptions(this.props.stacked, this.props.useLocalTime));\n  };\n\n  destroyPlot = () => {\n    if (isPresent(this.$chart)) {\n      this.$chart.destroy();\n    }\n  };\n\n  plotSetAndDraw(data: GraphSeries[] = this.state.chartData) {\n    if (isPresent(this.$chart)) {\n      this.$chart.setData(data);\n      this.$chart.draw();\n    }\n  }\n\n  handleSeriesSelect = (selected: number[], selectedIndex: number) => {\n    const { chartData } = this.state;\n    this.plot(\n      this.selectedSeriesIndexes.length === 1 && this.selectedSeriesIndexes.includes(selectedIndex)\n        ? chartData.map(toHoverColor(selectedIndex, this.props.stacked))\n        : chartData.filter((_, i) => selected.includes(i)) // draw only selected\n    );\n    this.selectedSeriesIndexes = selected;\n  };\n\n  handleSeriesHover = (index: number) => () => {\n    if (this.rafID) {\n      cancelAnimationFrame(this.rafID);\n    }\n    this.rafID = requestAnimationFrame(() => {\n      this.plotSetAndDraw(this.state.chartData.map(toHoverColor(index, this.props.stacked)));\n    });\n  };\n\n  handleLegendMouseOut = () => {\n    cancelAnimationFrame(this.rafID);\n    this.plotSetAndDraw();\n  };\n\n  handleResize = () => {\n    if (isPresent(this.$chart)) {\n      this.plot(this.$chart.getData() as GraphSeries[]);\n    }\n  };\n\n  render() {\n    const { chartData } = this.state;\n    return (\n      <div className=\"graph\">\n        <ReactResizeDetector handleWidth onResize={this.handleResize} skipOnMount />\n        <div className=\"graph-chart\" ref={this.chartRef} />\n        <Legend\n          shouldReset={this.selectedSeriesIndexes.length === 0}\n          chartData={chartData}\n          onHover={this.handleSeriesHover}\n          onLegendMouseOut={this.handleLegendMouseOut}\n          onSeriesToggle={this.handleSeriesSelect}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}