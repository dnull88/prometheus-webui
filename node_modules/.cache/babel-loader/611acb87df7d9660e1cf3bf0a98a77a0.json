{"ast":null,"code":"import _toConsumableArray from\"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Button,InputGroup,InputGroupAddon,InputGroupText,Input}from'reactstrap';import Downshift from'downshift';import fuzzy from'fuzzy';import sanitizeHTML from'sanitize-html';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faSearch,faSpinner}from'@fortawesome/free-solid-svg-icons';var ExpressionInput=/*#__PURE__*/function(_Component){_inherits(ExpressionInput,_Component);var _super=_createSuper(ExpressionInput);function ExpressionInput(props){var _this;_classCallCheck(this,ExpressionInput);_this=_super.call(this,props);_this.exprInputRef=React.createRef();_this.setHeight=function(){var _ref=_this.exprInputRef.current,offsetHeight=_ref.offsetHeight,clientHeight=_ref.clientHeight,scrollHeight=_ref.scrollHeight;var offset=offsetHeight-clientHeight;// Needed in order for the height to be more accurate.\n_this.setState({height:scrollHeight+offset});};_this.handleInput=function(){_this.setValue(_this.exprInputRef.current.value);};_this.setValue=function(value){var onExpressionChange=_this.props.onExpressionChange;onExpressionChange(value);_this.setState({height:'auto'},_this.setHeight);};_this.handleKeyPress=function(event){var executeQuery=_this.props.executeQuery;if(event.key==='Enter'&&!event.shiftKey){executeQuery();event.preventDefault();}};_this.getSearchMatches=function(input,expressions){return fuzzy.filter(input.replace(/ /g,''),expressions,{pre:'<strong>',post:'</strong>'});};_this.createAutocompleteSection=function(downshift){var _downshift$inputValue=downshift.inputValue,inputValue=_downshift$inputValue===void 0?'':_downshift$inputValue,closeMenu=downshift.closeMenu,highlightedIndex=downshift.highlightedIndex;var autocompleteSections=_this.props.autocompleteSections;var index=0;var sections=inputValue.length&&_this.props.enableAutocomplete?Object.entries(autocompleteSections).reduce(function(acc,_ref2){var _ref3=_slicedToArray(_ref2,2),title=_ref3[0],items=_ref3[1];var matches=_this.getSearchMatches(inputValue,items);return!matches.length?acc:[].concat(_toConsumableArray(acc),[/*#__PURE__*/React.createElement(\"ul\",{className:\"autosuggest-dropdown-list\",key:title},/*#__PURE__*/React.createElement(\"li\",{className:\"autosuggest-dropdown-header\"},title),matches.slice(0,100)// Limit DOM rendering to 100 results, as DOM rendering is sloooow.\n.map(function(_ref4){var original=_ref4.original,text=_ref4.string;var itemProps=downshift.getItemProps({key:original,index,item:original,style:{backgroundColor:highlightedIndex===index++?'lightgray':'white'}});return/*#__PURE__*/React.createElement(\"li\",Object.assign({key:title},itemProps,{dangerouslySetInnerHTML:{__html:sanitizeHTML(text,{allowedTags:['strong']})}}));}))]);},[]):[];if(!sections.length){// This is ugly but is needed in order to sync state updates.\n// This way we force downshift to wait React render call to complete before closeMenu to be triggered.\nsetTimeout(closeMenu);return null;}return/*#__PURE__*/React.createElement(\"div\",Object.assign({},downshift.getMenuProps(),{className:\"autosuggest-dropdown\"}),sections);};_this.state={height:'auto'};return _this;}_createClass(ExpressionInput,[{key:\"componentDidMount\",value:function componentDidMount(){this.setHeight();}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){var value=this.props.value;if(value!==prevProps.value){this.setValue(value);}}},{key:\"render\",value:function render(){var _this2=this;var _this$props=this.props,executeQuery=_this$props.executeQuery,value=_this$props.value;var height=this.state.height;return/*#__PURE__*/React.createElement(Downshift,{onSelect:this.setValue},function(downshift){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(InputGroup,{className:\"expression-input\"},/*#__PURE__*/React.createElement(InputGroupAddon,{addonType:\"prepend\"},/*#__PURE__*/React.createElement(InputGroupText,null,_this2.props.loading?/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faSpinner,spin:true}):/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faSearch}))),/*#__PURE__*/React.createElement(Input,Object.assign({onInput:_this2.handleInput,style:{height},autoFocus:true,type:\"textarea\",rows:\"1\",onKeyPress:_this2.handleKeyPress,placeholder:\"Expression (press Shift+Enter for newlines)\",innerRef:_this2.exprInputRef},downshift.getInputProps({onKeyDown:function onKeyDown(event){switch(event.key){case'Home':case'End':// We want to be able to jump to the beginning/end of the input field.\n// By default, Downshift otherwise jumps to the first/last suggestion item instead.\nevent.nativeEvent.preventDownshiftDefault=true;break;case'ArrowUp':case'ArrowDown':if(!downshift.isOpen){event.nativeEvent.preventDownshiftDefault=true;}break;case'Enter':downshift.closeMenu();break;case'Escape':if(!downshift.isOpen){_this2.exprInputRef.current.blur();}break;default:}}}),{value:value})),/*#__PURE__*/React.createElement(InputGroupAddon,{addonType:\"append\"},/*#__PURE__*/React.createElement(Button,{className:\"execute-btn\",color:\"primary\",onClick:executeQuery},\"Execute\"))),downshift.isOpen&&_this2.createAutocompleteSection(downshift));});}}]);return ExpressionInput;}(Component);export default ExpressionInput;","map":{"version":3,"sources":["/app/src/pages/graph/ExpressionInput.tsx"],"names":["React","Component","Button","InputGroup","InputGroupAddon","InputGroupText","Input","Downshift","fuzzy","sanitizeHTML","FontAwesomeIcon","faSearch","faSpinner","ExpressionInput","props","exprInputRef","createRef","setHeight","current","offsetHeight","clientHeight","scrollHeight","offset","setState","height","handleInput","setValue","value","onExpressionChange","handleKeyPress","event","executeQuery","key","shiftKey","preventDefault","getSearchMatches","input","expressions","filter","replace","pre","post","createAutocompleteSection","downshift","inputValue","closeMenu","highlightedIndex","autocompleteSections","index","sections","length","enableAutocomplete","Object","entries","reduce","acc","title","items","matches","slice","map","original","text","string","itemProps","getItemProps","item","style","backgroundColor","__html","allowedTags","setTimeout","getMenuProps","state","prevProps","loading","getInputProps","onKeyDown","nativeEvent","preventDownshiftDefault","isOpen","blur"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\n\nimport Downshift, { ControllerStateAndHelpers } from 'downshift';\nimport fuzzy from 'fuzzy';\nimport sanitizeHTML from 'sanitize-html';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faSpinner } from '@fortawesome/free-solid-svg-icons';\n\ninterface ExpressionInputProps {\n  value: string;\n  onExpressionChange: (expr: string) => void;\n  autocompleteSections: { [key: string]: string[] };\n  executeQuery: () => void;\n  loading: boolean;\n  enableAutocomplete: boolean;\n}\n\ninterface ExpressionInputState {\n  height: number | string;\n}\n\nclass ExpressionInput extends Component<ExpressionInputProps, ExpressionInputState> {\n  private exprInputRef = React.createRef<HTMLInputElement>();\n\n  constructor(props: ExpressionInputProps) {\n    super(props);\n    this.state = {\n      height: 'auto',\n    };\n  }\n\n  componentDidMount() {\n    this.setHeight();\n  }\n\n  setHeight = () => {\n    const { offsetHeight, clientHeight, scrollHeight } = this.exprInputRef.current!;\n    const offset = offsetHeight - clientHeight; // Needed in order for the height to be more accurate.\n    this.setState({ height: scrollHeight + offset });\n  };\n\n  handleInput = () => {\n    this.setValue(this.exprInputRef.current!.value);\n  };\n\n  setValue = (value: string) => {\n    const { onExpressionChange } = this.props;\n    onExpressionChange(value);\n    this.setState({ height: 'auto' }, this.setHeight);\n  };\n\n  componentDidUpdate(prevProps: ExpressionInputProps) {\n    const { value } = this.props;\n    if (value !== prevProps.value) {\n      this.setValue(value);\n    }\n  }\n\n  handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const { executeQuery } = this.props;\n    if (event.key === 'Enter' && !event.shiftKey) {\n      executeQuery();\n      event.preventDefault();\n    }\n  };\n\n  getSearchMatches = (input: string, expressions: string[]) => {\n    return fuzzy.filter(input.replace(/ /g, ''), expressions, {\n      pre: '<strong>',\n      post: '</strong>',\n    });\n  };\n\n  createAutocompleteSection = (downshift: ControllerStateAndHelpers<any>) => {\n    const { inputValue = '', closeMenu, highlightedIndex } = downshift;\n    const { autocompleteSections } = this.props;\n    let index = 0;\n    const sections =\n      inputValue!.length && this.props.enableAutocomplete\n        ? Object.entries(autocompleteSections).reduce((acc, [title, items]) => {\n            const matches = this.getSearchMatches(inputValue!, items);\n            return !matches.length\n              ? acc\n              : [\n                  ...acc,\n                  <ul className=\"autosuggest-dropdown-list\" key={title}>\n                    <li className=\"autosuggest-dropdown-header\">{title}</li>\n                    {matches\n                      .slice(0, 100) // Limit DOM rendering to 100 results, as DOM rendering is sloooow.\n                      .map(({ original, string: text }) => {\n                        const itemProps = downshift.getItemProps({\n                          key: original,\n                          index,\n                          item: original,\n                          style: {\n                            backgroundColor: highlightedIndex === index++ ? 'lightgray' : 'white',\n                          },\n                        });\n                        return (\n                          <li\n                            key={title}\n                            {...itemProps}\n                            dangerouslySetInnerHTML={{ __html: sanitizeHTML(text, { allowedTags: ['strong'] }) }}\n                          />\n                        );\n                      })}\n                  </ul>,\n                ];\n          }, [] as JSX.Element[])\n        : [];\n\n    if (!sections.length) {\n      // This is ugly but is needed in order to sync state updates.\n      // This way we force downshift to wait React render call to complete before closeMenu to be triggered.\n      setTimeout(closeMenu);\n      return null;\n    }\n\n    return (\n      <div {...downshift.getMenuProps()} className=\"autosuggest-dropdown\">\n        {sections}\n      </div>\n    );\n  };\n\n  render() {\n    const { executeQuery, value } = this.props;\n    const { height } = this.state;\n    return (\n      <Downshift onSelect={this.setValue}>\n        {downshift => (\n          <div>\n            <InputGroup className=\"expression-input\">\n              <InputGroupAddon addonType=\"prepend\">\n                <InputGroupText>\n                  {this.props.loading ? <FontAwesomeIcon icon={faSpinner} spin /> : <FontAwesomeIcon icon={faSearch} />}\n                </InputGroupText>\n              </InputGroupAddon>\n              <Input\n                onInput={this.handleInput}\n                style={{ height }}\n                autoFocus\n                type=\"textarea\"\n                rows=\"1\"\n                onKeyPress={this.handleKeyPress}\n                placeholder=\"Expression (press Shift+Enter for newlines)\"\n                innerRef={this.exprInputRef}\n                {...downshift.getInputProps({\n                  onKeyDown: (event: React.KeyboardEvent): void => {\n                    switch (event.key) {\n                      case 'Home':\n                      case 'End':\n                        // We want to be able to jump to the beginning/end of the input field.\n                        // By default, Downshift otherwise jumps to the first/last suggestion item instead.\n                        (event.nativeEvent as any).preventDownshiftDefault = true;\n                        break;\n                      case 'ArrowUp':\n                      case 'ArrowDown':\n                        if (!downshift.isOpen) {\n                          (event.nativeEvent as any).preventDownshiftDefault = true;\n                        }\n                        break;\n                      case 'Enter':\n                        downshift.closeMenu();\n                        break;\n                      case 'Escape':\n                        if (!downshift.isOpen) {\n                          this.exprInputRef.current!.blur();\n                        }\n                        break;\n                      default:\n                    }\n                  },\n                } as any)}\n                value={value}\n              />\n              <InputGroupAddon addonType=\"append\">\n                <Button className=\"execute-btn\" color=\"primary\" onClick={executeQuery}>\n                  Execute\n                </Button>\n              </InputGroupAddon>\n            </InputGroup>\n            {downshift.isOpen && this.createAutocompleteSection(downshift)}\n          </div>\n        )}\n      </Downshift>\n    );\n  }\n}\n\nexport default ExpressionInput;\n"]},"metadata":{},"sourceType":"module"}