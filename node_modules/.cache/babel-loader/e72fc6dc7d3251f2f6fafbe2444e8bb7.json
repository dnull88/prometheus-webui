{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/app/src/pages/graph/DataTable.tsx\";\n\nimport React from 'react';\nimport { Alert, Table } from 'reactstrap';\nimport SeriesName from './SeriesName';\n\nvar limitSeries = function limitSeries(series) {\n  var maxSeries = 10000;\n\n  if (series.length > maxSeries) {\n    return series.slice(0, maxSeries);\n  }\n\n  return series;\n};\n\nvar DataTable = function DataTable(_ref) {\n  var data = _ref.data;\n\n  if (data === null) {\n    return /*#__PURE__*/React.createElement(Alert, {\n      color: \"light\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 12\n      }\n    }, \"No data queried yet\");\n  }\n\n  if (data.result === null || data.result.length === 0) {\n    return /*#__PURE__*/React.createElement(Alert, {\n      color: \"secondary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 12\n      }\n    }, \"Empty query result\");\n  }\n\n  var maxFormattableSize = 1000;\n  var rows = [];\n  var limited = false;\n  var doFormat = data.result.length <= maxFormattableSize;\n\n  switch (data.resultType) {\n    case 'vector':\n      rows = limitSeries(data.result).map(function (s, index) {\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          key: index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(SeriesName, {\n          labels: s.metric,\n          format: doFormat,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }\n        })), /*#__PURE__*/React.createElement(\"td\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }\n        }, s.value[1]));\n      });\n      limited = rows.length !== data.result.length;\n      break;\n\n    case 'matrix':\n      rows = limitSeries(data.result).map(function (s, index) {\n        var valueText = s.values.map(function (v) {\n          return v[1] + ' @' + v[0];\n        }).join('\\n');\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          style: {\n            whiteSpace: 'pre'\n          },\n          key: index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(SeriesName, {\n          labels: s.metric,\n          format: doFormat,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }\n        })), /*#__PURE__*/React.createElement(\"td\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }\n        }, valueText));\n      });\n      limited = rows.length !== data.result.length;\n      break;\n\n    case 'scalar':\n      rows.push( /*#__PURE__*/React.createElement(\"tr\", {\n        key: \"0\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }\n      }, \"scalar\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }\n      }, data.result[1])));\n      break;\n\n    case 'string':\n      rows.push( /*#__PURE__*/React.createElement(\"tr\", {\n        key: \"0\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }\n      }, \"string\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }\n      }, data.result[1])));\n      break;\n\n    default:\n      return /*#__PURE__*/React.createElement(Alert, {\n        color: \"danger\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 14\n        }\n      }, \"Unsupported result value type\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, limited && /*#__PURE__*/React.createElement(Alert, {\n    color: \"danger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, \"Warning:\"), \" Fetched \", data.result.length, \" metrics, only displaying first \", rows.length, \".\"), !doFormat && /*#__PURE__*/React.createElement(Alert, {\n    color: \"secondary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, \"Notice:\"), \" Showing more than \", maxFormattableSize, \" series, turning off label formatting for performance reasons.\"), /*#__PURE__*/React.createElement(Table, {\n    hover: true,\n    size: \"sm\",\n    className: \"data-table\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, rows)));\n};\n\nexport default DataTable;","map":{"version":3,"sources":["/app/src/pages/graph/DataTable.tsx"],"names":["React","Alert","Table","SeriesName","limitSeries","series","maxSeries","length","slice","DataTable","data","result","maxFormattableSize","rows","limited","doFormat","resultType","map","s","index","metric","value","valueText","values","v","join","whiteSpace","push"],"mappings":"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","sourcesContent":["import React, { FC, ReactNode } from 'react';\n\nimport { Alert, Table } from 'reactstrap';\n\nimport SeriesName from './SeriesName';\nimport { Metric } from '../../types/types';\n\nexport interface QueryResult {\n  data:\n    | null\n    | {\n        resultType: 'vector';\n        result: InstantSample[];\n      }\n    | {\n        resultType: 'matrix';\n        result: RangeSamples[];\n      }\n    | {\n        resultType: 'scalar';\n        result: SampleValue;\n      }\n    | {\n        resultType: 'string';\n        result: string;\n      };\n}\n\ninterface InstantSample {\n  metric: Metric;\n  value: SampleValue;\n}\n\ninterface RangeSamples {\n  metric: Metric;\n  values: SampleValue[];\n}\n\ntype SampleValue = [number, string];\n\nconst limitSeries = <S extends InstantSample | RangeSamples>(series: S[]): S[] => {\n  const maxSeries = 10000;\n\n  if (series.length > maxSeries) {\n    return series.slice(0, maxSeries);\n  }\n  return series;\n};\n\nconst DataTable: FC<QueryResult> = ({ data }) => {\n  if (data === null) {\n    return <Alert color=\"light\">No data queried yet</Alert>;\n  }\n\n  if (data.result === null || data.result.length === 0) {\n    return <Alert color=\"secondary\">Empty query result</Alert>;\n  }\n\n  const maxFormattableSize = 1000;\n  let rows: ReactNode[] = [];\n  let limited = false;\n  const doFormat = data.result.length <= maxFormattableSize;\n  switch (data.resultType) {\n    case 'vector':\n      rows = (limitSeries(data.result) as InstantSample[]).map(\n        (s: InstantSample, index: number): ReactNode => {\n          return (\n            <tr key={index}>\n              <td>\n                <SeriesName labels={s.metric} format={doFormat} />\n              </td>\n              <td>{s.value[1]}</td>\n            </tr>\n          );\n        }\n      );\n      limited = rows.length !== data.result.length;\n      break;\n    case 'matrix':\n      rows = (limitSeries(data.result) as RangeSamples[]).map((s, index) => {\n        const valueText = s.values\n          .map(v => {\n            return v[1] + ' @' + v[0];\n          })\n          .join('\\n');\n        return (\n          <tr style={{ whiteSpace: 'pre' }} key={index}>\n            <td>\n              <SeriesName labels={s.metric} format={doFormat} />\n            </td>\n            <td>{valueText}</td>\n          </tr>\n        );\n      });\n      limited = rows.length !== data.result.length;\n      break;\n    case 'scalar':\n      rows.push(\n        <tr key=\"0\">\n          <td>scalar</td>\n          <td>{data.result[1]}</td>\n        </tr>\n      );\n      break;\n    case 'string':\n      rows.push(\n        <tr key=\"0\">\n          <td>string</td>\n          <td>{data.result[1]}</td>\n        </tr>\n      );\n      break;\n    default:\n      return <Alert color=\"danger\">Unsupported result value type</Alert>;\n  }\n\n  return (\n    <>\n      {limited && (\n        <Alert color=\"danger\">\n          <strong>Warning:</strong> Fetched {data.result.length} metrics, only displaying first {rows.length}.\n        </Alert>\n      )}\n      {!doFormat && (\n        <Alert color=\"secondary\">\n          <strong>Notice:</strong> Showing more than {maxFormattableSize} series, turning off label formatting for\n          performance reasons.\n        </Alert>\n      )}\n      <Table hover size=\"sm\" className=\"data-table\">\n        <tbody>{rows}</tbody>\n      </Table>\n    </>\n  );\n};\n\nexport default DataTable;\n"]},"metadata":{},"sourceType":"module"}