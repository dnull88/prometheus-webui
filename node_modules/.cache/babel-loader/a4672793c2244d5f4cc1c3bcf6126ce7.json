{"ast":null,"code":"import React from'react';import{Table}from'reactstrap';import{useFetch}from'../../hooks/useFetch';import{withStatusIndicator}from'../../components/withStatusIndicator';import{usePathPrefix}from'../../contexts/PathPrefixContext';import{API_PATH}from'../../constants/constants';export var TSDBStatusContent=function TSDBStatusContent(_ref){var headStats=_ref.headStats,labelValueCountByLabelName=_ref.labelValueCountByLabelName,seriesCountByMetricName=_ref.seriesCountByMetricName,memoryInBytesByLabelName=_ref.memoryInBytesByLabelName,seriesCountByLabelValuePair=_ref.seriesCountByLabelValuePair;var unixToTime=function unixToTime(unix){return new Date(unix).toISOString();};var chunkCount=headStats.chunkCount,numSeries=headStats.numSeries,minTime=headStats.minTime,maxTime=headStats.maxTime;var stats=[{header:'Number of Series',value:numSeries},{header:'Number of Chunks',value:chunkCount},{header:'Current Min Time',value:\"\".concat(unixToTime(minTime),\" (\").concat(minTime,\")\")},{header:'Current Max Time',value:\"\".concat(unixToTime(maxTime),\" (\").concat(maxTime,\")\")}];return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h2\",null,\"TSDB Status\"),/*#__PURE__*/React.createElement(\"h3\",{className:\"p-2\"},\"Head Stats\"),/*#__PURE__*/React.createElement(\"div\",{className:\"p-2\"},/*#__PURE__*/React.createElement(Table,{bordered:true,size:\"sm\",striped:true},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,stats.map(function(_ref2){var header=_ref2.header;return/*#__PURE__*/React.createElement(\"th\",{key:header},header);}))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,stats.map(function(_ref3){var header=_ref3.header,value=_ref3.value;return/*#__PURE__*/React.createElement(\"td\",{key:header},value);}))))),/*#__PURE__*/React.createElement(\"h3\",{className:\"p-2\"},\"Head Cardinality Stats\"),[{title:'Top 10 label names with value count',stats:labelValueCountByLabelName},{title:'Top 10 series count by metric names',stats:seriesCountByMetricName},{title:'Top 10 label names with high memory usage',unit:'Bytes',stats:memoryInBytesByLabelName},{title:'Top 10 series count by label value pairs',stats:seriesCountByLabelValuePair}].map(function(_ref4){var title=_ref4.title,_ref4$unit=_ref4.unit,unit=_ref4$unit===void 0?'Count':_ref4$unit,stats=_ref4.stats;return/*#__PURE__*/React.createElement(\"div\",{className:\"p-2\",key:title},/*#__PURE__*/React.createElement(\"h3\",null,title),/*#__PURE__*/React.createElement(Table,{bordered:true,size:\"sm\",striped:true},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Name\"),/*#__PURE__*/React.createElement(\"th\",null,unit))),/*#__PURE__*/React.createElement(\"tbody\",null,stats.map(function(_ref5){var name=_ref5.name,value=_ref5.value;return/*#__PURE__*/React.createElement(\"tr\",{key:name},/*#__PURE__*/React.createElement(\"td\",null,name),/*#__PURE__*/React.createElement(\"td\",null,value));}))));}));};TSDBStatusContent.displayName='TSDBStatusContent';var TSDBStatusContentWithStatusIndicator=withStatusIndicator(TSDBStatusContent);var TSDBStatus=function TSDBStatus(){var pathPrefix=usePathPrefix();var _useFetch=useFetch(\"\".concat(pathPrefix,\"/\").concat(API_PATH,\"/status/tsdb\")),response=_useFetch.response,error=_useFetch.error,isLoading=_useFetch.isLoading;return/*#__PURE__*/React.createElement(TSDBStatusContentWithStatusIndicator,Object.assign({error:error,isLoading:isLoading},response.data,{componentTitle:\"TSDB Status information\"}));};export default TSDBStatus;","map":{"version":3,"sources":["/app/src/pages/tsdbStatus/TSDBStatus.tsx"],"names":["React","Table","useFetch","withStatusIndicator","usePathPrefix","API_PATH","TSDBStatusContent","headStats","labelValueCountByLabelName","seriesCountByMetricName","memoryInBytesByLabelName","seriesCountByLabelValuePair","unixToTime","unix","Date","toISOString","chunkCount","numSeries","minTime","maxTime","stats","header","value","map","title","unit","name","displayName","TSDBStatusContentWithStatusIndicator","TSDBStatus","pathPrefix","response","error","isLoading","data"],"mappings":"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","sourcesContent":["import React, { FC } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { Table } from 'reactstrap';\n\nimport { useFetch } from '../../hooks/useFetch';\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\n\ninterface Stats {\n  name: string;\n  value: number;\n}\n\ninterface HeadStats {\n  numSeries: number;\n  chunkCount: number;\n  minTime: number;\n  maxTime: number;\n}\n\nexport interface TSDBMap {\n  headStats: HeadStats;\n  seriesCountByMetricName: Stats[];\n  labelValueCountByLabelName: Stats[];\n  memoryInBytesByLabelName: Stats[];\n  seriesCountByLabelValuePair: Stats[];\n}\n\nexport const TSDBStatusContent: FC<TSDBMap> = ({\n  headStats,\n  labelValueCountByLabelName,\n  seriesCountByMetricName,\n  memoryInBytesByLabelName,\n  seriesCountByLabelValuePair,\n}) => {\n  const unixToTime = (unix: number): string => new Date(unix).toISOString();\n  const { chunkCount, numSeries, minTime, maxTime } = headStats;\n  const stats = [\n    { header: 'Number of Series', value: numSeries },\n    { header: 'Number of Chunks', value: chunkCount },\n    { header: 'Current Min Time', value: `${unixToTime(minTime)} (${minTime})` },\n    { header: 'Current Max Time', value: `${unixToTime(maxTime)} (${maxTime})` },\n  ];\n  return (\n    <div>\n      <h2>TSDB Status</h2>\n      <h3 className=\"p-2\">Head Stats</h3>\n      <div className=\"p-2\">\n        <Table bordered size=\"sm\" striped>\n          <thead>\n            <tr>\n              {stats.map(({ header }) => {\n                return <th key={header}>{header}</th>;\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              {stats.map(({ header, value }) => {\n                return <td key={header}>{value}</td>;\n              })}\n            </tr>\n          </tbody>\n        </Table>\n      </div>\n      <h3 className=\"p-2\">Head Cardinality Stats</h3>\n      {[\n        { title: 'Top 10 label names with value count', stats: labelValueCountByLabelName },\n        { title: 'Top 10 series count by metric names', stats: seriesCountByMetricName },\n        { title: 'Top 10 label names with high memory usage', unit: 'Bytes', stats: memoryInBytesByLabelName },\n        { title: 'Top 10 series count by label value pairs', stats: seriesCountByLabelValuePair },\n      ].map(({ title, unit = 'Count', stats }) => {\n        return (\n          <div className=\"p-2\" key={title}>\n            <h3>{title}</h3>\n            <Table bordered size=\"sm\" striped>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>{unit}</th>\n                </tr>\n              </thead>\n              <tbody>\n                {stats.map(({ name, value }) => {\n                  return (\n                    <tr key={name}>\n                      <td>{name}</td>\n                      <td>{value}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\nTSDBStatusContent.displayName = 'TSDBStatusContent';\n\nconst TSDBStatusContentWithStatusIndicator = withStatusIndicator(TSDBStatusContent);\n\nconst TSDBStatus: FC<RouteComponentProps> = () => {\n  const pathPrefix = usePathPrefix();\n  const { response, error, isLoading } = useFetch<TSDBMap>(`${pathPrefix}/${API_PATH}/status/tsdb`);\n\n  return (\n    <TSDBStatusContentWithStatusIndicator\n      error={error}\n      isLoading={isLoading}\n      {...response.data}\n      componentTitle=\"TSDB Status information\"\n    />\n  );\n};\n\nexport default TSDBStatus;\n"]},"metadata":{},"sourceType":"module"}