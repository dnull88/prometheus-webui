{"ast":null,"code":"export var groupTargets = function groupTargets(targets) {\n  return targets.reduce(function (pools, target) {\n    var health = target.health,\n        scrapePool = target.scrapePool;\n    var up = health.toLowerCase() === 'up' ? 1 : 0;\n\n    if (!pools[scrapePool]) {\n      pools[scrapePool] = {\n        upCount: 0,\n        targets: []\n      };\n    }\n\n    pools[scrapePool].targets.push(target);\n    pools[scrapePool].upCount += up;\n    return pools;\n  }, {});\n};\nexport var getColor = function getColor(health) {\n  switch (health.toLowerCase()) {\n    case 'up':\n      return 'success';\n\n    case 'down':\n      return 'danger';\n\n    default:\n      return 'warning';\n  }\n};","map":{"version":3,"sources":["/app/src/pages/targets/target.ts"],"names":["groupTargets","targets","reduce","pools","target","health","scrapePool","up","toLowerCase","upCount","push","getColor"],"mappings":"AA6BA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD;AAAA,SAC1BA,OAAO,CAACC,MAAR,CAAe,UAACC,KAAD,EAAqBC,MAArB,EAAwC;AAAA,QAC7CC,MAD6C,GACtBD,MADsB,CAC7CC,MAD6C;AAAA,QACrCC,UADqC,GACtBF,MADsB,CACrCE,UADqC;AAErD,QAAMC,EAAE,GAAGF,MAAM,CAACG,WAAP,OAAyB,IAAzB,GAAgC,CAAhC,GAAoC,CAA/C;;AACA,QAAI,CAACL,KAAK,CAACG,UAAD,CAAV,EAAwB;AACtBH,MAAAA,KAAK,CAACG,UAAD,CAAL,GAAoB;AAClBG,QAAAA,OAAO,EAAE,CADS;AAElBR,QAAAA,OAAO,EAAE;AAFS,OAApB;AAID;;AACDE,IAAAA,KAAK,CAACG,UAAD,CAAL,CAAkBL,OAAlB,CAA0BS,IAA1B,CAA+BN,MAA/B;AACAD,IAAAA,KAAK,CAACG,UAAD,CAAL,CAAkBG,OAAlB,IAA6BF,EAA7B;AACA,WAAOJ,KAAP;AACD,GAZD,EAYG,EAZH,CAD0B;AAAA,CAArB;AAeP,OAAO,IAAMQ,QAAQ,GAAG,SAAXA,QAAW,CAACN,MAAD,EAA4B;AAClD,UAAQA,MAAM,CAACG,WAAP,EAAR;AACE,SAAK,IAAL;AACE,aAAO,SAAP;;AACF,SAAK,MAAL;AACE,aAAO,QAAP;;AACF;AACE,aAAO,SAAP;AANJ;AAQD,CATM","sourcesContent":["export interface Labels {\n  [key: string]: string;\n}\n\nexport interface Target {\n  discoveredLabels: Labels;\n  labels: Labels;\n  scrapePool: string;\n  scrapeUrl: string;\n  globalUrl: string;\n  lastError: string;\n  lastScrape: string;\n  lastScrapeDuration: number;\n  health: string;\n}\n\nexport interface DroppedTarget {\n  discoveredLabels: Labels;\n}\n\nexport interface ScrapePool {\n  upCount: number;\n  targets: Target[];\n}\n\nexport interface ScrapePools {\n  [scrapePool: string]: ScrapePool;\n}\n\nexport const groupTargets = (targets: Target[]): ScrapePools =>\n  targets.reduce((pools: ScrapePools, target: Target) => {\n    const { health, scrapePool } = target;\n    const up = health.toLowerCase() === 'up' ? 1 : 0;\n    if (!pools[scrapePool]) {\n      pools[scrapePool] = {\n        upCount: 0,\n        targets: [],\n      };\n    }\n    pools[scrapePool].targets.push(target);\n    pools[scrapePool].upCount += up;\n    return pools;\n  }, {});\n\nexport const getColor = (health: string): string => {\n  switch (health.toLowerCase()) {\n    case 'up':\n      return 'success';\n    case 'down':\n      return 'danger';\n    default:\n      return 'warning';\n  }\n};\n"]},"metadata":{},"sourceType":"module"}