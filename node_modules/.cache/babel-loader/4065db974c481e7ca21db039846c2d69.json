{"ast":null,"code":"import _slicedToArray from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n\nvar _this = this,\n    _jsxFileName = \"/app/src/pages/serviceDiscovery/Services.tsx\";\n\nimport React from 'react';\nimport { useFetch } from '../../hooks/useFetch';\nimport { LabelsTable } from './LabelsTable';\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport { mapObjEntries } from '../../utils';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\nexport var processSummary = function processSummary(activeTargets, droppedTargets) {\n  var targets = {}; // Get targets of each type along with the total and active end points\n\n  var _iterator = _createForOfIteratorHelper(activeTargets),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var target = _step.value;\n      var name = target.scrapePool;\n\n      if (!targets[name]) {\n        targets[name] = {\n          total: 0,\n          active: 0\n        };\n      }\n\n      targets[name].total++;\n      targets[name].active++;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(droppedTargets),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _target = _step2.value;\n      var _name = _target.discoveredLabels.job;\n\n      if (!targets[_name]) {\n        targets[_name] = {\n          total: 0,\n          active: 0\n        };\n      }\n\n      targets[_name].total++;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return targets;\n};\nexport var processTargets = function processTargets(activeTargets, droppedTargets) {\n  var labels = {};\n\n  var _iterator3 = _createForOfIteratorHelper(activeTargets),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var target = _step3.value;\n      var name = target.scrapePool;\n\n      if (!labels[name]) {\n        labels[name] = [];\n      }\n\n      labels[name].push({\n        discoveredLabels: target.discoveredLabels,\n        labels: target.labels,\n        isDropped: false\n      });\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  var _iterator4 = _createForOfIteratorHelper(droppedTargets),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _target2 = _step4.value;\n      var _name2 = _target2.discoveredLabels.job;\n\n      if (!labels[_name2]) {\n        labels[_name2] = [];\n      }\n\n      labels[_name2].push({\n        discoveredLabels: _target2.discoveredLabels,\n        isDropped: true,\n        labels: {}\n      });\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return labels;\n};\nexport var ServiceDiscoveryContent = function ServiceDiscoveryContent(_ref) {\n  var activeTargets = _ref.activeTargets,\n      droppedTargets = _ref.droppedTargets;\n  var targets = processSummary(activeTargets, droppedTargets);\n  var labels = processTargets(activeTargets, droppedTargets);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, \"Service Discovery\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, mapObjEntries(targets, function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        k = _ref3[0],\n        v = _ref3[1];\n\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: k,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: '#' + k,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, k, \" (\", v.active, \" / \", v.total, \" active targets)\"));\n  })), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }), mapObjEntries(labels, function (_ref4) {\n    var _ref5 = _slicedToArray(_ref4, 2),\n        k = _ref5[0],\n        v = _ref5[1];\n\n    return /*#__PURE__*/React.createElement(LabelsTable, {\n      value: v,\n      name: k,\n      key: k,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 16\n      }\n    });\n  }));\n};\nServiceDiscoveryContent.displayName = 'ServiceDiscoveryContent';\nvar ServicesWithStatusIndicator = withStatusIndicator(ServiceDiscoveryContent);\n\nvar ServiceDiscovery = function ServiceDiscovery() {\n  var pathPrefix = usePathPrefix();\n\n  var _useFetch = useFetch(\"\".concat(pathPrefix, \"/\").concat(API_PATH, \"/targets\")),\n      response = _useFetch.response,\n      error = _useFetch.error,\n      isLoading = _useFetch.isLoading;\n\n  return /*#__PURE__*/React.createElement(ServicesWithStatusIndicator, Object.assign({}, response.data, {\n    error: error,\n    isLoading: isLoading,\n    componentTitle: \"Service Discovery information\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default ServiceDiscovery;","map":{"version":3,"sources":["/app/src/pages/serviceDiscovery/Services.tsx"],"names":["React","useFetch","LabelsTable","withStatusIndicator","mapObjEntries","usePathPrefix","API_PATH","processSummary","activeTargets","droppedTargets","targets","target","name","scrapePool","total","active","discoveredLabels","job","processTargets","labels","push","isDropped","ServiceDiscoveryContent","k","v","displayName","ServicesWithStatusIndicator","ServiceDiscovery","pathPrefix","response","error","isLoading","data"],"mappings":"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","sourcesContent":["import React, { FC } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { useFetch } from '../../hooks/useFetch';\nimport { LabelsTable } from './LabelsTable';\nimport { Target, Labels, DroppedTarget } from '../targets/target';\n\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport { mapObjEntries } from '../../utils';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\n\ninterface ServiceMap {\n  activeTargets: Target[];\n  droppedTargets: DroppedTarget[];\n}\n\nexport interface TargetLabels {\n  discoveredLabels: Labels;\n  labels: Labels;\n  isDropped: boolean;\n}\n\nexport const processSummary = (activeTargets: Target[], droppedTargets: DroppedTarget[]) => {\n  const targets: Record<string, { active: number; total: number }> = {};\n\n  // Get targets of each type along with the total and active end points\n  for (const target of activeTargets) {\n    const { scrapePool: name } = target;\n    if (!targets[name]) {\n      targets[name] = {\n        total: 0,\n        active: 0,\n      };\n    }\n    targets[name].total++;\n    targets[name].active++;\n  }\n  for (const target of droppedTargets) {\n    const { job: name } = target.discoveredLabels;\n    if (!targets[name]) {\n      targets[name] = {\n        total: 0,\n        active: 0,\n      };\n    }\n    targets[name].total++;\n  }\n\n  return targets;\n};\n\nexport const processTargets = (activeTargets: Target[], droppedTargets: DroppedTarget[]) => {\n  const labels: Record<string, TargetLabels[]> = {};\n\n  for (const target of activeTargets) {\n    const name = target.scrapePool;\n    if (!labels[name]) {\n      labels[name] = [];\n    }\n    labels[name].push({\n      discoveredLabels: target.discoveredLabels,\n      labels: target.labels,\n      isDropped: false,\n    });\n  }\n\n  for (const target of droppedTargets) {\n    const { job: name } = target.discoveredLabels;\n    if (!labels[name]) {\n      labels[name] = [];\n    }\n    labels[name].push({\n      discoveredLabels: target.discoveredLabels,\n      isDropped: true,\n      labels: {},\n    });\n  }\n\n  return labels;\n};\n\nexport const ServiceDiscoveryContent: FC<ServiceMap> = ({ activeTargets, droppedTargets }) => {\n  const targets = processSummary(activeTargets, droppedTargets);\n  const labels = processTargets(activeTargets, droppedTargets);\n\n  return (\n    <>\n      <h2>Service Discovery</h2>\n      <ul>\n        {mapObjEntries(targets, ([k, v]) => (\n          <li key={k}>\n            <a href={'#' + k}>\n              {k} ({v.active} / {v.total} active targets)\n            </a>\n          </li>\n        ))}\n      </ul>\n      <hr />\n      {mapObjEntries(labels, ([k, v]) => {\n        return <LabelsTable value={v} name={k} key={k} />;\n      })}\n    </>\n  );\n};\nServiceDiscoveryContent.displayName = 'ServiceDiscoveryContent';\n\nconst ServicesWithStatusIndicator = withStatusIndicator(ServiceDiscoveryContent);\n\nconst ServiceDiscovery: FC<RouteComponentProps> = () => {\n  const pathPrefix = usePathPrefix();\n  const { response, error, isLoading } = useFetch<ServiceMap>(`${pathPrefix}/${API_PATH}/targets`);\n  return (\n    <ServicesWithStatusIndicator\n      {...response.data}\n      error={error}\n      isLoading={isLoading}\n      componentTitle=\"Service Discovery information\"\n    />\n  );\n};\n\nexport default ServiceDiscovery;\n"]},"metadata":{},"sourceType":"module"}