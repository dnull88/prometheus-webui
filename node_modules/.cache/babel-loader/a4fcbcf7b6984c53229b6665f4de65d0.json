{"ast":null,"code":"import _slicedToArray from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/app/src/pages/rules/RulesContent.tsx\";\n\nimport React from 'react';\nimport { Alert, Table, Badge } from 'reactstrap';\nimport { Link } from '@reach/router';\nimport { formatRelative, createExpressionLink, humanizeDuration, formatDuration } from '../../utils';\nimport { now } from 'moment';\n\nvar GraphExpressionLink = function GraphExpressionLink(props) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, props.title, \":\"), /*#__PURE__*/React.createElement(Link, {\n    className: \"ml-4\",\n    to: createExpressionLink(props.expr),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, props.text), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport var RulesContent = function RulesContent(_ref) {\n  var response = _ref.response;\n\n  var getBadgeColor = function getBadgeColor(state) {\n    switch (state) {\n      case 'ok':\n        return 'success';\n\n      case 'err':\n        return 'danger';\n\n      case 'unknown':\n        return 'warning';\n    }\n  };\n\n  if (response.data) {\n    var groups = response.data.groups;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, \"Rules\"), groups.map(function (g, i) {\n      return /*#__PURE__*/React.createElement(Table, {\n        bordered: true,\n        key: i,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        colSpan: 3,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: '#' + g.name,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        id: g.name,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 23\n        }\n      }, g.name))), /*#__PURE__*/React.createElement(\"td\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }\n      }, formatRelative(g.lastEvaluation, now()), \" ago\")), /*#__PURE__*/React.createElement(\"td\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }\n      }, humanizeDuration(parseFloat(g.evaluationTime) * 1000))))), /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        className: \"font-weight-bold\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 19\n        }\n      }, \"Rule\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 19\n        }\n      }, \"State\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 19\n        }\n      }, \"Error\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 19\n        }\n      }, \"Last Evaluation\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 19\n        }\n      }, \"Evaluation Time\")), g.rules.map(function (r, i) {\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          key: i,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          style: {\n            backgroundColor: '#F5F5F5'\n          },\n          className: \"rule_cell\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 23\n          }\n        }, r.alerts ? /*#__PURE__*/React.createElement(GraphExpressionLink, {\n          title: \"alert\",\n          text: r.name,\n          expr: \"ALERTS{alertname=\\\"\".concat(r.name, \"\\\"}\"),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 27\n          }\n        }) : /*#__PURE__*/React.createElement(GraphExpressionLink, {\n          title: \"record\",\n          text: r.name,\n          expr: r.name,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 27\n          }\n        }), /*#__PURE__*/React.createElement(GraphExpressionLink, {\n          title: \"expr\",\n          text: r.query,\n          expr: r.query,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }\n        }), r.duration > 0 && /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"strong\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }\n        }, \"for:\"), \" \", formatDuration(r.duration * 1000)), r.labels && Object.keys(r.labels).length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"strong\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }\n        }, \"labels:\"), Object.entries(r.labels).map(function (_ref2) {\n          var _ref3 = _slicedToArray(_ref2, 2),\n              key = _ref3[0],\n              value = _ref3[1];\n\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: \"ml-4\",\n            key: key,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 31\n            }\n          }, key, \": \", value);\n        })), r.alerts && r.annotations && Object.keys(r.annotations).length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"strong\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }\n        }, \"annotations:\"), Object.entries(r.annotations).map(function (_ref4) {\n          var _ref5 = _slicedToArray(_ref4, 2),\n              key = _ref5[0],\n              value = _ref5[1];\n\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: \"ml-4\",\n            key: key,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 31\n            }\n          }, key, \": \", value);\n        }))), /*#__PURE__*/React.createElement(\"td\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 23\n          }\n        }, /*#__PURE__*/React.createElement(Badge, {\n          color: getBadgeColor(r.health),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }\n        }, r.health.toUpperCase())), /*#__PURE__*/React.createElement(\"td\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 23\n          }\n        }, r.lastError ? /*#__PURE__*/React.createElement(Alert, {\n          color: \"danger\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 42\n          }\n        }, r.lastError) : null), /*#__PURE__*/React.createElement(\"td\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 23\n          }\n        }, formatRelative(r.lastEvaluation, now()), \" ago\"), /*#__PURE__*/React.createElement(\"td\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 23\n          }\n        }, humanizeDuration(parseFloat(r.evaluationTime) * 1000)));\n      })));\n    }));\n  }\n\n  return null;\n};","map":{"version":3,"sources":["/app/src/pages/rules/RulesContent.tsx"],"names":["React","Alert","Table","Badge","Link","formatRelative","createExpressionLink","humanizeDuration","formatDuration","now","GraphExpressionLink","props","title","expr","text","RulesContent","response","getBadgeColor","state","data","groups","map","g","i","name","lastEvaluation","parseFloat","evaluationTime","rules","r","backgroundColor","alerts","query","duration","labels","Object","keys","length","entries","key","value","annotations","health","toUpperCase","lastError"],"mappings":"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","sourcesContent":["import React, { FC } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { APIResponse } from '../../hooks/useFetch';\nimport { Alert, Table, Badge } from 'reactstrap';\nimport { Link } from '@reach/router';\nimport { formatRelative, createExpressionLink, humanizeDuration, formatDuration } from '../../utils';\nimport { Rule } from '../../types/types';\nimport { now } from 'moment';\n\ninterface RulesContentProps {\n  response: APIResponse<RulesMap>;\n}\n\ninterface RuleGroup {\n  name: string;\n  file: string;\n  rules: Rule[];\n  evaluationTime: string;\n  lastEvaluation: string;\n}\n\nexport interface RulesMap {\n  groups: RuleGroup[];\n}\n\nconst GraphExpressionLink: FC<{ expr: string; text: string; title: string }> = props => {\n  return (\n    <>\n      <strong>{props.title}:</strong>\n      <Link className=\"ml-4\" to={createExpressionLink(props.expr)}>\n        {props.text}\n      </Link>\n      <br />\n    </>\n  );\n};\n\nexport const RulesContent: FC<RouteComponentProps & RulesContentProps> = ({ response }) => {\n  const getBadgeColor = (state: string) => {\n    switch (state) {\n      case 'ok':\n        return 'success';\n\n      case 'err':\n        return 'danger';\n\n      case 'unknown':\n        return 'warning';\n    }\n  };\n\n  if (response.data) {\n    const groups: RuleGroup[] = response.data.groups;\n    return (\n      <>\n        <h2>Rules</h2>\n        {groups.map((g, i) => {\n          return (\n            <Table bordered key={i}>\n              <thead>\n                <tr>\n                  <td colSpan={3}>\n                    <a href={'#' + g.name}>\n                      <h2 id={g.name}>{g.name}</h2>\n                    </a>\n                  </td>\n                  <td>\n                    <h2>{formatRelative(g.lastEvaluation, now())} ago</h2>\n                  </td>\n                  <td>\n                    <h2>{humanizeDuration(parseFloat(g.evaluationTime) * 1000)}</h2>\n                  </td>\n                </tr>\n              </thead>\n              <tbody>\n                <tr className=\"font-weight-bold\">\n                  <td>Rule</td>\n                  <td>State</td>\n                  <td>Error</td>\n                  <td>Last Evaluation</td>\n                  <td>Evaluation Time</td>\n                </tr>\n                {g.rules.map((r, i) => {\n                  return (\n                    <tr key={i}>\n                      <td style={{ backgroundColor: '#F5F5F5' }} className=\"rule_cell\">\n                        {r.alerts ? (\n                          <GraphExpressionLink title=\"alert\" text={r.name} expr={`ALERTS{alertname=\"${r.name}\"}`} />\n                        ) : (\n                          <GraphExpressionLink title=\"record\" text={r.name} expr={r.name} />\n                        )}\n                        <GraphExpressionLink title=\"expr\" text={r.query} expr={r.query} />\n                        {r.duration > 0 && (\n                          <div>\n                            <strong>for:</strong> {formatDuration(r.duration * 1000)}\n                          </div>\n                        )}\n                        {r.labels && Object.keys(r.labels).length > 0 && (\n                          <div>\n                            <strong>labels:</strong>\n                            {Object.entries(r.labels).map(([key, value]) => (\n                              <div className=\"ml-4\" key={key}>\n                                {key}: {value}\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                        {r.alerts && r.annotations && Object.keys(r.annotations).length > 0 && (\n                          <div>\n                            <strong>annotations:</strong>\n                            {Object.entries(r.annotations).map(([key, value]) => (\n                              <div className=\"ml-4\" key={key}>\n                                {key}: {value}\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                      </td>\n                      <td>\n                        <Badge color={getBadgeColor(r.health)}>{r.health.toUpperCase()}</Badge>\n                      </td>\n                      <td>{r.lastError ? <Alert color=\"danger\">{r.lastError}</Alert> : null}</td>\n                      <td>{formatRelative(r.lastEvaluation, now())} ago</td>\n                      <td>{humanizeDuration(parseFloat(r.evaluationTime) * 1000)}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n          );\n        })}\n      </>\n    );\n  }\n\n  return null;\n};\n"]},"metadata":{},"sourceType":"module"}