{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/app/src/pages/graph/SeriesName.tsx\";\n\nimport React from 'react';\nimport { metricToSeriesName } from '../../utils';\n\nvar SeriesName = function SeriesName(_ref) {\n  var labels = _ref.labels,\n      format = _ref.format;\n\n  var renderFormatted = function renderFormatted() {\n    var labelNodes = [];\n    var first = true;\n\n    for (var label in labels) {\n      if (label === '__name__') {\n        continue;\n      }\n\n      labelNodes.push( /*#__PURE__*/React.createElement(\"span\", {\n        key: label,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 9\n        }\n      }, !first && ', ', /*#__PURE__*/React.createElement(\"span\", {\n        className: \"legend-label-name\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }\n      }, label), \"=\", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"legend-label-value\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 62\n        }\n      }, \"\\\"\", labels[label], \"\\\"\")));\n\n      if (first) {\n        first = false;\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"legend-metric-name\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, labels.__name__ || ''), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"legend-label-brace\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, '{'), labelNodes, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"legend-label-brace\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, '}'));\n  };\n\n  if (labels === null) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, \"scalar\");\n  }\n\n  if (format) {\n    return renderFormatted();\n  } // Return a simple text node. This is much faster to scroll through\n  // for longer lists (hundreds of items).\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, metricToSeriesName(labels));\n};\n\nexport default SeriesName;","map":{"version":3,"sources":["/app/src/pages/graph/SeriesName.tsx"],"names":["React","metricToSeriesName","SeriesName","labels","format","renderFormatted","labelNodes","first","label","push","__name__"],"mappings":";;;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AACA,SAASC,kBAAT,QAAmC,aAAnC;;AAOA,IAAMC,UAA+B,GAAG,SAAlCA,UAAkC,OAAwB;AAAA,MAArBC,MAAqB,QAArBA,MAAqB;AAAA,MAAbC,MAAa,QAAbA,MAAa;;AAC9D,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAA0B;AAChD,QAAMC,UAAgC,GAAG,EAAzC;AACA,QAAIC,KAAK,GAAG,IAAZ;;AACA,SAAK,IAAMC,KAAX,IAAoBL,MAApB,EAA4B;AAC1B,UAAIK,KAAK,KAAK,UAAd,EAA0B;AACxB;AACD;;AAEDF,MAAAA,UAAU,CAACG,IAAX,eACE;AAAM,QAAA,GAAG,EAAED,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,CAACD,KAAD,IAAU,IADb,eAEE;AAAM,QAAA,SAAS,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqCC,KAArC,CAFF,oBAEqD;AAAM,QAAA,SAAS,EAAC,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAuCL,MAAM,CAACK,KAAD,CAA7C,OAFrD,CADF;;AAOA,UAAID,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD;AACF;;AAED,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAC,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsCJ,MAAM,CAAEO,QAAR,IAAoB,EAA1D,CADF,eAEE;AAAM,MAAA,SAAS,EAAC,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsC,GAAtC,CAFF,EAGGJ,UAHH,eAIE;AAAM,MAAA,SAAS,EAAC,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsC,GAAtC,CAJF,CADF;AAQD,GA5BD;;AA8BA,MAAIH,MAAM,KAAK,IAAf,EAAqB;AACnB,wBAAO,mDAAP;AACD;;AAED,MAAIC,MAAJ,EAAY;AACV,WAAOC,eAAe,EAAtB;AACD,GArC6D,CAsC9D;AACA;;;AACA,sBAAO,0CAAGJ,kBAAkB,CAACE,MAAD,CAArB,CAAP;AACD,CAzCD;;AA2CA,eAAeD,UAAf","sourcesContent":["import React, { FC } from 'react';\nimport { metricToSeriesName } from '../../utils';\n\ninterface SeriesNameProps {\n  labels: { [key: string]: string } | null;\n  format: boolean;\n}\n\nconst SeriesName: FC<SeriesNameProps> = ({ labels, format }) => {\n  const renderFormatted = (): React.ReactElement => {\n    const labelNodes: React.ReactElement[] = [];\n    let first = true;\n    for (const label in labels) {\n      if (label === '__name__') {\n        continue;\n      }\n\n      labelNodes.push(\n        <span key={label}>\n          {!first && ', '}\n          <span className=\"legend-label-name\">{label}</span>=<span className=\"legend-label-value\">\"{labels[label]}\"</span>\n        </span>\n      );\n\n      if (first) {\n        first = false;\n      }\n    }\n\n    return (\n      <div>\n        <span className=\"legend-metric-name\">{labels!.__name__ || ''}</span>\n        <span className=\"legend-label-brace\">{'{'}</span>\n        {labelNodes}\n        <span className=\"legend-label-brace\">{'}'}</span>\n      </div>\n    );\n  };\n\n  if (labels === null) {\n    return <>scalar</>;\n  }\n\n  if (format) {\n    return renderFormatted();\n  }\n  // Return a simple text node. This is much faster to scroll through\n  // for longer lists (hundreds of items).\n  return <>{metricToSeriesName(labels!)}</>;\n};\n\nexport default SeriesName;\n"]},"metadata":{},"sourceType":"module"}