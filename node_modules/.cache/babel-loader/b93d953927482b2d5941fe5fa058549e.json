{"ast":null,"code":"import _slicedToArray from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/app/src/pages/targets/TargetLabels.tsx\";\n\nimport React, { Fragment, useState } from 'react';\nimport { Badge, Tooltip } from 'reactstrap';\nimport 'css.escape';\nimport styles from './TargetLabels.module.css';\n\nvar formatLabels = function formatLabels(labels) {\n  return Object.keys(labels).map(function (key) {\n    return \"\".concat(key, \"=\\\"\").concat(labels[key], \"\\\"\");\n  });\n};\n\nvar TargetLabels = function TargetLabels(_ref) {\n  var discoveredLabels = _ref.discoveredLabels,\n      labels = _ref.labels,\n      idx = _ref.idx,\n      scrapePool = _ref.scrapePool;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      tooltipOpen = _useState2[0],\n      setTooltipOpen = _useState2[1];\n\n  var toggle = function toggle() {\n    return setTooltipOpen(!tooltipOpen);\n  };\n\n  var id = \"series-labels-\".concat(scrapePool, \"-\").concat(idx);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    id: id,\n    className: \"series-labels-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, Object.keys(labels).map(function (labelName) {\n    return /*#__PURE__*/React.createElement(Badge, {\n      color: \"primary\",\n      className: \"mr-1\",\n      key: labelName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, \"\".concat(labelName, \"=\\\"\").concat(labels[labelName], \"\\\"\"));\n  })), /*#__PURE__*/React.createElement(Tooltip, {\n    isOpen: tooltipOpen,\n    target: CSS.escape(id),\n    toggle: toggle,\n    style: {\n      maxWidth: 'none',\n      textAlign: 'left'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"Before relabeling:\"), formatLabels(discoveredLabels).map(function (s, idx) {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: idx,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: styles.discovered,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, s));\n  })));\n};\n\nexport default TargetLabels;","map":{"version":3,"sources":["/app/src/pages/targets/TargetLabels.tsx"],"names":["React","Fragment","useState","Badge","Tooltip","styles","formatLabels","labels","Object","keys","map","key","TargetLabels","discoveredLabels","idx","scrapePool","tooltipOpen","setTooltipOpen","toggle","id","labelName","CSS","escape","maxWidth","textAlign","s","discovered"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAoBC,QAApB,EAA8BC,QAA9B,QAA8C,OAA9C;AACA,SAASC,KAAT,EAAgBC,OAAhB,QAA+B,YAA/B;AACA,OAAO,YAAP;AACA,OAAOC,MAAP,MAAmB,2BAAnB;;AAaA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD;AAAA,SAA8BC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,GAApB,CAAwB,UAAAC,GAAG;AAAA,qBAAOA,GAAP,gBAAeJ,MAAM,CAACI,GAAD,CAArB;AAAA,GAA3B,CAA9B;AAAA,CAArB;;AAEA,IAAMC,YAAmC,GAAG,SAAtCA,YAAsC,OAAmD;AAAA,MAAhDC,gBAAgD,QAAhDA,gBAAgD;AAAA,MAA9BN,MAA8B,QAA9BA,MAA8B;AAAA,MAAtBO,GAAsB,QAAtBA,GAAsB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAAA,kBACvDb,QAAQ,CAAC,KAAD,CAD+C;AAAA;AAAA,MACtFc,WADsF;AAAA,MACzEC,cADyE;;AAG7F,MAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,WAAYD,cAAc,CAAC,CAACD,WAAF,CAA1B;AAAA,GAAf;;AACA,MAAMG,EAAE,2BAAoBJ,UAApB,cAAkCD,GAAlC,CAAR;AAEA,sBACE,uDACE;AAAK,IAAA,EAAE,EAAEK,EAAT;AAAa,IAAA,SAAS,EAAC,yBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,GAApB,CAAwB,UAAAU,SAAS,EAAI;AACpC,wBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAC,SAAb;AAAuB,MAAA,SAAS,EAAC,MAAjC;AAAwC,MAAA,GAAG,EAAEA,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACMA,SADN,gBACoBb,MAAM,CAACa,SAAD,CAD1B,QADF;AAKD,GANA,CADH,CADF,eAUE,oBAAC,OAAD;AAAS,IAAA,MAAM,EAAEJ,WAAjB;AAA8B,IAAA,MAAM,EAAEK,GAAG,CAACC,MAAJ,CAAWH,EAAX,CAAtC;AAAsD,IAAA,MAAM,EAAED,MAA9D;AAAsE,IAAA,KAAK,EAAE;AAAEK,MAAAA,QAAQ,EAAE,MAAZ;AAAoBC,MAAAA,SAAS,EAAE;AAA/B,KAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEGlB,YAAY,CAACO,gBAAD,CAAZ,CAA+BH,GAA/B,CAAmC,UAACe,CAAD,EAAYX,GAAZ;AAAA,wBAClC,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAM,MAAA,SAAS,EAAET,MAAM,CAACqB,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqCD,CAArC,CAFF,CADkC;AAAA,GAAnC,CAFH,CAVF,CADF;AAsBD,CA5BD;;AA8BA,eAAeb,YAAf","sourcesContent":["import React, { FC, Fragment, useState } from 'react';\nimport { Badge, Tooltip } from 'reactstrap';\nimport 'css.escape';\nimport styles from './TargetLabels.module.css';\n\ninterface Labels {\n  [key: string]: string;\n}\n\nexport interface TargetLabelsProps {\n  discoveredLabels: Labels;\n  labels: Labels;\n  idx: number;\n  scrapePool: string;\n}\n\nconst formatLabels = (labels: Labels): string[] => Object.keys(labels).map(key => `${key}=\"${labels[key]}\"`);\n\nconst TargetLabels: FC<TargetLabelsProps> = ({ discoveredLabels, labels, idx, scrapePool }) => {\n  const [tooltipOpen, setTooltipOpen] = useState(false);\n\n  const toggle = (): void => setTooltipOpen(!tooltipOpen);\n  const id = `series-labels-${scrapePool}-${idx}`;\n\n  return (\n    <>\n      <div id={id} className=\"series-labels-container\">\n        {Object.keys(labels).map(labelName => {\n          return (\n            <Badge color=\"primary\" className=\"mr-1\" key={labelName}>\n              {`${labelName}=\"${labels[labelName]}\"`}\n            </Badge>\n          );\n        })}\n      </div>\n      <Tooltip isOpen={tooltipOpen} target={CSS.escape(id)} toggle={toggle} style={{ maxWidth: 'none', textAlign: 'left' }}>\n        <b>Before relabeling:</b>\n        {formatLabels(discoveredLabels).map((s: string, idx: number) => (\n          <Fragment key={idx}>\n            <br />\n            <span className={styles.discovered}>{s}</span>\n          </Fragment>\n        ))}\n      </Tooltip>\n    </>\n  );\n};\n\nexport default TargetLabels;\n"]},"metadata":{},"sourceType":"module"}