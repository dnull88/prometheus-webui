{"ast":null,"code":"import _toConsumableArray from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/app/src/pages/graph/ExpressionInput.tsx\";\nimport React, { Component } from 'react';\nimport { Button, InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\nimport Downshift from 'downshift';\nimport fuzzy from 'fuzzy';\nimport sanitizeHTML from 'sanitize-html';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faSpinner } from '@fortawesome/free-solid-svg-icons';\n\nvar ExpressionInput = /*#__PURE__*/function (_Component) {\n  _inherits(ExpressionInput, _Component);\n\n  var _super = _createSuper(ExpressionInput);\n\n  function ExpressionInput(props) {\n    var _this;\n\n    _classCallCheck(this, ExpressionInput);\n\n    _this = _super.call(this, props);\n    _this.exprInputRef = React.createRef();\n\n    _this.setHeight = function () {\n      var _ref = _this.exprInputRef.current,\n          offsetHeight = _ref.offsetHeight,\n          clientHeight = _ref.clientHeight,\n          scrollHeight = _ref.scrollHeight;\n      var offset = offsetHeight - clientHeight; // Needed in order for the height to be more accurate.\n\n      _this.setState({\n        height: scrollHeight + offset\n      });\n    };\n\n    _this.handleInput = function () {\n      _this.setValue(_this.exprInputRef.current.value);\n    };\n\n    _this.setValue = function (value) {\n      var onExpressionChange = _this.props.onExpressionChange;\n      onExpressionChange(value);\n\n      _this.setState({\n        height: 'auto'\n      }, _this.setHeight);\n    };\n\n    _this.handleKeyPress = function (event) {\n      var executeQuery = _this.props.executeQuery;\n\n      if (event.key === 'Enter' && !event.shiftKey) {\n        executeQuery();\n        event.preventDefault();\n      }\n    };\n\n    _this.getSearchMatches = function (input, expressions) {\n      return fuzzy.filter(input.replace(/ /g, ''), expressions, {\n        pre: '<strong>',\n        post: '</strong>'\n      });\n    };\n\n    _this.createAutocompleteSection = function (downshift) {\n      var _downshift$inputValue = downshift.inputValue,\n          inputValue = _downshift$inputValue === void 0 ? '' : _downshift$inputValue,\n          closeMenu = downshift.closeMenu,\n          highlightedIndex = downshift.highlightedIndex;\n      var autocompleteSections = _this.props.autocompleteSections;\n      var index = 0;\n      var sections = inputValue.length && _this.props.enableAutocomplete ? Object.entries(autocompleteSections).reduce(function (acc, _ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n            title = _ref3[0],\n            items = _ref3[1];\n\n        var matches = _this.getSearchMatches(inputValue, items);\n\n        return !matches.length ? acc : [].concat(_toConsumableArray(acc), [/*#__PURE__*/React.createElement(\"ul\", {\n          className: \"autosuggest-dropdown-list\",\n          key: title,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(\"li\", {\n          className: \"autosuggest-dropdown-header\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }\n        }, title), matches.slice(0, 100) // Limit DOM rendering to 100 results, as DOM rendering is sloooow.\n        .map(function (_ref4) {\n          var original = _ref4.original,\n              text = _ref4.string;\n          var itemProps = downshift.getItemProps({\n            key: original,\n            index,\n            item: original,\n            style: {\n              backgroundColor: highlightedIndex === index++ ? 'lightgray' : 'white'\n            }\n          });\n          return /*#__PURE__*/React.createElement(\"li\", Object.assign({\n            key: title\n          }, itemProps, {\n            dangerouslySetInnerHTML: {\n              __html: sanitizeHTML(text, {\n                allowedTags: ['strong']\n              })\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 27\n            }\n          }));\n        }))]);\n      }, []) : [];\n\n      if (!sections.length) {\n        // This is ugly but is needed in order to sync state updates.\n        // This way we force downshift to wait React render call to complete before closeMenu to be triggered.\n        setTimeout(closeMenu);\n        return null;\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, downshift.getMenuProps(), {\n        className: \"autosuggest-dropdown\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 7\n        }\n      }), sections);\n    };\n\n    _this.state = {\n      height: 'auto'\n    };\n    return _this;\n  }\n\n  _createClass(ExpressionInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setHeight();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var value = this.props.value;\n\n      if (value !== prevProps.value) {\n        this.setValue(value);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          executeQuery = _this$props.executeQuery,\n          value = _this$props.value;\n      var height = this.state.height;\n      return /*#__PURE__*/React.createElement(Downshift, {\n        onSelect: this.setValue,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 7\n        }\n      }, function (downshift) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(InputGroup, {\n          className: \"expression-input\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(InputGroupAddon, {\n          addonType: \"prepend\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(InputGroupText, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 17\n          }\n        }, _this2.props.loading ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faSpinner,\n          spin: true,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 41\n          }\n        }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faSearch,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 85\n          }\n        }))), /*#__PURE__*/React.createElement(Input, Object.assign({\n          onInput: _this2.handleInput,\n          style: {\n            height\n          },\n          autoFocus: true,\n          type: \"textarea\",\n          rows: \"1\",\n          onKeyPress: _this2.handleKeyPress,\n          placeholder: \"Expression (press Shift+Enter for newlines)\",\n          innerRef: _this2.exprInputRef\n        }, downshift.getInputProps({\n          onKeyDown: function onKeyDown(event) {\n            switch (event.key) {\n              case 'Home':\n              case 'End':\n                // We want to be able to jump to the beginning/end of the input field.\n                // By default, Downshift otherwise jumps to the first/last suggestion item instead.\n                event.nativeEvent.preventDownshiftDefault = true;\n                break;\n\n              case 'ArrowUp':\n              case 'ArrowDown':\n                if (!downshift.isOpen) {\n                  event.nativeEvent.preventDownshiftDefault = true;\n                }\n\n                break;\n\n              case 'Enter':\n                downshift.closeMenu();\n                break;\n\n              case 'Escape':\n                if (!downshift.isOpen) {\n                  _this2.exprInputRef.current.blur();\n                }\n\n                break;\n\n              default:\n            }\n          }\n        }), {\n          value: value,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }\n        })), /*#__PURE__*/React.createElement(InputGroupAddon, {\n          addonType: \"append\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          className: \"execute-btn\",\n          color: \"primary\",\n          onClick: executeQuery,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 17\n          }\n        }, \"Execute\"))), downshift.isOpen && _this2.createAutocompleteSection(downshift));\n      });\n    }\n  }]);\n\n  return ExpressionInput;\n}(Component);\n\nexport default ExpressionInput;","map":{"version":3,"sources":["/app/src/pages/graph/ExpressionInput.tsx"],"names":["React","Component","Button","InputGroup","InputGroupAddon","InputGroupText","Input","Downshift","fuzzy","sanitizeHTML","FontAwesomeIcon","faSearch","faSpinner","ExpressionInput","props","exprInputRef","createRef","setHeight","current","offsetHeight","clientHeight","scrollHeight","offset","setState","height","handleInput","setValue","value","onExpressionChange","handleKeyPress","event","executeQuery","key","shiftKey","preventDefault","getSearchMatches","input","expressions","filter","replace","pre","post","createAutocompleteSection","downshift","inputValue","closeMenu","highlightedIndex","autocompleteSections","index","sections","length","enableAutocomplete","Object","entries","reduce","acc","title","items","matches","slice","map","original","text","string","itemProps","getItemProps","item","style","backgroundColor","__html","allowedTags","setTimeout","getMenuProps","state","prevProps","loading","getInputProps","onKeyDown","nativeEvent","preventDownshiftDefault","isOpen","blur"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,eAA7B,EAA8CC,cAA9C,EAA8DC,KAA9D,QAA2E,YAA3E;AAEA,OAAOC,SAAP,MAAqD,WAArD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,mCAApC;;IAeMC,e;;;;;AAGJ,2BAAYC,KAAZ,EAAyC;AAAA;;AAAA;;AACvC,8BAAMA,KAAN;AADuC,UAFjCC,YAEiC,GAFlBf,KAAK,CAACgB,SAAN,EAEkB;;AAAA,UAWzCC,SAXyC,GAW7B,YAAM;AAAA,iBACqC,MAAKF,YAAL,CAAkBG,OADvD;AAAA,UACRC,YADQ,QACRA,YADQ;AAAA,UACMC,YADN,QACMA,YADN;AAAA,UACoBC,YADpB,QACoBA,YADpB;AAEhB,UAAMC,MAAM,GAAGH,YAAY,GAAGC,YAA9B,CAFgB,CAE4B;;AAC5C,YAAKG,QAAL,CAAc;AAAEC,QAAAA,MAAM,EAAEH,YAAY,GAAGC;AAAzB,OAAd;AACD,KAfwC;;AAAA,UAiBzCG,WAjByC,GAiB3B,YAAM;AAClB,YAAKC,QAAL,CAAc,MAAKX,YAAL,CAAkBG,OAAlB,CAA2BS,KAAzC;AACD,KAnBwC;;AAAA,UAqBzCD,QArByC,GAqB9B,UAACC,KAAD,EAAmB;AAAA,UACpBC,kBADoB,GACG,MAAKd,KADR,CACpBc,kBADoB;AAE5BA,MAAAA,kBAAkB,CAACD,KAAD,CAAlB;;AACA,YAAKJ,QAAL,CAAc;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAd,EAAkC,MAAKP,SAAvC;AACD,KAzBwC;;AAAA,UAkCzCY,cAlCyC,GAkCxB,UAACC,KAAD,EAAkD;AAAA,UACzDC,YADyD,GACxC,MAAKjB,KADmC,CACzDiB,YADyD;;AAEjE,UAAID,KAAK,CAACE,GAAN,KAAc,OAAd,IAAyB,CAACF,KAAK,CAACG,QAApC,EAA8C;AAC5CF,QAAAA,YAAY;AACZD,QAAAA,KAAK,CAACI,cAAN;AACD;AACF,KAxCwC;;AAAA,UA0CzCC,gBA1CyC,GA0CtB,UAACC,KAAD,EAAgBC,WAAhB,EAA0C;AAC3D,aAAO7B,KAAK,CAAC8B,MAAN,CAAaF,KAAK,CAACG,OAAN,CAAc,IAAd,EAAoB,EAApB,CAAb,EAAsCF,WAAtC,EAAmD;AACxDG,QAAAA,GAAG,EAAE,UADmD;AAExDC,QAAAA,IAAI,EAAE;AAFkD,OAAnD,CAAP;AAID,KA/CwC;;AAAA,UAiDzCC,yBAjDyC,GAiDb,UAACC,SAAD,EAA+C;AAAA,kCAChBA,SADgB,CACjEC,UADiE;AAAA,UACjEA,UADiE,sCACpD,EADoD;AAAA,UAChDC,SADgD,GAChBF,SADgB,CAChDE,SADgD;AAAA,UACrCC,gBADqC,GAChBH,SADgB,CACrCG,gBADqC;AAAA,UAEjEC,oBAFiE,GAExC,MAAKjC,KAFmC,CAEjEiC,oBAFiE;AAGzE,UAAIC,KAAK,GAAG,CAAZ;AACA,UAAMC,QAAQ,GACZL,UAAU,CAAEM,MAAZ,IAAsB,MAAKpC,KAAL,CAAWqC,kBAAjC,GACIC,MAAM,CAACC,OAAP,CAAeN,oBAAf,EAAqCO,MAArC,CAA4C,UAACC,GAAD,SAAyB;AAAA;AAAA,YAAlBC,KAAkB;AAAA,YAAXC,KAAW;;AACnE,YAAMC,OAAO,GAAG,MAAKvB,gBAAL,CAAsBS,UAAtB,EAAmCa,KAAnC,CAAhB;;AACA,eAAO,CAACC,OAAO,CAACR,MAAT,GACHK,GADG,gCAGEA,GAHF,iBAID;AAAI,UAAA,SAAS,EAAC,2BAAd;AAA0C,UAAA,GAAG,EAAEC,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAI,UAAA,SAAS,EAAC,6BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA6CA,KAA7C,CADF,EAEGE,OAAO,CACLC,KADF,CACQ,CADR,EACW,GADX,EACgB;AADhB,SAEEC,GAFF,CAEM,iBAAgC;AAAA,cAA7BC,QAA6B,SAA7BA,QAA6B;AAAA,cAAXC,IAAW,SAAnBC,MAAmB;AACnC,cAAMC,SAAS,GAAGrB,SAAS,CAACsB,YAAV,CAAuB;AACvCjC,YAAAA,GAAG,EAAE6B,QADkC;AAEvCb,YAAAA,KAFuC;AAGvCkB,YAAAA,IAAI,EAAEL,QAHiC;AAIvCM,YAAAA,KAAK,EAAE;AACLC,cAAAA,eAAe,EAAEtB,gBAAgB,KAAKE,KAAK,EAA1B,GAA+B,WAA/B,GAA6C;AADzD;AAJgC,WAAvB,CAAlB;AAQA,8BACE;AACE,YAAA,GAAG,EAAEQ;AADP,aAEMQ,SAFN;AAGE,YAAA,uBAAuB,EAAE;AAAEK,cAAAA,MAAM,EAAE5D,YAAY,CAACqD,IAAD,EAAO;AAAEQ,gBAAAA,WAAW,EAAE,CAAC,QAAD;AAAf,eAAP;AAAtB,aAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF;AAOD,SAlBF,CAFH,CAJC,EAAP;AA2BD,OA7BD,EA6BG,EA7BH,CADJ,GA+BI,EAhCN;;AAkCA,UAAI,CAACrB,QAAQ,CAACC,MAAd,EAAsB;AACpB;AACA;AACAqB,QAAAA,UAAU,CAAC1B,SAAD,CAAV;AACA,eAAO,IAAP;AACD;;AAED,0BACE,6CAASF,SAAS,CAAC6B,YAAV,EAAT;AAAmC,QAAA,SAAS,EAAC,sBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACGvB,QADH,CADF;AAKD,KAnGwC;;AAEvC,UAAKwB,KAAL,GAAa;AACXjD,MAAAA,MAAM,EAAE;AADG,KAAb;AAFuC;AAKxC;;;;wCAEmB;AAClB,WAAKP,SAAL;AACD;;;uCAkBkByD,S,EAAiC;AAAA,UAC1C/C,KAD0C,GAChC,KAAKb,KAD2B,CAC1Ca,KAD0C;;AAElD,UAAIA,KAAK,KAAK+C,SAAS,CAAC/C,KAAxB,EAA+B;AAC7B,aAAKD,QAAL,CAAcC,KAAd;AACD;AACF;;;6BAqEQ;AAAA;;AAAA,wBACyB,KAAKb,KAD9B;AAAA,UACCiB,YADD,eACCA,YADD;AAAA,UACeJ,KADf,eACeA,KADf;AAAA,UAECH,MAFD,GAEY,KAAKiD,KAFjB,CAECjD,MAFD;AAGP,0BACE,oBAAC,SAAD;AAAW,QAAA,QAAQ,EAAE,KAAKE,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,UAAAiB,SAAS;AAAA,4BACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,UAAD;AAAY,UAAA,SAAS,EAAC,kBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,eAAD;AAAiB,UAAA,SAAS,EAAC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,MAAI,CAAC7B,KAAL,CAAW6D,OAAX,gBAAqB,oBAAC,eAAD;AAAiB,UAAA,IAAI,EAAE/D,SAAvB;AAAkC,UAAA,IAAI,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAArB,gBAAiE,oBAAC,eAAD;AAAiB,UAAA,IAAI,EAAED,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADpE,CADF,CADF,eAME,oBAAC,KAAD;AACE,UAAA,OAAO,EAAE,MAAI,CAACc,WADhB;AAEE,UAAA,KAAK,EAAE;AAAED,YAAAA;AAAF,WAFT;AAGE,UAAA,SAAS,MAHX;AAIE,UAAA,IAAI,EAAC,UAJP;AAKE,UAAA,IAAI,EAAC,GALP;AAME,UAAA,UAAU,EAAE,MAAI,CAACK,cANnB;AAOE,UAAA,WAAW,EAAC,6CAPd;AAQE,UAAA,QAAQ,EAAE,MAAI,CAACd;AARjB,WASM4B,SAAS,CAACiC,aAAV,CAAwB;AAC1BC,UAAAA,SAAS,EAAE,mBAAC/C,KAAD,EAAsC;AAC/C,oBAAQA,KAAK,CAACE,GAAd;AACE,mBAAK,MAAL;AACA,mBAAK,KAAL;AACE;AACA;AACCF,gBAAAA,KAAK,CAACgD,WAAP,CAA2BC,uBAA3B,GAAqD,IAArD;AACA;;AACF,mBAAK,SAAL;AACA,mBAAK,WAAL;AACE,oBAAI,CAACpC,SAAS,CAACqC,MAAf,EAAuB;AACpBlD,kBAAAA,KAAK,CAACgD,WAAP,CAA2BC,uBAA3B,GAAqD,IAArD;AACD;;AACD;;AACF,mBAAK,OAAL;AACEpC,gBAAAA,SAAS,CAACE,SAAV;AACA;;AACF,mBAAK,QAAL;AACE,oBAAI,CAACF,SAAS,CAACqC,MAAf,EAAuB;AACrB,kBAAA,MAAI,CAACjE,YAAL,CAAkBG,OAAlB,CAA2B+D,IAA3B;AACD;;AACD;;AACF;AArBF;AAuBD;AAzByB,SAAxB,CATN;AAoCE,UAAA,KAAK,EAAEtD,KApCT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WANF,eA4CE,oBAAC,eAAD;AAAiB,UAAA,SAAS,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,MAAD;AAAQ,UAAA,SAAS,EAAC,aAAlB;AAAgC,UAAA,KAAK,EAAC,SAAtC;AAAgD,UAAA,OAAO,EAAEI,YAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,CA5CF,CADF,EAmDGY,SAAS,CAACqC,MAAV,IAAoB,MAAI,CAACtC,yBAAL,CAA+BC,SAA/B,CAnDvB,CADQ;AAAA,OADZ,CADF;AA2DD;;;;EAtK2B1C,S;;AAyK9B,eAAeY,eAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Button, InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\n\nimport Downshift, { ControllerStateAndHelpers } from 'downshift';\nimport fuzzy from 'fuzzy';\nimport sanitizeHTML from 'sanitize-html';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faSpinner } from '@fortawesome/free-solid-svg-icons';\n\ninterface ExpressionInputProps {\n  value: string;\n  onExpressionChange: (expr: string) => void;\n  autocompleteSections: { [key: string]: string[] };\n  executeQuery: () => void;\n  loading: boolean;\n  enableAutocomplete: boolean;\n}\n\ninterface ExpressionInputState {\n  height: number | string;\n}\n\nclass ExpressionInput extends Component<ExpressionInputProps, ExpressionInputState> {\n  private exprInputRef = React.createRef<HTMLInputElement>();\n\n  constructor(props: ExpressionInputProps) {\n    super(props);\n    this.state = {\n      height: 'auto',\n    };\n  }\n\n  componentDidMount() {\n    this.setHeight();\n  }\n\n  setHeight = () => {\n    const { offsetHeight, clientHeight, scrollHeight } = this.exprInputRef.current!;\n    const offset = offsetHeight - clientHeight; // Needed in order for the height to be more accurate.\n    this.setState({ height: scrollHeight + offset });\n  };\n\n  handleInput = () => {\n    this.setValue(this.exprInputRef.current!.value);\n  };\n\n  setValue = (value: string) => {\n    const { onExpressionChange } = this.props;\n    onExpressionChange(value);\n    this.setState({ height: 'auto' }, this.setHeight);\n  };\n\n  componentDidUpdate(prevProps: ExpressionInputProps) {\n    const { value } = this.props;\n    if (value !== prevProps.value) {\n      this.setValue(value);\n    }\n  }\n\n  handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const { executeQuery } = this.props;\n    if (event.key === 'Enter' && !event.shiftKey) {\n      executeQuery();\n      event.preventDefault();\n    }\n  };\n\n  getSearchMatches = (input: string, expressions: string[]) => {\n    return fuzzy.filter(input.replace(/ /g, ''), expressions, {\n      pre: '<strong>',\n      post: '</strong>',\n    });\n  };\n\n  createAutocompleteSection = (downshift: ControllerStateAndHelpers<any>) => {\n    const { inputValue = '', closeMenu, highlightedIndex } = downshift;\n    const { autocompleteSections } = this.props;\n    let index = 0;\n    const sections =\n      inputValue!.length && this.props.enableAutocomplete\n        ? Object.entries(autocompleteSections).reduce((acc, [title, items]) => {\n            const matches = this.getSearchMatches(inputValue!, items);\n            return !matches.length\n              ? acc\n              : [\n                  ...acc,\n                  <ul className=\"autosuggest-dropdown-list\" key={title}>\n                    <li className=\"autosuggest-dropdown-header\">{title}</li>\n                    {matches\n                      .slice(0, 100) // Limit DOM rendering to 100 results, as DOM rendering is sloooow.\n                      .map(({ original, string: text }) => {\n                        const itemProps = downshift.getItemProps({\n                          key: original,\n                          index,\n                          item: original,\n                          style: {\n                            backgroundColor: highlightedIndex === index++ ? 'lightgray' : 'white',\n                          },\n                        });\n                        return (\n                          <li\n                            key={title}\n                            {...itemProps}\n                            dangerouslySetInnerHTML={{ __html: sanitizeHTML(text, { allowedTags: ['strong'] }) }}\n                          />\n                        );\n                      })}\n                  </ul>,\n                ];\n          }, [] as JSX.Element[])\n        : [];\n\n    if (!sections.length) {\n      // This is ugly but is needed in order to sync state updates.\n      // This way we force downshift to wait React render call to complete before closeMenu to be triggered.\n      setTimeout(closeMenu);\n      return null;\n    }\n\n    return (\n      <div {...downshift.getMenuProps()} className=\"autosuggest-dropdown\">\n        {sections}\n      </div>\n    );\n  };\n\n  render() {\n    const { executeQuery, value } = this.props;\n    const { height } = this.state;\n    return (\n      <Downshift onSelect={this.setValue}>\n        {downshift => (\n          <div>\n            <InputGroup className=\"expression-input\">\n              <InputGroupAddon addonType=\"prepend\">\n                <InputGroupText>\n                  {this.props.loading ? <FontAwesomeIcon icon={faSpinner} spin /> : <FontAwesomeIcon icon={faSearch} />}\n                </InputGroupText>\n              </InputGroupAddon>\n              <Input\n                onInput={this.handleInput}\n                style={{ height }}\n                autoFocus\n                type=\"textarea\"\n                rows=\"1\"\n                onKeyPress={this.handleKeyPress}\n                placeholder=\"Expression (press Shift+Enter for newlines)\"\n                innerRef={this.exprInputRef}\n                {...downshift.getInputProps({\n                  onKeyDown: (event: React.KeyboardEvent): void => {\n                    switch (event.key) {\n                      case 'Home':\n                      case 'End':\n                        // We want to be able to jump to the beginning/end of the input field.\n                        // By default, Downshift otherwise jumps to the first/last suggestion item instead.\n                        (event.nativeEvent as any).preventDownshiftDefault = true;\n                        break;\n                      case 'ArrowUp':\n                      case 'ArrowDown':\n                        if (!downshift.isOpen) {\n                          (event.nativeEvent as any).preventDownshiftDefault = true;\n                        }\n                        break;\n                      case 'Enter':\n                        downshift.closeMenu();\n                        break;\n                      case 'Escape':\n                        if (!downshift.isOpen) {\n                          this.exprInputRef.current!.blur();\n                        }\n                        break;\n                      default:\n                    }\n                  },\n                } as any)}\n                value={value}\n              />\n              <InputGroupAddon addonType=\"append\">\n                <Button className=\"execute-btn\" color=\"primary\" onClick={executeQuery}>\n                  Execute\n                </Button>\n              </InputGroupAddon>\n            </InputGroup>\n            {downshift.isOpen && this.createAutocompleteSection(downshift)}\n          </div>\n        )}\n      </Downshift>\n    );\n  }\n}\n\nexport default ExpressionInput;\n"]},"metadata":{},"sourceType":"module"}