{"ast":null,"code":"import _slicedToArray from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/app/src/pages/targets/EndpointLink.tsx\";\n\nimport React from 'react';\nimport { Badge, Alert } from 'reactstrap';\n\nvar EndpointLink = function EndpointLink(_ref) {\n  var endpoint = _ref.endpoint,\n      globalUrl = _ref.globalUrl;\n  var url;\n\n  try {\n    url = new URL(endpoint);\n  } catch (e) {\n    return /*#__PURE__*/React.createElement(Alert, {\n      color: \"danger\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }\n    }, \"Error:\"), \" \", e.message);\n  }\n\n  var _url = url,\n      host = _url.host,\n      pathname = _url.pathname,\n      protocol = _url.protocol,\n      searchParams = _url.searchParams;\n  var params = Array.from(searchParams.entries());\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"a\", {\n    href: globalUrl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, \"\".concat(protocol, \"//\").concat(host).concat(pathname)), params.length > 0 ? /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 28\n    }\n  }) : null, params.map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        labelName = _ref3[0],\n        labelValue = _ref3[1];\n\n    return /*#__PURE__*/React.createElement(Badge, {\n      color: \"primary\",\n      className: \"mr-1 \".concat(labelName),\n      key: labelName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    }, \"\".concat(labelName, \"=\\\"\").concat(labelValue, \"\\\"\"));\n  }));\n};\n\nexport default EndpointLink;","map":{"version":3,"sources":["/app/src/pages/targets/EndpointLink.tsx"],"names":["React","Badge","Alert","EndpointLink","endpoint","globalUrl","url","URL","e","message","host","pathname","protocol","searchParams","params","Array","from","entries","length","map","labelName","labelValue"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,YAA7B;;AAOA,IAAMC,YAAmC,GAAG,SAAtCA,YAAsC,OAA6B;AAAA,MAA1BC,QAA0B,QAA1BA,QAA0B;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;AACvE,MAAIC,GAAJ;;AACA,MAAI;AACFA,IAAAA,GAAG,GAAG,IAAIC,GAAJ,CAAQH,QAAR,CAAN;AACD,GAFD,CAEE,OAAOI,CAAP,EAAU;AACV,wBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,OAC2BA,CAAC,CAACC,OAD7B,CADF;AAKD;;AAVsE,aAYfH,GAZe;AAAA,MAY/DI,IAZ+D,QAY/DA,IAZ+D;AAAA,MAYzDC,QAZyD,QAYzDA,QAZyD;AAAA,MAY/CC,QAZ+C,QAY/CA,QAZ+C;AAAA,MAYrCC,YAZqC,QAYrCA,YAZqC;AAavE,MAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWH,YAAY,CAACI,OAAb,EAAX,CAAf;AAEA,sBACE,uDACE;AAAG,IAAA,IAAI,EAAEZ,SAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAwBO,QAAxB,eAAqCF,IAArC,SAA4CC,QAA5C,EADF,EAEGG,MAAM,CAACI,MAAP,GAAgB,CAAhB,gBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAApB,GAA6B,IAFhC,EAGGJ,MAAM,CAACK,GAAP,CAAW,iBAA+C;AAAA;AAAA,QAA7CC,SAA6C;AAAA,QAAlCC,UAAkC;;AACzD,wBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAC,SAAb;AAAuB,MAAA,SAAS,iBAAUD,SAAV,CAAhC;AAAuD,MAAA,GAAG,EAAEA,SAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACMA,SADN,gBACoBC,UADpB,QADF;AAKD,GANA,CAHH,CADF;AAaD,CA5BD;;AA8BA,eAAelB,YAAf","sourcesContent":["import React, { FC } from 'react';\nimport { Badge, Alert } from 'reactstrap';\n\nexport interface EndpointLinkProps {\n  endpoint: string;\n  globalUrl: string;\n}\n\nconst EndpointLink: FC<EndpointLinkProps> = ({ endpoint, globalUrl }) => {\n  let url: URL;\n  try {\n    url = new URL(endpoint);\n  } catch (e) {\n    return (\n      <Alert color=\"danger\">\n        <strong>Error:</strong> {e.message}\n      </Alert>\n    );\n  }\n\n  const { host, pathname, protocol, searchParams }: URL = url;\n  const params = Array.from(searchParams.entries());\n\n  return (\n    <>\n      <a href={globalUrl}>{`${protocol}//${host}${pathname}`}</a>\n      {params.length > 0 ? <br /> : null}\n      {params.map(([labelName, labelValue]: [string, string]) => {\n        return (\n          <Badge color=\"primary\" className={`mr-1 ${labelName}`} key={labelName}>\n            {`${labelName}=\"${labelValue}\"`}\n          </Badge>\n        );\n      })}\n    </>\n  );\n};\n\nexport default EndpointLink;\n"]},"metadata":{},"sourceType":"module"}