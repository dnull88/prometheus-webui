{"ast":null,"code":"import _objectSpread from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/app/src/pages/graph/PanelList.tsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Alert, Button } from 'reactstrap';\nimport Panel, { PanelDefaultOptions } from './Panel';\nimport Checkbox from '../../components/Checkbox';\nimport { generateID, decodePanelOptionsFromQueryString, encodePanelOptionsToQueryString, callAll } from '../../utils';\nimport { useFetch } from '../../hooks/useFetch';\nimport { useLocalStorage } from '../../hooks/useLocalStorage';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\nexport var updateURL = function updateURL(nextPanels) {\n  var query = encodePanelOptionsToQueryString(nextPanels);\n  window.history.pushState({}, '', query);\n};\nexport var PanelListContent = function PanelListContent(_ref) {\n  var _ref$metrics = _ref.metrics,\n      metrics = _ref$metrics === void 0 ? [] : _ref$metrics,\n      useLocalTime = _ref.useLocalTime,\n      queryHistoryEnabled = _ref.queryHistoryEnabled,\n      enableAutocomplete = _ref.enableAutocomplete,\n      rest = _objectWithoutProperties(_ref, [\"metrics\", \"useLocalTime\", \"queryHistoryEnabled\", \"enableAutocomplete\"]);\n\n  var _useState = useState(rest.panels),\n      _useState2 = _slicedToArray(_useState, 2),\n      panels = _useState2[0],\n      setPanels = _useState2[1];\n\n  var _useLocalStorage = useLocalStorage('history', []),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      historyItems = _useLocalStorage2[0],\n      setLocalStorageHistoryItems = _useLocalStorage2[1];\n\n  useEffect(function () {\n    !panels.length && addPanel();\n\n    window.onpopstate = function () {\n      var panels = decodePanelOptionsFromQueryString(window.location.search);\n\n      if (panels.length > 0) {\n        setPanels(panels);\n      }\n    }; // We want useEffect to act only as componentDidMount, but react still complains about the empty dependencies list.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n\n  var handleExecuteQuery = function handleExecuteQuery(query) {\n    var isSimpleMetric = metrics.indexOf(query) !== -1;\n\n    if (isSimpleMetric || !query.length) {\n      return;\n    }\n\n    var extendedItems = historyItems.reduce(function (acc, metric) {\n      return metric === query ? acc : [].concat(_toConsumableArray(acc), [metric]); // Prevent adding query twice.\n    }, [query]);\n    setLocalStorageHistoryItems(extendedItems.slice(0, 50));\n  };\n\n  var addPanel = function addPanel() {\n    callAll(setPanels, updateURL)([].concat(_toConsumableArray(panels), [{\n      id: generateID(),\n      key: \"\".concat(panels.length),\n      options: PanelDefaultOptions\n    }]));\n  };\n\n  var pathPrefix = usePathPrefix();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, panels.map(function (_ref2) {\n    var id = _ref2.id,\n        options = _ref2.options;\n    return /*#__PURE__*/React.createElement(Panel, {\n      pathPrefix: pathPrefix,\n      onExecuteQuery: handleExecuteQuery,\n      key: id,\n      options: options,\n      onOptionsChanged: function onOptionsChanged(opts) {\n        return callAll(setPanels, updateURL)(panels.map(function (p) {\n          return id === p.id ? _objectSpread(_objectSpread({}, p), {}, {\n            options: opts\n          }) : p;\n        }));\n      },\n      removePanel: function removePanel() {\n        return callAll(setPanels, updateURL)(panels.reduce(function (acc, panel) {\n          return panel.id !== id ? [].concat(_toConsumableArray(acc), [_objectSpread(_objectSpread({}, panel), {}, {\n            key: \"\".concat(acc.length)\n          })]) : acc;\n        }, []));\n      },\n      useLocalTime: useLocalTime,\n      metricNames: metrics,\n      pastQueries: queryHistoryEnabled ? historyItems : [],\n      enableAutocomplete: enableAutocomplete,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    });\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"d-block mb-3\",\n    color: \"primary\",\n    onClick: addPanel,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, \"Add Panel\"));\n};\n\nvar PanelList = function PanelList() {\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      delta = _useState4[0],\n      setDelta = _useState4[1];\n\n  var _useLocalStorage3 = useLocalStorage('use-local-time', false),\n      _useLocalStorage4 = _slicedToArray(_useLocalStorage3, 2),\n      useLocalTime = _useLocalStorage4[0],\n      setUseLocalTime = _useLocalStorage4[1];\n\n  var _useLocalStorage5 = useLocalStorage('enable-query-history', false),\n      _useLocalStorage6 = _slicedToArray(_useLocalStorage5, 2),\n      enableQueryHistory = _useLocalStorage6[0],\n      setEnableQueryHistory = _useLocalStorage6[1];\n\n  var _useLocalStorage7 = useLocalStorage('enable-metric-autocomplete', true),\n      _useLocalStorage8 = _slicedToArray(_useLocalStorage7, 2),\n      enableAutocomplete = _useLocalStorage8[0],\n      setEnableAutocomplete = _useLocalStorage8[1];\n\n  var pathPrefix = usePathPrefix();\n\n  var _useFetch = useFetch(\"\".concat(pathPrefix, \"/\").concat(API_PATH, \"/label/__name__/values\")),\n      metricsRes = _useFetch.response,\n      metricsErr = _useFetch.error;\n\n  var browserTime = new Date().getTime() / 1000;\n\n  var _useFetch2 = useFetch(\"\".concat(pathPrefix, \"/\").concat(API_PATH, \"/query?query=time()\")),\n      timeRes = _useFetch2.response,\n      timeErr = _useFetch2.error;\n\n  useEffect(function () {\n    if (timeRes.data) {\n      var serverTime = timeRes.data.result[0];\n      setDelta(Math.abs(browserTime - serverTime));\n    }\n    /**\n     * React wants to include browserTime to useEffect dependencies list which will cause a delta change on every re-render\n     * Basically it's not recommended to disable this rule, but this is the only way to take control over the useEffect\n     * dependencies and to not include the browserTime variable.\n     **/\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [timeRes.data]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Checkbox, {\n    wrapperStyles: {\n      marginLeft: 3,\n      display: 'inline-block'\n    },\n    id: \"query-history-checkbox\",\n    onChange: function onChange(_ref3) {\n      var target = _ref3.target;\n      return setEnableQueryHistory(target.checked);\n    },\n    defaultChecked: enableQueryHistory,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, \"Enable query history\"), /*#__PURE__*/React.createElement(Checkbox, {\n    wrapperStyles: {\n      marginLeft: 20,\n      display: 'inline-block'\n    },\n    id: \"use-local-time-checkbox\",\n    onChange: function onChange(_ref4) {\n      var target = _ref4.target;\n      return setUseLocalTime(target.checked);\n    },\n    defaultChecked: useLocalTime,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, \"Use local time\"), /*#__PURE__*/React.createElement(Checkbox, {\n    wrapperStyles: {\n      marginLeft: 20,\n      display: 'inline-block'\n    },\n    id: \"autocomplete\",\n    onChange: function onChange(_ref5) {\n      var target = _ref5.target;\n      return setEnableAutocomplete(target.checked);\n    },\n    defaultChecked: enableAutocomplete,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, \"Enable autocomplete\"), (delta > 30 || timeErr) && /*#__PURE__*/React.createElement(Alert, {\n    color: \"danger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }, \"Warning: \"), timeErr && \"Unexpected response status when fetching server time: \".concat(timeErr.message), delta >= 30 && \"Error fetching server time: Detected \".concat(delta, \" seconds time difference between your browser and the server. Prometheus relies on accurate time and time drift might cause unexpected query results.\")), metricsErr && /*#__PURE__*/React.createElement(Alert, {\n    color: \"danger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 11\n    }\n  }, \"Warning: \"), \"Error fetching metrics list: Unexpected response status when fetching metric names: \", metricsErr.message), /*#__PURE__*/React.createElement(PanelListContent, {\n    panels: decodePanelOptionsFromQueryString(window.location.search),\n    useLocalTime: useLocalTime,\n    metrics: metricsRes.data,\n    queryHistoryEnabled: enableQueryHistory,\n    enableAutocomplete: enableAutocomplete,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default PanelList;","map":{"version":3,"sources":["/app/src/pages/graph/PanelList.tsx"],"names":["React","useState","useEffect","Alert","Button","Panel","PanelDefaultOptions","Checkbox","generateID","decodePanelOptionsFromQueryString","encodePanelOptionsToQueryString","callAll","useFetch","useLocalStorage","usePathPrefix","API_PATH","updateURL","nextPanels","query","window","history","pushState","PanelListContent","metrics","useLocalTime","queryHistoryEnabled","enableAutocomplete","rest","panels","setPanels","historyItems","setLocalStorageHistoryItems","length","addPanel","onpopstate","location","search","handleExecuteQuery","isSimpleMetric","indexOf","extendedItems","reduce","acc","metric","slice","id","key","options","pathPrefix","map","opts","p","panel","PanelList","delta","setDelta","setUseLocalTime","enableQueryHistory","setEnableQueryHistory","setEnableAutocomplete","metricsRes","response","metricsErr","error","browserTime","Date","getTime","timeRes","timeErr","data","serverTime","result","Math","abs","marginLeft","display","target","checked","message"],"mappings":"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","sourcesContent":["import React, { FC, useState, useEffect } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { Alert, Button } from 'reactstrap';\n\nimport Panel, { PanelOptions, PanelDefaultOptions } from './Panel';\nimport Checkbox from '../../components/Checkbox';\nimport { generateID, decodePanelOptionsFromQueryString, encodePanelOptionsToQueryString, callAll } from '../../utils';\nimport { useFetch } from '../../hooks/useFetch';\nimport { useLocalStorage } from '../../hooks/useLocalStorage';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\n\nexport type PanelMeta = { key: string; options: PanelOptions; id: string };\n\nexport const updateURL = (nextPanels: PanelMeta[]) => {\n  const query = encodePanelOptionsToQueryString(nextPanels);\n  window.history.pushState({}, '', query);\n};\n\ninterface PanelListProps extends RouteComponentProps {\n  panels: PanelMeta[];\n  metrics: string[];\n  useLocalTime: boolean;\n  queryHistoryEnabled: boolean;\n  enableAutocomplete: boolean;\n}\n\nexport const PanelListContent: FC<PanelListProps> = ({\n  metrics = [],\n  useLocalTime,\n  queryHistoryEnabled,\n  enableAutocomplete,\n  ...rest\n}) => {\n  const [panels, setPanels] = useState(rest.panels);\n  const [historyItems, setLocalStorageHistoryItems] = useLocalStorage<string[]>('history', []);\n\n  useEffect(() => {\n    !panels.length && addPanel();\n    window.onpopstate = () => {\n      const panels = decodePanelOptionsFromQueryString(window.location.search);\n      if (panels.length > 0) {\n        setPanels(panels);\n      }\n    };\n    // We want useEffect to act only as componentDidMount, but react still complains about the empty dependencies list.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleExecuteQuery = (query: string) => {\n    const isSimpleMetric = metrics.indexOf(query) !== -1;\n    if (isSimpleMetric || !query.length) {\n      return;\n    }\n    const extendedItems = historyItems.reduce(\n      (acc, metric) => {\n        return metric === query ? acc : [...acc, metric]; // Prevent adding query twice.\n      },\n      [query]\n    );\n    setLocalStorageHistoryItems(extendedItems.slice(0, 50));\n  };\n\n  const addPanel = () => {\n    callAll(\n      setPanels,\n      updateURL\n    )([\n      ...panels,\n      {\n        id: generateID(),\n        key: `${panels.length}`,\n        options: PanelDefaultOptions,\n      },\n    ]);\n  };\n\n  const pathPrefix = usePathPrefix();\n\n  return (\n    <>\n      {panels.map(({ id, options }) => (\n        <Panel\n          pathPrefix={pathPrefix}\n          onExecuteQuery={handleExecuteQuery}\n          key={id}\n          options={options}\n          onOptionsChanged={opts =>\n            callAll(setPanels, updateURL)(panels.map(p => (id === p.id ? { ...p, options: opts } : p)))\n          }\n          removePanel={() =>\n            callAll(\n              setPanels,\n              updateURL\n            )(\n              panels.reduce<PanelMeta[]>(\n                (acc, panel) => (panel.id !== id ? [...acc, { ...panel, key: `${acc.length}` }] : acc),\n                []\n              )\n            )\n          }\n          useLocalTime={useLocalTime}\n          metricNames={metrics}\n          pastQueries={queryHistoryEnabled ? historyItems : []}\n          enableAutocomplete={enableAutocomplete}\n        />\n      ))}\n      <Button className=\"d-block mb-3\" color=\"primary\" onClick={addPanel}>\n        Add Panel\n      </Button>\n    </>\n  );\n};\n\nconst PanelList: FC<RouteComponentProps> = () => {\n  const [delta, setDelta] = useState(0);\n  const [useLocalTime, setUseLocalTime] = useLocalStorage('use-local-time', false);\n  const [enableQueryHistory, setEnableQueryHistory] = useLocalStorage('enable-query-history', false);\n  const [enableAutocomplete, setEnableAutocomplete] = useLocalStorage('enable-metric-autocomplete', true);\n\n  const pathPrefix = usePathPrefix();\n  const { response: metricsRes, error: metricsErr } = useFetch<string[]>(`${pathPrefix}/${API_PATH}/label/__name__/values`);\n\n  const browserTime = new Date().getTime() / 1000;\n  const { response: timeRes, error: timeErr } = useFetch<{ result: number[] }>(\n    `${pathPrefix}/${API_PATH}/query?query=time()`\n  );\n\n  useEffect(() => {\n    if (timeRes.data) {\n      const serverTime = timeRes.data.result[0];\n      setDelta(Math.abs(browserTime - serverTime));\n    }\n    /**\n     * React wants to include browserTime to useEffect dependencies list which will cause a delta change on every re-render\n     * Basically it's not recommended to disable this rule, but this is the only way to take control over the useEffect\n     * dependencies and to not include the browserTime variable.\n     **/\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timeRes.data]);\n\n  return (\n    <>\n      <Checkbox\n        wrapperStyles={{ marginLeft: 3, display: 'inline-block' }}\n        id=\"query-history-checkbox\"\n        onChange={({ target }) => setEnableQueryHistory(target.checked)}\n        defaultChecked={enableQueryHistory}\n      >\n        Enable query history\n      </Checkbox>\n      <Checkbox\n        wrapperStyles={{ marginLeft: 20, display: 'inline-block' }}\n        id=\"use-local-time-checkbox\"\n        onChange={({ target }) => setUseLocalTime(target.checked)}\n        defaultChecked={useLocalTime}\n      >\n        Use local time\n      </Checkbox>\n      <Checkbox\n        wrapperStyles={{ marginLeft: 20, display: 'inline-block' }}\n        id=\"autocomplete\"\n        onChange={({ target }) => setEnableAutocomplete(target.checked)}\n        defaultChecked={enableAutocomplete}\n      >\n        Enable autocomplete\n      </Checkbox>\n      {(delta > 30 || timeErr) && (\n        <Alert color=\"danger\">\n          <strong>Warning: </strong>\n          {timeErr && `Unexpected response status when fetching server time: ${timeErr.message}`}\n          {delta >= 30 &&\n            `Error fetching server time: Detected ${delta} seconds time difference between your browser and the server. Prometheus relies on accurate time and time drift might cause unexpected query results.`}\n        </Alert>\n      )}\n      {metricsErr && (\n        <Alert color=\"danger\">\n          <strong>Warning: </strong>\n          Error fetching metrics list: Unexpected response status when fetching metric names: {metricsErr.message}\n        </Alert>\n      )}\n      <PanelListContent\n        panels={decodePanelOptionsFromQueryString(window.location.search)}\n        useLocalTime={useLocalTime}\n        metrics={metricsRes.data}\n        queryHistoryEnabled={enableQueryHistory}\n        enableAutocomplete={enableAutocomplete}\n      />\n    </>\n  );\n};\n\nexport default PanelList;\n"]},"metadata":{},"sourceType":"module"}