{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/app/src/pages/tsdbStatus/TSDBStatus.tsx\";\n\nimport React from 'react';\nimport { Table } from 'reactstrap';\nimport { useFetch } from '../../hooks/useFetch';\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\nexport var TSDBStatusContent = function TSDBStatusContent(_ref) {\n  var headStats = _ref.headStats,\n      labelValueCountByLabelName = _ref.labelValueCountByLabelName,\n      seriesCountByMetricName = _ref.seriesCountByMetricName,\n      memoryInBytesByLabelName = _ref.memoryInBytesByLabelName,\n      seriesCountByLabelValuePair = _ref.seriesCountByLabelValuePair;\n\n  var unixToTime = function unixToTime(unix) {\n    return new Date(unix).toISOString();\n  };\n\n  var chunkCount = headStats.chunkCount,\n      numSeries = headStats.numSeries,\n      minTime = headStats.minTime,\n      maxTime = headStats.maxTime;\n  var stats = [{\n    header: 'Number of Series',\n    value: numSeries\n  }, {\n    header: 'Number of Chunks',\n    value: chunkCount\n  }, {\n    header: 'Current Min Time',\n    value: \"\".concat(unixToTime(minTime), \" (\").concat(minTime, \")\")\n  }, {\n    header: 'Current Max Time',\n    value: \"\".concat(unixToTime(maxTime), \" (\").concat(maxTime, \")\")\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, \"TSDB Status\"), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"p-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, \"Head Stats\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    bordered: true,\n    size: \"sm\",\n    striped: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, stats.map(function (_ref2) {\n    var header = _ref2.header;\n    return /*#__PURE__*/React.createElement(\"th\", {\n      key: header,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 24\n      }\n    }, header);\n  }))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, stats.map(function (_ref3) {\n    var header = _ref3.header,\n        value = _ref3.value;\n    return /*#__PURE__*/React.createElement(\"td\", {\n      key: header,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 24\n      }\n    }, value);\n  }))))), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"p-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"Head Cardinality Stats\"), [{\n    title: 'Top 10 label names with value count',\n    stats: labelValueCountByLabelName\n  }, {\n    title: 'Top 10 series count by metric names',\n    stats: seriesCountByMetricName\n  }, {\n    title: 'Top 10 label names with high memory usage',\n    unit: 'Bytes',\n    stats: memoryInBytesByLabelName\n  }, {\n    title: 'Top 10 series count by label value pairs',\n    stats: seriesCountByLabelValuePair\n  }].map(function (_ref4) {\n    var title = _ref4.title,\n        _ref4$unit = _ref4.unit,\n        unit = _ref4$unit === void 0 ? 'Count' : _ref4$unit,\n        stats = _ref4.stats;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-2\",\n      key: title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, title), /*#__PURE__*/React.createElement(Table, {\n      bordered: true,\n      size: \"sm\",\n      striped: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 19\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 19\n      }\n    }, unit))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }, stats.map(function (_ref5) {\n      var name = _ref5.name,\n          value = _ref5.value;\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: name,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 23\n        }\n      }, name), /*#__PURE__*/React.createElement(\"td\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 23\n        }\n      }, value));\n    }))));\n  }));\n};\nTSDBStatusContent.displayName = 'TSDBStatusContent';\nvar TSDBStatusContentWithStatusIndicator = withStatusIndicator(TSDBStatusContent);\n\nvar TSDBStatus = function TSDBStatus() {\n  var pathPrefix = usePathPrefix();\n\n  var _useFetch = useFetch(\"\".concat(pathPrefix, \"/\").concat(API_PATH, \"/status/tsdb\")),\n      response = _useFetch.response,\n      error = _useFetch.error,\n      isLoading = _useFetch.isLoading;\n\n  return /*#__PURE__*/React.createElement(TSDBStatusContentWithStatusIndicator, Object.assign({\n    error: error,\n    isLoading: isLoading\n  }, response.data, {\n    componentTitle: \"TSDB Status information\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default TSDBStatus;","map":{"version":3,"sources":["/app/src/pages/tsdbStatus/TSDBStatus.tsx"],"names":["React","Table","useFetch","withStatusIndicator","usePathPrefix","API_PATH","TSDBStatusContent","headStats","labelValueCountByLabelName","seriesCountByMetricName","memoryInBytesByLabelName","seriesCountByLabelValuePair","unixToTime","unix","Date","toISOString","chunkCount","numSeries","minTime","maxTime","stats","header","value","map","title","unit","name","displayName","TSDBStatusContentWithStatusIndicator","TSDBStatus","pathPrefix","response","error","isLoading","data"],"mappings":";;;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AAEA,SAASC,KAAT,QAAsB,YAAtB;AAEA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,mBAAT,QAAoC,sCAApC;AACA,SAASC,aAAT,QAA8B,kCAA9B;AACA,SAASC,QAAT,QAAyB,2BAAzB;AAsBA,OAAO,IAAMC,iBAA8B,GAAG,SAAjCA,iBAAiC,OAMxC;AAAA,MALJC,SAKI,QALJA,SAKI;AAAA,MAJJC,0BAII,QAJJA,0BAII;AAAA,MAHJC,uBAGI,QAHJA,uBAGI;AAAA,MAFJC,wBAEI,QAFJA,wBAEI;AAAA,MADJC,2BACI,QADJA,2BACI;;AACJ,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD;AAAA,WAA0B,IAAIC,IAAJ,CAASD,IAAT,EAAeE,WAAf,EAA1B;AAAA,GAAnB;;AADI,MAEIC,UAFJ,GAEgDT,SAFhD,CAEIS,UAFJ;AAAA,MAEgBC,SAFhB,GAEgDV,SAFhD,CAEgBU,SAFhB;AAAA,MAE2BC,OAF3B,GAEgDX,SAFhD,CAE2BW,OAF3B;AAAA,MAEoCC,OAFpC,GAEgDZ,SAFhD,CAEoCY,OAFpC;AAGJ,MAAMC,KAAK,GAAG,CACZ;AAAEC,IAAAA,MAAM,EAAE,kBAAV;AAA8BC,IAAAA,KAAK,EAAEL;AAArC,GADY,EAEZ;AAAEI,IAAAA,MAAM,EAAE,kBAAV;AAA8BC,IAAAA,KAAK,EAAEN;AAArC,GAFY,EAGZ;AAAEK,IAAAA,MAAM,EAAE,kBAAV;AAA8BC,IAAAA,KAAK,YAAKV,UAAU,CAACM,OAAD,CAAf,eAA6BA,OAA7B;AAAnC,GAHY,EAIZ;AAAEG,IAAAA,MAAM,EAAE,kBAAV;AAA8BC,IAAAA,KAAK,YAAKV,UAAU,CAACO,OAAD,CAAf,eAA6BA,OAA7B;AAAnC,GAJY,CAAd;AAMA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAI,IAAA,SAAS,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,QAAQ,MAAf;AAAgB,IAAA,IAAI,EAAC,IAArB;AAA0B,IAAA,OAAO,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,KAAK,CAACG,GAAN,CAAU,iBAAgB;AAAA,QAAbF,MAAa,SAAbA,MAAa;AACzB,wBAAO;AAAI,MAAA,GAAG,EAAEA,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkBA,MAAlB,CAAP;AACD,GAFA,CADH,CADF,CADF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAACG,GAAN,CAAU,iBAAuB;AAAA,QAApBF,MAAoB,SAApBA,MAAoB;AAAA,QAAZC,KAAY,SAAZA,KAAY;AAChC,wBAAO;AAAI,MAAA,GAAG,EAAED,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkBC,KAAlB,CAAP;AACD,GAFA,CADH,CADF,CARF,CADF,CAHF,eAqBE;AAAI,IAAA,SAAS,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BArBF,EAsBG,CACC;AAAEE,IAAAA,KAAK,EAAE,qCAAT;AAAgDJ,IAAAA,KAAK,EAAEZ;AAAvD,GADD,EAEC;AAAEgB,IAAAA,KAAK,EAAE,qCAAT;AAAgDJ,IAAAA,KAAK,EAAEX;AAAvD,GAFD,EAGC;AAAEe,IAAAA,KAAK,EAAE,2CAAT;AAAsDC,IAAAA,IAAI,EAAE,OAA5D;AAAqEL,IAAAA,KAAK,EAAEV;AAA5E,GAHD,EAIC;AAAEc,IAAAA,KAAK,EAAE,0CAAT;AAAqDJ,IAAAA,KAAK,EAAET;AAA5D,GAJD,EAKCY,GALD,CAKK,iBAAsC;AAAA,QAAnCC,KAAmC,SAAnCA,KAAmC;AAAA,2BAA5BC,IAA4B;AAAA,QAA5BA,IAA4B,2BAArB,OAAqB;AAAA,QAAZL,KAAY,SAAZA,KAAY;AAC1C,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,GAAG,EAAEI,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,KAAL,CADF,eAEE,oBAAC,KAAD;AAAO,MAAA,QAAQ,MAAf;AAAgB,MAAA,IAAI,EAAC,IAArB;AAA0B,MAAA,OAAO,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,IAAL,CAFF,CADF,CADF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGL,KAAK,CAACG,GAAN,CAAU,iBAAqB;AAAA,UAAlBG,IAAkB,SAAlBA,IAAkB;AAAA,UAAZJ,KAAY,SAAZA,KAAY;AAC9B,0BACE;AAAI,QAAA,GAAG,EAAEI,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKA,IAAL,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKJ,KAAL,CAFF,CADF;AAMD,KAPA,CADH,CAPF,CAFF,CADF;AAuBD,GA7BA,CAtBH,CADF;AAuDD,CAtEM;AAuEPhB,iBAAiB,CAACqB,WAAlB,GAAgC,mBAAhC;AAEA,IAAMC,oCAAoC,GAAGzB,mBAAmB,CAACG,iBAAD,CAAhE;;AAEA,IAAMuB,UAAmC,GAAG,SAAtCA,UAAsC,GAAM;AAChD,MAAMC,UAAU,GAAG1B,aAAa,EAAhC;;AADgD,kBAETF,QAAQ,WAAa4B,UAAb,cAA2BzB,QAA3B,kBAFC;AAAA,MAExC0B,QAFwC,aAExCA,QAFwC;AAAA,MAE9BC,KAF8B,aAE9BA,KAF8B;AAAA,MAEvBC,SAFuB,aAEvBA,SAFuB;;AAIhD,sBACE,oBAAC,oCAAD;AACE,IAAA,KAAK,EAAED,KADT;AAEE,IAAA,SAAS,EAAEC;AAFb,KAGMF,QAAQ,CAACG,IAHf;AAIE,IAAA,cAAc,EAAC,yBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAQD,CAZD;;AAcA,eAAeL,UAAf","sourcesContent":["import React, { FC } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { Table } from 'reactstrap';\n\nimport { useFetch } from '../../hooks/useFetch';\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\n\ninterface Stats {\n  name: string;\n  value: number;\n}\n\ninterface HeadStats {\n  numSeries: number;\n  chunkCount: number;\n  minTime: number;\n  maxTime: number;\n}\n\nexport interface TSDBMap {\n  headStats: HeadStats;\n  seriesCountByMetricName: Stats[];\n  labelValueCountByLabelName: Stats[];\n  memoryInBytesByLabelName: Stats[];\n  seriesCountByLabelValuePair: Stats[];\n}\n\nexport const TSDBStatusContent: FC<TSDBMap> = ({\n  headStats,\n  labelValueCountByLabelName,\n  seriesCountByMetricName,\n  memoryInBytesByLabelName,\n  seriesCountByLabelValuePair,\n}) => {\n  const unixToTime = (unix: number): string => new Date(unix).toISOString();\n  const { chunkCount, numSeries, minTime, maxTime } = headStats;\n  const stats = [\n    { header: 'Number of Series', value: numSeries },\n    { header: 'Number of Chunks', value: chunkCount },\n    { header: 'Current Min Time', value: `${unixToTime(minTime)} (${minTime})` },\n    { header: 'Current Max Time', value: `${unixToTime(maxTime)} (${maxTime})` },\n  ];\n  return (\n    <div>\n      <h2>TSDB Status</h2>\n      <h3 className=\"p-2\">Head Stats</h3>\n      <div className=\"p-2\">\n        <Table bordered size=\"sm\" striped>\n          <thead>\n            <tr>\n              {stats.map(({ header }) => {\n                return <th key={header}>{header}</th>;\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              {stats.map(({ header, value }) => {\n                return <td key={header}>{value}</td>;\n              })}\n            </tr>\n          </tbody>\n        </Table>\n      </div>\n      <h3 className=\"p-2\">Head Cardinality Stats</h3>\n      {[\n        { title: 'Top 10 label names with value count', stats: labelValueCountByLabelName },\n        { title: 'Top 10 series count by metric names', stats: seriesCountByMetricName },\n        { title: 'Top 10 label names with high memory usage', unit: 'Bytes', stats: memoryInBytesByLabelName },\n        { title: 'Top 10 series count by label value pairs', stats: seriesCountByLabelValuePair },\n      ].map(({ title, unit = 'Count', stats }) => {\n        return (\n          <div className=\"p-2\" key={title}>\n            <h3>{title}</h3>\n            <Table bordered size=\"sm\" striped>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>{unit}</th>\n                </tr>\n              </thead>\n              <tbody>\n                {stats.map(({ name, value }) => {\n                  return (\n                    <tr key={name}>\n                      <td>{name}</td>\n                      <td>{value}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\nTSDBStatusContent.displayName = 'TSDBStatusContent';\n\nconst TSDBStatusContentWithStatusIndicator = withStatusIndicator(TSDBStatusContent);\n\nconst TSDBStatus: FC<RouteComponentProps> = () => {\n  const pathPrefix = usePathPrefix();\n  const { response, error, isLoading } = useFetch<TSDBMap>(`${pathPrefix}/${API_PATH}/status/tsdb`);\n\n  return (\n    <TSDBStatusContentWithStatusIndicator\n      error={error}\n      isLoading={isLoading}\n      {...response.data}\n      componentTitle=\"TSDB Status information\"\n    />\n  );\n};\n\nexport default TSDBStatus;\n"]},"metadata":{},"sourceType":"module"}