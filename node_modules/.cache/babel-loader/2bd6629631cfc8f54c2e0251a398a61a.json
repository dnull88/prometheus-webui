{"ast":null,"code":"import _slicedToArray from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/app/src/pages/config/Config.tsx\";\n\nimport React, { useState } from 'react';\nimport { Button } from 'reactstrap';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport './Config.css';\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport { useFetch } from '../../hooks/useFetch';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\n\nvar YamlContent = function YamlContent(_ref) {\n  var yaml = _ref.yaml;\n  return /*#__PURE__*/React.createElement(\"pre\", {\n    className: \"config-yaml\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 47\n    }\n  }, yaml);\n};\n\nYamlContent.displayName = 'Config';\nvar ConfigWithStatusIndicator = withStatusIndicator(YamlContent);\nexport var ConfigContent = function ConfigContent(_ref2) {\n  var error = _ref2.error,\n      data = _ref2.data;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      copied = _useState2[0],\n      setCopied = _useState2[1];\n\n  var config = data && data.yaml;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, \"Configuration\\xA0\", /*#__PURE__*/React.createElement(CopyToClipboard, {\n    text: config,\n    onCopy: function onCopy(_, result) {\n      setCopied(result);\n      setTimeout(setCopied, 1500);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"light\",\n    disabled: !config,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, copied ? 'Copied' : 'Copy to clipboard'))), /*#__PURE__*/React.createElement(ConfigWithStatusIndicator, {\n    error: error,\n    isLoading: !config,\n    yaml: config,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar Config = function Config() {\n  var pathPrefix = usePathPrefix();\n\n  var _useFetch = useFetch(\"\".concat(pathPrefix, \"/\").concat(API_PATH, \"/status/config\")),\n      response = _useFetch.response,\n      error = _useFetch.error;\n\n  return /*#__PURE__*/React.createElement(ConfigContent, {\n    error: error,\n    data: response.data,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default Config;","map":{"version":3,"sources":["/app/src/pages/config/Config.tsx"],"names":["React","useState","Button","CopyToClipboard","withStatusIndicator","useFetch","usePathPrefix","API_PATH","YamlContent","yaml","displayName","ConfigWithStatusIndicator","ConfigContent","error","data","copied","setCopied","config","_","result","setTimeout","Config","pathPrefix","response"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAoC,OAApC;AAEA,SAASC,MAAT,QAAuB,YAAvB;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AAEA,OAAO,cAAP;AACA,SAASC,mBAAT,QAAoC,sCAApC;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,aAAT,QAA8B,kCAA9B;AACA,SAASC,QAAT,QAAyB,2BAAzB;;AASA,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA,MAAGC,IAAH,QAAGA,IAAH;AAAA,sBAA0B;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BA,IAA9B,CAA1B;AAAA,CAApB;;AACAD,WAAW,CAACE,WAAZ,GAA0B,QAA1B;AAEA,IAAMC,yBAAyB,GAAGP,mBAAmB,CAACI,WAAD,CAArD;AAEA,OAAO,IAAMI,aAAqC,GAAG,SAAxCA,aAAwC,QAAqB;AAAA,MAAlBC,KAAkB,SAAlBA,KAAkB;AAAA,MAAXC,IAAW,SAAXA,IAAW;;AAAA,kBAC5Cb,QAAQ,CAAC,KAAD,CADoC;AAAA;AAAA,MACjEc,MADiE;AAAA,MACzDC,SADyD;;AAExE,MAAMC,MAAM,GAAGH,IAAI,IAAIA,IAAI,CAACL,IAA5B;AACA,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAEE,oBAAC,eAAD;AACE,IAAA,IAAI,EAAEQ,MADR;AAEE,IAAA,MAAM,EAAE,gBAACC,CAAD,EAAIC,MAAJ,EAAe;AACrBH,MAAAA,SAAS,CAACG,MAAD,CAAT;AACAC,MAAAA,UAAU,CAACJ,SAAD,EAAY,IAAZ,CAAV;AACD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,OAAd;AAAsB,IAAA,QAAQ,EAAE,CAACC,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,MAAM,GAAG,QAAH,GAAc,mBADvB,CAPF,CAFF,CADF,eAeE,oBAAC,yBAAD;AAA2B,IAAA,KAAK,EAAEF,KAAlC;AAAyC,IAAA,SAAS,EAAE,CAACI,MAArD;AAA6D,IAAA,IAAI,EAAEA,MAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CADF;AAmBD,CAtBM;;AAwBP,IAAMI,MAA+B,GAAG,SAAlCA,MAAkC,GAAM;AAC5C,MAAMC,UAAU,GAAGhB,aAAa,EAAhC;;AAD4C,kBAEhBD,QAAQ,WAAgBiB,UAAhB,cAA8Bf,QAA9B,oBAFQ;AAAA,MAEpCgB,QAFoC,aAEpCA,QAFoC;AAAA,MAE1BV,KAF0B,aAE1BA,KAF0B;;AAG5C,sBAAO,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEA,KAAtB;AAA6B,IAAA,IAAI,EAAEU,QAAQ,CAACT,IAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAJD;;AAMA,eAAeO,MAAf","sourcesContent":["import React, { useState, FC } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { Button } from 'reactstrap';\nimport CopyToClipboard from 'react-copy-to-clipboard';\n\nimport './Config.css';\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport { useFetch } from '../../hooks/useFetch';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\n\ntype YamlConfig = { yaml?: string };\n\ninterface ConfigContentProps {\n  error?: Error;\n  data?: YamlConfig;\n}\n\nconst YamlContent = ({ yaml }: YamlConfig) => <pre className=\"config-yaml\">{yaml}</pre>;\nYamlContent.displayName = 'Config';\n\nconst ConfigWithStatusIndicator = withStatusIndicator(YamlContent);\n\nexport const ConfigContent: FC<ConfigContentProps> = ({ error, data }) => {\n  const [copied, setCopied] = useState(false);\n  const config = data && data.yaml;\n  return (\n    <>\n      <h2>\n        Configuration&nbsp;\n        <CopyToClipboard\n          text={config!}\n          onCopy={(_, result) => {\n            setCopied(result);\n            setTimeout(setCopied, 1500);\n          }}\n        >\n          <Button color=\"light\" disabled={!config}>\n            {copied ? 'Copied' : 'Copy to clipboard'}\n          </Button>\n        </CopyToClipboard>\n      </h2>\n      <ConfigWithStatusIndicator error={error} isLoading={!config} yaml={config} />\n    </>\n  );\n};\n\nconst Config: FC<RouteComponentProps> = () => {\n  const pathPrefix = usePathPrefix();\n  const { response, error } = useFetch<YamlConfig>(`${pathPrefix}/${API_PATH}/status/config`);\n  return <ConfigContent error={error} data={response.data} />;\n};\n\nexport default Config;\n"]},"metadata":{},"sourceType":"module"}