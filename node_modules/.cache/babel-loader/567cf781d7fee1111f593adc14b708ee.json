{"ast":null,"code":"import _objectWithoutProperties from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/app/src/components/withStatusIndicator.tsx\";\n\nimport React from 'react';\nimport { Alert } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nexport var withStatusIndicator = function withStatusIndicator(Component) {\n  return function (_ref) {\n    var error = _ref.error,\n        isLoading = _ref.isLoading,\n        customErrorMsg = _ref.customErrorMsg,\n        componentTitle = _ref.componentTitle,\n        rest = _objectWithoutProperties(_ref, [\"error\", \"isLoading\", \"customErrorMsg\", \"componentTitle\"]);\n\n    if (error) {\n      return /*#__PURE__*/React.createElement(Alert, {\n        color: \"danger\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 7\n        }\n      }, customErrorMsg ? customErrorMsg : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }\n      }, \"Error:\"), \" Error fetching \", componentTitle || Component.displayName, \": \", error.message));\n    }\n\n    if (isLoading) {\n      return /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        size: \"3x\",\n        icon: faSpinner,\n        spin: true,\n        className: \"position-absolute\",\n        style: {\n          transform: 'translate(-50%, -50%)',\n          top: '50%',\n          left: '50%'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 7\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(Component, Object.assign({}, rest, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 10\n      }\n    }));\n  };\n};","map":{"version":3,"sources":["/app/src/components/withStatusIndicator.tsx"],"names":["React","Alert","FontAwesomeIcon","faSpinner","withStatusIndicator","Component","error","isLoading","customErrorMsg","componentTitle","rest","displayName","message","transform","top","left"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAyC,OAAzC;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,SAAT,QAA0B,mCAA1B;AASA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAeC,SAAf;AAAA,SAA6E,gBAM1G;AAAA,QALJC,KAKI,QALJA,KAKI;AAAA,QAJJC,SAII,QAJJA,SAII;AAAA,QAHJC,cAGI,QAHJA,cAGI;AAAA,QAFJC,cAEI,QAFJA,cAEI;AAAA,QADDC,IACC;;AACJ,QAAIJ,KAAJ,EAAW;AACT,0BACE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGE,cAAc,GACbA,cADa,gBAGb,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,sBAC0CC,cAAc,IAAIJ,SAAS,CAACM,WADtE,QACqFL,KAAK,CAACM,OAD3F,CAJJ,CADF;AAWD;;AAED,QAAIL,SAAJ,EAAe;AACb,0BACE,oBAAC,eAAD;AACE,QAAA,IAAI,EAAC,IADP;AAEE,QAAA,IAAI,EAAEJ,SAFR;AAGE,QAAA,IAAI,MAHN;AAIE,QAAA,SAAS,EAAC,mBAJZ;AAKE,QAAA,KAAK,EAAE;AAAEU,UAAAA,SAAS,EAAE,uBAAb;AAAsCC,UAAAA,GAAG,EAAE,KAA3C;AAAkDC,UAAAA,IAAI,EAAE;AAAxD,SALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AASD;;AACD,wBAAO,oBAAC,SAAD,oBAAgBL,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAjCkC;AAAA,CAA5B","sourcesContent":["import React, { FC, ComponentType } from 'react';\nimport { Alert } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\n\ninterface StatusIndicatorProps {\n  error?: Error;\n  isLoading?: boolean;\n  customErrorMsg?: JSX.Element;\n  componentTitle?: string;\n}\n\nexport const withStatusIndicator = <T extends {}>(Component: ComponentType<T>): FC<StatusIndicatorProps & T> => ({\n  error,\n  isLoading,\n  customErrorMsg,\n  componentTitle,\n  ...rest\n}) => {\n  if (error) {\n    return (\n      <Alert color=\"danger\">\n        {customErrorMsg ? (\n          customErrorMsg\n        ) : (\n          <>\n            <strong>Error:</strong> Error fetching {componentTitle || Component.displayName}: {error.message}\n          </>\n        )}\n      </Alert>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <FontAwesomeIcon\n        size=\"3x\"\n        icon={faSpinner}\n        spin\n        className=\"position-absolute\"\n        style={{ transform: 'translate(-50%, -50%)', top: '50%', left: '50%' }}\n      />\n    );\n  }\n  return <Component {...(rest as T)} />;\n};\n"]},"metadata":{},"sourceType":"module"}