{"ast":null,"code":"import React from'react';import Navigation from'./Navbar';import{Container}from'reactstrap';import'./App.css';import{Router,Redirect}from'@reach/router';import{Alerts,Config,Flags,Rules,ServiceDiscovery,Status,Targets,TSDBStatus,PanelList}from'./pages';import{PathPrefixContext}from'./contexts/PathPrefixContext';var App=function App(_ref){var consolesLink=_ref.consolesLink;// This dynamically/generically determines the pathPrefix by stripping the first known\n// endpoint suffix from the window location path. It works out of the box for both direct\n// hosting and reverse proxy deployments with no additional configurations required.\nvar basePath=window.location.pathname;var paths=['/graph','/alerts','/status','/tsdb-status','/flags','/config','/rules','/targets','/service-discovery'];if(basePath.endsWith('/')){basePath=basePath.slice(0,-1);}if(basePath.length>1){for(var i=0;i<paths.length;i++){if(basePath.endsWith(paths[i])){basePath=basePath.slice(0,basePath.length-paths[i].length);break;}}}return/*#__PURE__*/React.createElement(PathPrefixContext.Provider,{value:basePath},/*#__PURE__*/React.createElement(Navigation,{consolesLink:consolesLink}),/*#__PURE__*/React.createElement(Container,{fluid:true,style:{paddingTop:70}},/*#__PURE__*/React.createElement(Router,{basepath:\"\".concat(basePath)},/*#__PURE__*/React.createElement(Redirect,{from:\"/\",to:\"graph\",noThrow:true}),/*#__PURE__*/React.createElement(PanelList,{path:\"/graph\"}),/*#__PURE__*/React.createElement(Alerts,{path:\"/alerts\"}),/*#__PURE__*/React.createElement(Config,{path:\"/config\"}),/*#__PURE__*/React.createElement(Flags,{path:\"/flags\"}),/*#__PURE__*/React.createElement(Rules,{path:\"/rules\"}),/*#__PURE__*/React.createElement(ServiceDiscovery,{path:\"/service-discovery\"}),/*#__PURE__*/React.createElement(Status,{path:\"/status\"}),/*#__PURE__*/React.createElement(TSDBStatus,{path:\"/tsdb-status\"}),/*#__PURE__*/React.createElement(Targets,{path:\"/targets\"}))));};export default App;","map":{"version":3,"sources":["/app/src/App.tsx"],"names":["React","Navigation","Container","Router","Redirect","Alerts","Config","Flags","Rules","ServiceDiscovery","Status","Targets","TSDBStatus","PanelList","PathPrefixContext","App","consolesLink","basePath","window","location","pathname","paths","endsWith","slice","length","i","paddingTop"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAA0B,OAA1B,CACA,MAAOC,CAAAA,UAAP,KAAuB,UAAvB,CACA,OAASC,SAAT,KAA0B,YAA1B,CAEA,MAAO,WAAP,CACA,OAASC,MAAT,CAAiBC,QAAjB,KAAiC,eAAjC,CACA,OAASC,MAAT,CAAiBC,MAAjB,CAAyBC,KAAzB,CAAgCC,KAAhC,CAAuCC,gBAAvC,CAAyDC,MAAzD,CAAiEC,OAAjE,CAA0EC,UAA1E,CAAsFC,SAAtF,KAAuG,SAAvG,CACA,OAASC,iBAAT,KAAkC,8BAAlC,CAMA,GAAMC,CAAAA,GAAiB,CAAG,QAApBA,CAAAA,GAAoB,MAAsB,IAAnBC,CAAAA,YAAmB,MAAnBA,YAAmB,CAC9C;AACA;AACA;AACA,GAAIC,CAAAA,QAAQ,CAAGC,MAAM,CAACC,QAAP,CAAgBC,QAA/B,CACA,GAAMC,CAAAA,KAAK,CAAG,CACZ,QADY,CAEZ,SAFY,CAGZ,SAHY,CAIZ,cAJY,CAKZ,QALY,CAMZ,SANY,CAOZ,QAPY,CAQZ,UARY,CASZ,oBATY,CAAd,CAWA,GAAIJ,QAAQ,CAACK,QAAT,CAAkB,GAAlB,CAAJ,CAA4B,CAC1BL,QAAQ,CAAGA,QAAQ,CAACM,KAAT,CAAe,CAAf,CAAkB,CAAC,CAAnB,CAAX,CACD,CACD,GAAIN,QAAQ,CAACO,MAAT,CAAkB,CAAtB,CAAyB,CACvB,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGJ,KAAK,CAACG,MAA1B,CAAkCC,CAAC,EAAnC,CAAuC,CACrC,GAAIR,QAAQ,CAACK,QAAT,CAAkBD,KAAK,CAACI,CAAD,CAAvB,CAAJ,CAAiC,CAC/BR,QAAQ,CAAGA,QAAQ,CAACM,KAAT,CAAe,CAAf,CAAkBN,QAAQ,CAACO,MAAT,CAAkBH,KAAK,CAACI,CAAD,CAAL,CAASD,MAA7C,CAAX,CACA,MACD,CACF,CACF,CAED,mBACE,oBAAC,iBAAD,CAAmB,QAAnB,EAA4B,KAAK,CAAEP,QAAnC,eACE,oBAAC,UAAD,EAAY,YAAY,CAAED,YAA1B,EADF,cAEE,oBAAC,SAAD,EAAW,KAAK,KAAhB,CAAiB,KAAK,CAAE,CAAEU,UAAU,CAAE,EAAd,CAAxB,eACE,oBAAC,MAAD,EAAQ,QAAQ,WAAKT,QAAL,CAAhB,eACE,oBAAC,QAAD,EAAU,IAAI,CAAC,GAAf,CAAmB,EAAE,QAArB,CAAgC,OAAO,KAAvC,EADF,cAME,oBAAC,SAAD,EAAW,IAAI,CAAC,QAAhB,EANF,cAOE,oBAAC,MAAD,EAAQ,IAAI,CAAC,SAAb,EAPF,cAQE,oBAAC,MAAD,EAAQ,IAAI,CAAC,SAAb,EARF,cASE,oBAAC,KAAD,EAAO,IAAI,CAAC,QAAZ,EATF,cAUE,oBAAC,KAAD,EAAO,IAAI,CAAC,QAAZ,EAVF,cAWE,oBAAC,gBAAD,EAAkB,IAAI,CAAC,oBAAvB,EAXF,cAYE,oBAAC,MAAD,EAAQ,IAAI,CAAC,SAAb,EAZF,cAaE,oBAAC,UAAD,EAAY,IAAI,CAAC,cAAjB,EAbF,cAcE,oBAAC,OAAD,EAAS,IAAI,CAAC,UAAd,EAdF,CADF,CAFF,CADF,CAuBD,CAnDD,CAqDA,cAAeF,CAAAA,GAAf","sourcesContent":["import React, { FC } from 'react';\nimport Navigation from './Navbar';\nimport { Container } from 'reactstrap';\n\nimport './App.css';\nimport { Router, Redirect } from '@reach/router';\nimport { Alerts, Config, Flags, Rules, ServiceDiscovery, Status, Targets, TSDBStatus, PanelList } from './pages';\nimport { PathPrefixContext } from './contexts/PathPrefixContext';\n\ninterface AppProps {\n  consolesLink: string | null;\n}\n\nconst App: FC<AppProps> = ({ consolesLink }) => {\n  // This dynamically/generically determines the pathPrefix by stripping the first known\n  // endpoint suffix from the window location path. It works out of the box for both direct\n  // hosting and reverse proxy deployments with no additional configurations required.\n  let basePath = window.location.pathname;\n  const paths = [\n    '/graph',\n    '/alerts',\n    '/status',\n    '/tsdb-status',\n    '/flags',\n    '/config',\n    '/rules',\n    '/targets',\n    '/service-discovery',\n  ];\n  if (basePath.endsWith('/')) {\n    basePath = basePath.slice(0, -1);\n  }\n  if (basePath.length > 1) {\n    for (let i = 0; i < paths.length; i++) {\n      if (basePath.endsWith(paths[i])) {\n        basePath = basePath.slice(0, basePath.length - paths[i].length);\n        break;\n      }\n    }\n  }\n\n  return (\n    <PathPrefixContext.Provider value={basePath}>\n      <Navigation consolesLink={consolesLink} />\n      <Container fluid style={{ paddingTop: 70 }}>\n        <Router basepath={`${basePath}`}>\n          <Redirect from=\"/\" to={`graph`} noThrow />\n          {/*\n              NOTE: Any route added here needs to also be added to the list of\n              React-handled router paths (\"reactRouterPaths\") in /web/web.go.\n            */}\n          <PanelList path=\"/graph\" />\n          <Alerts path=\"/alerts\" />\n          <Config path=\"/config\" />\n          <Flags path=\"/flags\" />\n          <Rules path=\"/rules\" />\n          <ServiceDiscovery path=\"/service-discovery\" />\n          <Status path=\"/status\" />\n          <TSDBStatus path=\"/tsdb-status\" />\n          <Targets path=\"/targets\" />\n        </Router>\n      </Container>\n    </PathPrefixContext.Provider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}