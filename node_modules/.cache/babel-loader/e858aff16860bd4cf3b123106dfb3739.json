{"ast":null,"code":"import _createForOfIteratorHelper from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/app/src/pages/graph/GraphControls.tsx\";\nimport React, { Component } from 'react';\nimport { Button, ButtonGroup, Form, InputGroup, InputGroupAddon, Input } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faMinus, faChartArea, faChartLine } from '@fortawesome/free-solid-svg-icons';\nimport TimeInput from './TimeInput';\nimport { parseDuration, formatDuration } from '../../utils';\n\nvar GraphControls = /*#__PURE__*/function (_Component) {\n  _inherits(GraphControls, _Component);\n\n  var _super = _createSuper(GraphControls);\n\n  function GraphControls() {\n    var _this;\n\n    _classCallCheck(this, GraphControls);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.rangeRef = React.createRef();\n    _this.resolutionRef = React.createRef();\n    _this.rangeSteps = [1, 10, 60, 5 * 60, 15 * 60, 30 * 60, 60 * 60, 2 * 60 * 60, 6 * 60 * 60, 12 * 60 * 60, 24 * 60 * 60, 48 * 60 * 60, 7 * 24 * 60 * 60, 14 * 24 * 60 * 60, 28 * 24 * 60 * 60, 56 * 24 * 60 * 60, 365 * 24 * 60 * 60, 730 * 24 * 60 * 60].map(function (s) {\n      return s * 1000;\n    });\n\n    _this.onChangeRangeInput = function (rangeText) {\n      var range = parseDuration(rangeText);\n\n      if (range === null) {\n        _this.changeRangeInput(_this.props.range);\n      } else {\n        _this.props.onChangeRange(range);\n      }\n    };\n\n    _this.changeRangeInput = function (range) {\n      _this.rangeRef.current.value = formatDuration(range);\n    };\n\n    _this.increaseRange = function () {\n      var _iterator = _createForOfIteratorHelper(_this.rangeSteps),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _range = _step.value;\n\n          if (_this.props.range < _range) {\n            _this.changeRangeInput(_range);\n\n            _this.props.onChangeRange(_range);\n\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    };\n\n    _this.decreaseRange = function () {\n      var _iterator2 = _createForOfIteratorHelper(_this.rangeSteps.slice().reverse()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _range2 = _step2.value;\n\n          if (_this.props.range > _range2) {\n            _this.changeRangeInput(_range2);\n\n            _this.props.onChangeRange(_range2);\n\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(GraphControls, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.range !== this.props.range) {\n        this.changeRangeInput(this.props.range);\n      }\n\n      if (prevProps.resolution !== this.props.resolution) {\n        this.resolutionRef.current.value = this.props.resolution !== null ? this.props.resolution.toString() : '';\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(Form, {\n        inline: true,\n        className: \"graph-controls\",\n        onSubmit: function onSubmit(e) {\n          return e.preventDefault();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(InputGroup, {\n        className: \"range-input\",\n        size: \"sm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(InputGroupAddon, {\n        addonType: \"prepend\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        title: \"Decrease range\",\n        onClick: this.decreaseRange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faMinus,\n        fixedWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(Input, {\n        defaultValue: formatDuration(this.props.range),\n        innerRef: this.rangeRef,\n        onBlur: function onBlur() {\n          return _this2.onChangeRangeInput(_this2.rangeRef.current.value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(InputGroupAddon, {\n        addonType: \"append\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        title: \"Increase range\",\n        onClick: this.increaseRange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        fixedWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }\n      })))), /*#__PURE__*/React.createElement(TimeInput, {\n        time: this.props.endTime,\n        useLocalTime: this.props.useLocalTime,\n        range: this.props.range,\n        placeholder: \"End time\",\n        onChangeTime: this.props.onChangeEndTime,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Input, {\n        placeholder: \"Res. (s)\",\n        className: \"resolution-input\",\n        defaultValue: this.props.resolution !== null ? this.props.resolution.toString() : '',\n        innerRef: this.resolutionRef,\n        onBlur: function onBlur() {\n          var res = parseInt(_this2.resolutionRef.current.value);\n\n          _this2.props.onChangeResolution(res ? res : null);\n        },\n        bsSize: \"sm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(ButtonGroup, {\n        className: \"stacked-input\",\n        size: \"sm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        title: \"Show unstacked line graph\",\n        onClick: function onClick() {\n          return _this2.props.onChangeStacking(false);\n        },\n        active: !this.props.stacked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faChartLine,\n        fixedWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        title: \"Show stacked graph\",\n        onClick: function onClick() {\n          return _this2.props.onChangeStacking(true);\n        },\n        active: this.props.stacked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faChartArea,\n        fixedWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return GraphControls;\n}(Component);\n\nexport default GraphControls;","map":{"version":3,"sources":["/app/src/pages/graph/GraphControls.tsx"],"names":["React","Component","Button","ButtonGroup","Form","InputGroup","InputGroupAddon","Input","FontAwesomeIcon","faPlus","faMinus","faChartArea","faChartLine","TimeInput","parseDuration","formatDuration","GraphControls","rangeRef","createRef","resolutionRef","rangeSteps","map","s","onChangeRangeInput","rangeText","range","changeRangeInput","props","onChangeRange","current","value","increaseRange","decreaseRange","slice","reverse","prevProps","resolution","toString","e","preventDefault","endTime","useLocalTime","onChangeEndTime","res","parseInt","onChangeResolution","onChangeStacking","stacked"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, ButtonGroup, Form, InputGroup, InputGroupAddon, Input } from 'reactstrap';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faMinus, faChartArea, faChartLine } from '@fortawesome/free-solid-svg-icons';\n\nimport TimeInput from './TimeInput';\nimport { parseDuration, formatDuration } from '../../utils';\n\ninterface GraphControlsProps {\n  range: number;\n  endTime: number | null;\n  useLocalTime: boolean;\n  resolution: number | null;\n  stacked: boolean;\n\n  onChangeRange: (range: number) => void;\n  onChangeEndTime: (endTime: number | null) => void;\n  onChangeResolution: (resolution: number | null) => void;\n  onChangeStacking: (stacked: boolean) => void;\n}\n\nclass GraphControls extends Component<GraphControlsProps> {\n  private rangeRef = React.createRef<HTMLInputElement>();\n  private resolutionRef = React.createRef<HTMLInputElement>();\n\n  rangeSteps = [\n    1,\n    10,\n    60,\n    5 * 60,\n    15 * 60,\n    30 * 60,\n    60 * 60,\n    2 * 60 * 60,\n    6 * 60 * 60,\n    12 * 60 * 60,\n    24 * 60 * 60,\n    48 * 60 * 60,\n    7 * 24 * 60 * 60,\n    14 * 24 * 60 * 60,\n    28 * 24 * 60 * 60,\n    56 * 24 * 60 * 60,\n    365 * 24 * 60 * 60,\n    730 * 24 * 60 * 60,\n  ].map(s => s * 1000);\n\n  onChangeRangeInput = (rangeText: string): void => {\n    const range = parseDuration(rangeText);\n    if (range === null) {\n      this.changeRangeInput(this.props.range);\n    } else {\n      this.props.onChangeRange(range);\n    }\n  };\n\n  changeRangeInput = (range: number): void => {\n    this.rangeRef.current!.value = formatDuration(range);\n  };\n\n  increaseRange = (): void => {\n    for (const range of this.rangeSteps) {\n      if (this.props.range < range) {\n        this.changeRangeInput(range);\n        this.props.onChangeRange(range);\n        return;\n      }\n    }\n  };\n\n  decreaseRange = (): void => {\n    for (const range of this.rangeSteps.slice().reverse()) {\n      if (this.props.range > range) {\n        this.changeRangeInput(range);\n        this.props.onChangeRange(range);\n        return;\n      }\n    }\n  };\n\n  componentDidUpdate(prevProps: GraphControlsProps) {\n    if (prevProps.range !== this.props.range) {\n      this.changeRangeInput(this.props.range);\n    }\n    if (prevProps.resolution !== this.props.resolution) {\n      this.resolutionRef.current!.value = this.props.resolution !== null ? this.props.resolution.toString() : '';\n    }\n  }\n\n  render() {\n    return (\n      <Form inline className=\"graph-controls\" onSubmit={e => e.preventDefault()}>\n        <InputGroup className=\"range-input\" size=\"sm\">\n          <InputGroupAddon addonType=\"prepend\">\n            <Button title=\"Decrease range\" onClick={this.decreaseRange}>\n              <FontAwesomeIcon icon={faMinus} fixedWidth />\n            </Button>\n          </InputGroupAddon>\n\n          <Input\n            defaultValue={formatDuration(this.props.range)}\n            innerRef={this.rangeRef}\n            onBlur={() => this.onChangeRangeInput(this.rangeRef.current!.value)}\n          />\n\n          <InputGroupAddon addonType=\"append\">\n            <Button title=\"Increase range\" onClick={this.increaseRange}>\n              <FontAwesomeIcon icon={faPlus} fixedWidth />\n            </Button>\n          </InputGroupAddon>\n        </InputGroup>\n\n        <TimeInput\n          time={this.props.endTime}\n          useLocalTime={this.props.useLocalTime}\n          range={this.props.range}\n          placeholder=\"End time\"\n          onChangeTime={this.props.onChangeEndTime}\n        />\n\n        <Input\n          placeholder=\"Res. (s)\"\n          className=\"resolution-input\"\n          defaultValue={this.props.resolution !== null ? this.props.resolution.toString() : ''}\n          innerRef={this.resolutionRef}\n          onBlur={() => {\n            const res = parseInt(this.resolutionRef.current!.value);\n            this.props.onChangeResolution(res ? res : null);\n          }}\n          bsSize=\"sm\"\n        />\n\n        <ButtonGroup className=\"stacked-input\" size=\"sm\">\n          <Button\n            title=\"Show unstacked line graph\"\n            onClick={() => this.props.onChangeStacking(false)}\n            active={!this.props.stacked}\n          >\n            <FontAwesomeIcon icon={faChartLine} fixedWidth />\n          </Button>\n          <Button title=\"Show stacked graph\" onClick={() => this.props.onChangeStacking(true)} active={this.props.stacked}>\n            <FontAwesomeIcon icon={faChartArea} fixedWidth />\n          </Button>\n        </ButtonGroup>\n      </Form>\n    );\n  }\n}\n\nexport default GraphControls;\n"]},"metadata":{},"sourceType":"module"}