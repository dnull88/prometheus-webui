{"ast":null,"code":"import _regeneratorRuntime from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nexport var useFetch = function useFetch(url, options) {\n  var _useState = useState({\n    status: 'start fetching'\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      response = _useState2[0],\n      setResponse = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  useEffect(function () {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res, json;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setIsLoading(true);\n                _context.prev = 1;\n                _context.next = 4;\n                return fetch(url, _objectSpread({\n                  cache: 'no-store',\n                  credentials: 'same-origin'\n                }, options));\n\n              case 4:\n                res = _context.sent;\n\n                if (res.ok) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new Error(res.statusText);\n\n              case 7:\n                _context.next = 9;\n                return res.json();\n\n              case 9:\n                json = _context.sent;\n                setResponse(json);\n                setIsLoading(false);\n                _context.next = 17;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](1);\n                setError(_context.t0);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 14]]);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, [url, options]);\n  return {\n    response,\n    error,\n    isLoading\n  };\n};","map":{"version":3,"sources":["/app/src/hooks/useFetch.ts"],"names":["useState","useEffect","useFetch","url","options","status","response","setResponse","error","setError","isLoading","setIsLoading","fetchData","fetch","cache","credentials","res","ok","Error","statusText","json"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAUA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAeC,GAAf,EAA4BC,OAA5B,EAAqE;AAAA,kBAC3DJ,QAAQ,CAAiB;AAAEK,IAAAA,MAAM,EAAE;AAAV,GAAjB,CADmD;AAAA;AAAA,MACpFC,QADoF;AAAA,MAC1EC,WAD0E;;AAAA,mBAEjEP,QAAQ,EAFyD;AAAA;AAAA,MAEpFQ,KAFoF;AAAA,MAE7EC,QAF6E;;AAAA,mBAGzDT,QAAQ,CAAU,IAAV,CAHiD;AAAA;AAAA,MAGpFU,SAHoF;AAAA,MAGzEC,YAHyE;;AAK3FV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMW,SAAS;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBD,gBAAAA,YAAY,CAAC,IAAD,CAAZ;AADgB;AAAA;AAAA,uBAGIE,KAAK,CAACV,GAAD;AAAQW,kBAAAA,KAAK,EAAE,UAAf;AAA2BC,kBAAAA,WAAW,EAAE;AAAxC,mBAA0DX,OAA1D,EAHT;;AAAA;AAGRY,gBAAAA,GAHQ;;AAAA,oBAITA,GAAG,CAACC,EAJK;AAAA;AAAA;AAAA;;AAAA,sBAKN,IAAIC,KAAJ,CAAUF,GAAG,CAACG,UAAd,CALM;;AAAA;AAAA;AAAA,uBAOMH,GAAG,CAACI,IAAJ,EAPN;;AAAA;AAORA,gBAAAA,IAPQ;AAQdb,gBAAAA,WAAW,CAACa,IAAD,CAAX;AACAT,gBAAAA,YAAY,CAAC,KAAD,CAAZ;AATc;AAAA;;AAAA;AAAA;AAAA;AAWdF,gBAAAA,QAAQ,aAAR;;AAXc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAATG,SAAS;AAAA;AAAA;AAAA,OAAf;;AAcAA,IAAAA,SAAS;AACV,GAhBQ,EAgBN,CAACT,GAAD,EAAMC,OAAN,CAhBM,CAAT;AAiBA,SAAO;AAAEE,IAAAA,QAAF;AAAYE,IAAAA,KAAZ;AAAmBE,IAAAA;AAAnB,GAAP;AACD,CAvBM","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport type APIResponse<T> = { status: string; data: T };\n\nexport interface FetchState<T> {\n  response: APIResponse<T>;\n  error?: Error;\n  isLoading: boolean;\n}\n\nexport const useFetch = <T extends {}>(url: string, options?: RequestInit): FetchState<T> => {\n  const [response, setResponse] = useState<APIResponse<T>>({ status: 'start fetching' } as any);\n  const [error, setError] = useState<Error>();\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const res = await fetch(url, { cache: 'no-store', credentials: 'same-origin', ...options });\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        const json = (await res.json()) as APIResponse<T>;\n        setResponse(json);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchData();\n  }, [url, options]);\n  return { response, error, isLoading };\n};\n"]},"metadata":{},"sourceType":"module"}