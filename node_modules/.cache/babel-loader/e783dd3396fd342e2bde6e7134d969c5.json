{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/app/src/pages/flags/Flags.tsx\";\n\nimport React from 'react';\nimport { Table } from 'reactstrap';\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport { useFetch } from '../../hooks/useFetch';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\nexport var FlagsContent = function FlagsContent(_ref) {\n  var _ref$data = _ref.data,\n      data = _ref$data === void 0 ? {} : _ref$data;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, \"Command-Line Flags\"), /*#__PURE__*/React.createElement(Table, {\n    bordered: true,\n    size: \"sm\",\n    striped: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, Object.keys(data).map(function (key) {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: key,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 15\n      }\n    }, key), /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 15\n      }\n    }, data[key]));\n  }))));\n};\nvar FlagsWithStatusIndicator = withStatusIndicator(FlagsContent);\nFlagsContent.displayName = 'Flags';\n\nvar Flags = function Flags() {\n  var pathPrefix = usePathPrefix();\n\n  var _useFetch = useFetch(\"\".concat(pathPrefix, \"/\").concat(API_PATH, \"/status/flags\")),\n      response = _useFetch.response,\n      error = _useFetch.error,\n      isLoading = _useFetch.isLoading;\n\n  return /*#__PURE__*/React.createElement(FlagsWithStatusIndicator, {\n    data: response.data,\n    error: error,\n    isLoading: isLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default Flags;","map":{"version":3,"sources":["/app/src/pages/flags/Flags.tsx"],"names":["React","Table","withStatusIndicator","useFetch","usePathPrefix","API_PATH","FlagsContent","data","Object","keys","map","key","FlagsWithStatusIndicator","displayName","Flags","pathPrefix","response","error","isLoading"],"mappings":";;;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AAEA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,mBAAT,QAAoC,sCAApC;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,aAAT,QAA8B,kCAA9B;AACA,SAASC,QAAT,QAAyB,2BAAzB;AAUA,OAAO,IAAMC,YAA4B,GAAG,SAA/BA,YAA+B,OAAmB;AAAA,uBAAhBC,IAAgB;AAAA,MAAhBA,IAAgB,0BAAT,EAAS;AAC7D,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE,oBAAC,KAAD;AAAO,IAAA,QAAQ,MAAf;AAAgB,IAAA,IAAI,EAAC,IAArB;AAA0B,IAAA,OAAO,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,GAAlB,CAAsB,UAAAC,GAAG;AAAA,wBACxB;AAAI,MAAA,GAAG,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,GAAL,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKJ,IAAI,CAACI,GAAD,CAAT,CAFF,CADwB;AAAA,GAAzB,CADH,CADF,CAFF,CADF;AAeD,CAhBM;AAiBP,IAAMC,wBAAwB,GAAGV,mBAAmB,CAACI,YAAD,CAApD;AAEAA,YAAY,CAACO,WAAb,GAA2B,OAA3B;;AAEA,IAAMC,KAA8B,GAAG,SAAjCA,KAAiC,GAAM;AAC3C,MAAMC,UAAU,GAAGX,aAAa,EAAhC;;AAD2C,kBAEJD,QAAQ,WAAaY,UAAb,cAA2BV,QAA3B,mBAFJ;AAAA,MAEnCW,QAFmC,aAEnCA,QAFmC;AAAA,MAEzBC,KAFyB,aAEzBA,KAFyB;AAAA,MAElBC,SAFkB,aAElBA,SAFkB;;AAG3C,sBAAO,oBAAC,wBAAD;AAA0B,IAAA,IAAI,EAAEF,QAAQ,CAACT,IAAzC;AAA+C,IAAA,KAAK,EAAEU,KAAtD;AAA6D,IAAA,SAAS,EAAEC,SAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAJD;;AAMA,eAAeJ,KAAf","sourcesContent":["import React, { FC } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { Table } from 'reactstrap';\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport { useFetch } from '../../hooks/useFetch';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\n\ninterface FlagMap {\n  [key: string]: string;\n}\n\ninterface FlagsProps {\n  data?: FlagMap;\n}\n\nexport const FlagsContent: FC<FlagsProps> = ({ data = {} }) => {\n  return (\n    <>\n      <h2>Command-Line Flags</h2>\n      <Table bordered size=\"sm\" striped>\n        <tbody>\n          {Object.keys(data).map(key => (\n            <tr key={key}>\n              <th>{key}</th>\n              <td>{data[key]}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\nconst FlagsWithStatusIndicator = withStatusIndicator(FlagsContent);\n\nFlagsContent.displayName = 'Flags';\n\nconst Flags: FC<RouteComponentProps> = () => {\n  const pathPrefix = usePathPrefix();\n  const { response, error, isLoading } = useFetch<FlagMap>(`${pathPrefix}/${API_PATH}/status/flags`);\n  return <FlagsWithStatusIndicator data={response.data} error={error} isLoading={isLoading} />;\n};\n\nexport default Flags;\n"]},"metadata":{},"sourceType":"module"}