{"ast":null,"code":"import _toConsumableArray from\"/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React from'react';import{useFetch}from'../../hooks/useFetch';import{groupTargets}from'./target';import ScrapePoolPanel from'./ScrapePoolPanel';import{withStatusIndicator}from'../../components/withStatusIndicator';import{usePathPrefix}from'../../contexts/PathPrefixContext';import{API_PATH}from'../../constants/constants';export var ScrapePoolContent=function ScrapePoolContent(_ref){var filter=_ref.filter,activeTargets=_ref.activeTargets;var targetGroups=groupTargets(activeTargets);var showHealthy=filter.showHealthy,showUnhealthy=filter.showUnhealthy;return/*#__PURE__*/React.createElement(React.Fragment,null,Object.keys(targetGroups).reduce(function(panels,scrapePool){var targetGroup=targetGroups[scrapePool];var isHealthy=targetGroup.upCount===targetGroup.targets.length;return isHealthy&&showHealthy||!isHealthy&&showUnhealthy?[].concat(_toConsumableArray(panels),[/*#__PURE__*/React.createElement(ScrapePoolPanel,{key:scrapePool,scrapePool:scrapePool,targetGroup:targetGroup})]):panels;},[]));};ScrapePoolContent.displayName='ScrapePoolContent';var ScrapePoolListWithStatusIndicator=withStatusIndicator(ScrapePoolContent);var ScrapePoolList=function ScrapePoolList(_ref2){var filter=_ref2.filter;var pathPrefix=usePathPrefix();var _useFetch=useFetch(\"\".concat(pathPrefix,\"/\").concat(API_PATH,\"/targets?state=active\")),response=_useFetch.response,error=_useFetch.error,isLoading=_useFetch.isLoading;var responseStatus=response.status;var badResponse=responseStatus!=='success'&&responseStatus!=='start fetching';return/*#__PURE__*/React.createElement(ScrapePoolListWithStatusIndicator,Object.assign({},response.data,{filter:filter,error:badResponse?new Error(responseStatus):error,isLoading:isLoading,componentTitle:\"Targets information\"}));};export default ScrapePoolList;","map":{"version":3,"sources":["/app/src/pages/targets/ScrapePoolList.tsx"],"names":["React","useFetch","groupTargets","ScrapePoolPanel","withStatusIndicator","usePathPrefix","API_PATH","ScrapePoolContent","filter","activeTargets","targetGroups","showHealthy","showUnhealthy","Object","keys","reduce","panels","scrapePool","targetGroup","isHealthy","upCount","targets","length","displayName","ScrapePoolListWithStatusIndicator","ScrapePoolList","pathPrefix","response","error","isLoading","responseStatus","status","badResponse","data","Error"],"mappings":"mIAAA,MAAOA,CAAAA,KAAP,KAA0B,OAA1B,CAEA,OAASC,QAAT,KAAyB,sBAAzB,CACA,OAASC,YAAT,KAAqC,UAArC,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,OAASC,mBAAT,KAAoC,sCAApC,CACA,OAASC,aAAT,KAA8B,kCAA9B,CACA,OAASC,QAAT,KAAyB,2BAAzB,CAOA,MAAO,IAAMC,CAAAA,iBAA0C,CAAG,QAA7CA,CAAAA,iBAA6C,MAA+B,IAA5BC,CAAAA,MAA4B,MAA5BA,MAA4B,CAApBC,aAAoB,MAApBA,aAAoB,CACvF,GAAMC,CAAAA,YAAY,CAAGR,YAAY,CAACO,aAAD,CAAjC,CADuF,GAE/EE,CAAAA,WAF+E,CAEhDH,MAFgD,CAE/EG,WAF+E,CAElEC,aAFkE,CAEhDJ,MAFgD,CAElEI,aAFkE,CAGvF,mBACE,wCACGC,MAAM,CAACC,IAAP,CAAYJ,YAAZ,EAA0BK,MAA1B,CAAgD,SAACC,MAAD,CAASC,UAAT,CAAwB,CACvE,GAAMC,CAAAA,WAAW,CAAGR,YAAY,CAACO,UAAD,CAAhC,CACA,GAAME,CAAAA,SAAS,CAAGD,WAAW,CAACE,OAAZ,GAAwBF,WAAW,CAACG,OAAZ,CAAoBC,MAA9D,CACA,MAAQH,CAAAA,SAAS,EAAIR,WAAd,EAA+B,CAACQ,SAAD,EAAcP,aAA7C,8BACCI,MADD,gBACS,oBAAC,eAAD,EAAiB,GAAG,CAAEC,UAAtB,CAAkC,UAAU,CAAEA,UAA9C,CAA0D,WAAW,CAAEC,WAAvE,EADT,GAEHF,MAFJ,CAGD,CANA,CAME,EANF,CADH,CADF,CAWD,CAdM,CAePT,iBAAiB,CAACgB,WAAlB,CAAgC,mBAAhC,CAEA,GAAMC,CAAAA,iCAAiC,CAAGpB,mBAAmB,CAACG,iBAAD,CAA7D,CAEA,GAAMkB,CAAAA,cAA0C,CAAG,QAA7CA,CAAAA,cAA6C,OAAgB,IAAbjB,CAAAA,MAAa,OAAbA,MAAa,CACjE,GAAMkB,CAAAA,UAAU,CAAGrB,aAAa,EAAhC,CADiE,cAE1BJ,QAAQ,WAAyByB,UAAzB,aAAuCpB,QAAvC,0BAFkB,CAEzDqB,QAFyD,WAEzDA,QAFyD,CAE/CC,KAF+C,WAE/CA,KAF+C,CAExCC,SAFwC,WAExCA,SAFwC,IAGjDC,CAAAA,cAHiD,CAG9BH,QAH8B,CAGzDI,MAHyD,CAIjE,GAAMC,CAAAA,WAAW,CAAGF,cAAc,GAAK,SAAnB,EAAgCA,cAAc,GAAK,gBAAvE,CACA,mBACE,oBAAC,iCAAD,kBACMH,QAAQ,CAACM,IADf,EAEE,MAAM,CAAEzB,MAFV,CAGE,KAAK,CAAEwB,WAAW,CAAG,GAAIE,CAAAA,KAAJ,CAAUJ,cAAV,CAAH,CAA+BF,KAHnD,CAIE,SAAS,CAAEC,SAJb,CAKE,cAAc,CAAC,qBALjB,GADF,CASD,CAdD,CAgBA,cAAeJ,CAAAA,cAAf","sourcesContent":["import React, { FC } from 'react';\nimport { FilterData } from './Filter';\nimport { useFetch } from '../../hooks/useFetch';\nimport { groupTargets, Target } from './target';\nimport ScrapePoolPanel from './ScrapePoolPanel';\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\n\ninterface ScrapePoolListProps {\n  filter: FilterData;\n  activeTargets: Target[];\n}\n\nexport const ScrapePoolContent: FC<ScrapePoolListProps> = ({ filter, activeTargets }) => {\n  const targetGroups = groupTargets(activeTargets);\n  const { showHealthy, showUnhealthy } = filter;\n  return (\n    <>\n      {Object.keys(targetGroups).reduce<JSX.Element[]>((panels, scrapePool) => {\n        const targetGroup = targetGroups[scrapePool];\n        const isHealthy = targetGroup.upCount === targetGroup.targets.length;\n        return (isHealthy && showHealthy) || (!isHealthy && showUnhealthy)\n          ? [...panels, <ScrapePoolPanel key={scrapePool} scrapePool={scrapePool} targetGroup={targetGroup} />]\n          : panels;\n      }, [])}\n    </>\n  );\n};\nScrapePoolContent.displayName = 'ScrapePoolContent';\n\nconst ScrapePoolListWithStatusIndicator = withStatusIndicator(ScrapePoolContent);\n\nconst ScrapePoolList: FC<{ filter: FilterData }> = ({ filter }) => {\n  const pathPrefix = usePathPrefix();\n  const { response, error, isLoading } = useFetch<ScrapePoolListProps>(`${pathPrefix}/${API_PATH}/targets?state=active`);\n  const { status: responseStatus } = response;\n  const badResponse = responseStatus !== 'success' && responseStatus !== 'start fetching';\n  return (\n    <ScrapePoolListWithStatusIndicator\n      {...response.data}\n      filter={filter}\n      error={badResponse ? new Error(responseStatus) : error}\n      isLoading={isLoading}\n      componentTitle=\"Targets information\"\n    />\n  );\n};\n\nexport default ScrapePoolList;\n"]},"metadata":{},"sourceType":"module"}