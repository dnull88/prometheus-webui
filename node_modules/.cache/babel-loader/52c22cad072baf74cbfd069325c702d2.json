{"ast":null,"code":"/**\n *\n * THIS FILE WAS COPIED INTO PROMETHEUS FROM GRAFANA'S VENDORED FORK OF FLOT\n * (LIVING AT https://github.com/grafana/grafana/tree/master/public/vendor/flot),\n * WHICH CONTAINS FIXES FOR DISPLAYING NULL VALUES IN STACKED GRAPHS. THE ORIGINAL\n * FLOT CODE WAS LICENSED UNDER THE MIT LICENSE AS STATED BELOW. ADDITIONAL\n * CHANGES HAVE BEEN CONTRIBUTED TO THE GRAFANA FORK UNDER AN APACHE 2 LICENSE, SEE\n * https://github.com/grafana/grafana/blob/master/license.\n *\n */\n\n/* eslint-disable prefer-rest-params */\n\n/* eslint-disable no-useless-concat */\n\n/* eslint-disable default-case */\n\n/* eslint-disable prefer-spread */\n\n/* eslint-disable no-loop-func */\n\n/* eslint-disable @typescript-eslint/no-this-alias */\n\n/* eslint-disable no-redeclare */\n\n/* eslint-disable no-useless-escape */\n\n/* eslint-disable prefer-const */\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\n/* eslint-disable eqeqeq */\n\n/* eslint-disable no-var */\n\n/* Pretty handling of time axes.\n\nCopyright (c) 2007-2013 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nSet axis.mode to \"time\" to enable. See the section \"Time series data\" in\nAPI.txt for details.\n\n*/\n(function ($) {\n  var options = {\n    xaxis: {\n      timezone: null,\n      // \"browser\" for local to the client or timezone for timezone-js\n      timeformat: null,\n      // format string to use\n      twelveHourClock: false,\n      // 12 or 24 time in time mode\n      monthNames: null // list of names of months\n\n    }\n  }; // round to nearby lower multiple of base\n\n  function floorInBase(n, base) {\n    return base * Math.floor(n / base);\n  } // Returns a string with the date d formatted according to fmt.\n  // A subset of the Open Group's strftime format is supported.\n\n\n  function formatDate(d, fmt, monthNames, dayNames) {\n    if (typeof d.strftime == 'function') {\n      return d.strftime(fmt);\n    }\n\n    var leftPad = function leftPad(n, pad) {\n      n = '' + n;\n      pad = '' + (pad == null ? '0' : pad);\n      return n.length == 1 ? pad + n : n;\n    };\n\n    var r = [];\n    var escape = false;\n    var hours = d.getHours();\n    var isAM = hours < 12;\n\n    if (monthNames == null) {\n      monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    }\n\n    if (dayNames == null) {\n      dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    }\n\n    var hours12;\n\n    if (hours > 12) {\n      hours12 = hours - 12;\n    } else if (hours == 0) {\n      hours12 = 12;\n    } else {\n      hours12 = hours;\n    }\n\n    for (var i = 0; i < fmt.length; ++i) {\n      var c = fmt.charAt(i);\n\n      if (escape) {\n        switch (c) {\n          case 'a':\n            c = '' + dayNames[d.getDay()];\n            break;\n\n          case 'b':\n            c = '' + monthNames[d.getMonth()];\n            break;\n\n          case 'd':\n            c = leftPad(d.getDate(), '');\n            break;\n\n          case 'e':\n            c = leftPad(d.getDate(), ' ');\n            break;\n\n          case 'h': // For back-compat with 0.7; remove in 1.0\n\n          case 'H':\n            c = leftPad(hours);\n            break;\n\n          case 'I':\n            c = leftPad(hours12);\n            break;\n\n          case 'l':\n            c = leftPad(hours12, ' ');\n            break;\n\n          case 'm':\n            c = leftPad(d.getMonth() + 1, '');\n            break;\n\n          case 'M':\n            c = leftPad(d.getMinutes());\n            break;\n          // quarters not in Open Group's strftime specification\n\n          case 'q':\n            c = '' + (Math.floor(d.getMonth() / 3) + 1);\n            break;\n\n          case 'S':\n            c = leftPad(d.getSeconds());\n            break;\n\n          case 'y':\n            c = leftPad(d.getFullYear() % 100);\n            break;\n\n          case 'Y':\n            c = '' + d.getFullYear();\n            break;\n\n          case 'p':\n            c = isAM ? '' + 'am' : '' + 'pm';\n            break;\n\n          case 'P':\n            c = isAM ? '' + 'AM' : '' + 'PM';\n            break;\n\n          case 'w':\n            c = '' + d.getDay();\n            break;\n        }\n\n        r.push(c);\n        escape = false;\n      } else {\n        if (c == '%') {\n          escape = true;\n        } else {\n          r.push(c);\n        }\n      }\n    }\n\n    return r.join('');\n  } // To have a consistent view of time-based data independent of which time\n  // zone the client happens to be in we need a date-like object independent\n  // of time zones.  This is done through a wrapper that only calls the UTC\n  // versions of the accessor methods.\n\n\n  function makeUtcWrapper(d) {\n    function addProxyMethod(sourceObj, sourceMethod, targetObj, targetMethod) {\n      sourceObj[sourceMethod] = function () {\n        return targetObj[targetMethod].apply(targetObj, arguments);\n      };\n    }\n\n    var utc = {\n      date: d\n    }; // support strftime, if found\n\n    if (d.strftime != undefined) {\n      addProxyMethod(utc, 'strftime', d, 'strftime');\n    }\n\n    addProxyMethod(utc, 'getTime', d, 'getTime');\n    addProxyMethod(utc, 'setTime', d, 'setTime');\n    var props = ['Date', 'Day', 'FullYear', 'Hours', 'Milliseconds', 'Minutes', 'Month', 'Seconds'];\n\n    for (var p = 0; p < props.length; p++) {\n      addProxyMethod(utc, 'get' + props[p], d, 'getUTC' + props[p]);\n      addProxyMethod(utc, 'set' + props[p], d, 'setUTC' + props[p]);\n    }\n\n    return utc;\n  } // select time zone strategy.  This returns a date-like object tied to the\n  // desired timezone\n\n\n  function dateGenerator(ts, opts) {\n    if (opts.timezone == 'browser') {\n      return new Date(ts);\n    } else if (!opts.timezone || opts.timezone == 'utc') {\n      return makeUtcWrapper(new Date(ts));\n    } // } else if (typeof timezoneJS != 'undefined' && typeof timezoneJS.Date != 'undefined') {\n    //   const d = new timezoneJS.Date();\n    //   // timezone-js is fickle, so be sure to set the time zone before\n    //   // setting the time.\n    //   d.setTimezone(opts.timezone);\n    //   d.setTime(ts);\n    //   return d;\n    // }\n\n\n    return makeUtcWrapper(new Date(ts));\n  } // map of app. size of time units in milliseconds\n\n\n  var timeUnitSize = {\n    second: 1000,\n    minute: 60 * 1000,\n    hour: 60 * 60 * 1000,\n    day: 24 * 60 * 60 * 1000,\n    month: 30 * 24 * 60 * 60 * 1000,\n    quarter: 3 * 30 * 24 * 60 * 60 * 1000,\n    year: 365.2425 * 24 * 60 * 60 * 1000\n  }; // the allowed tick sizes, after 1 year we use\n  // an integer algorithm\n\n  var baseSpec = [[1, 'second'], [2, 'second'], [5, 'second'], [10, 'second'], [30, 'second'], [1, 'minute'], [2, 'minute'], [5, 'minute'], [10, 'minute'], [30, 'minute'], [1, 'hour'], [2, 'hour'], [4, 'hour'], [8, 'hour'], [12, 'hour'], [1, 'day'], [2, 'day'], [3, 'day'], [0.25, 'month'], [0.5, 'month'], [1, 'month'], [2, 'month']]; // we don't know which variant(s) we'll need yet, but generating both is\n  // cheap\n\n  var specMonths = baseSpec.concat([[3, 'month'], [6, 'month'], [1, 'year']]);\n  var specQuarters = baseSpec.concat([[1, 'quarter'], [2, 'quarter'], [1, 'year']]);\n\n  function init(plot) {\n    plot.hooks.processOptions.push(function (plot) {\n      $.each(plot.getAxes(), function (axisName, axis) {\n        var opts = axis.options;\n\n        if (opts.mode == 'time') {\n          axis.tickGenerator = function (axis) {\n            var ticks = [];\n            var d = dateGenerator(axis.min, opts);\n            var minSize = 0; // make quarter use a possibility if quarters are\n            // mentioned in either of these options\n\n            var spec = opts.tickSize && opts.tickSize[1] === 'quarter' || opts.minTickSize && opts.minTickSize[1] === 'quarter' ? specQuarters : specMonths;\n\n            if (opts.minTickSize != null) {\n              if (typeof opts.tickSize == 'number') {\n                minSize = opts.tickSize;\n              } else {\n                minSize = opts.minTickSize[0] * timeUnitSize[opts.minTickSize[1]];\n              }\n            }\n\n            for (var i = 0; i < spec.length - 1; ++i) {\n              if (axis.delta < (spec[i][0] * timeUnitSize[spec[i][1]] + spec[i + 1][0] * timeUnitSize[spec[i + 1][1]]) / 2 && spec[i][0] * timeUnitSize[spec[i][1]] >= minSize) {\n                break;\n              }\n            }\n\n            var size = spec[i][0];\n            var unit = spec[i][1]; // special-case the possibility of several years\n\n            if (unit == 'year') {\n              // if given a minTickSize in years, just use it,\n              // ensuring that it's an integer\n              if (opts.minTickSize != null && opts.minTickSize[1] == 'year') {\n                size = Math.floor(opts.minTickSize[0]);\n              } else {\n                var magn = Math.pow(10, Math.floor(Math.log(axis.delta / timeUnitSize.year) / Math.LN10));\n                var norm = axis.delta / timeUnitSize.year / magn;\n\n                if (norm < 1.5) {\n                  size = 1;\n                } else if (norm < 3) {\n                  size = 2;\n                } else if (norm < 7.5) {\n                  size = 5;\n                } else {\n                  size = 10;\n                }\n\n                size *= magn;\n              } // minimum size for years is 1\n\n\n              if (size < 1) {\n                size = 1;\n              }\n            }\n\n            axis.tickSize = opts.tickSize || [size, unit];\n            var tickSize = axis.tickSize[0];\n            unit = axis.tickSize[1];\n            var step = tickSize * timeUnitSize[unit];\n\n            if (unit == 'second') {\n              d.setSeconds(floorInBase(d.getSeconds(), tickSize));\n            } else if (unit == 'minute') {\n              d.setMinutes(floorInBase(d.getMinutes(), tickSize));\n            } else if (unit == 'hour') {\n              d.setHours(floorInBase(d.getHours(), tickSize));\n            } else if (unit == 'month') {\n              d.setMonth(floorInBase(d.getMonth(), tickSize));\n            } else if (unit == 'quarter') {\n              d.setMonth(3 * floorInBase(d.getMonth() / 3, tickSize));\n            } else if (unit == 'year') {\n              d.setFullYear(floorInBase(d.getFullYear(), tickSize));\n            } // reset smaller components\n\n\n            d.setMilliseconds(0);\n\n            if (step >= timeUnitSize.minute) {\n              d.setSeconds(0);\n            }\n\n            if (step >= timeUnitSize.hour) {\n              d.setMinutes(0);\n            }\n\n            if (step >= timeUnitSize.day) {\n              d.setHours(0);\n            }\n\n            if (step >= timeUnitSize.day * 4) {\n              d.setDate(1);\n            }\n\n            if (step >= timeUnitSize.month * 2) {\n              d.setMonth(floorInBase(d.getMonth(), 3));\n            }\n\n            if (step >= timeUnitSize.quarter * 2) {\n              d.setMonth(floorInBase(d.getMonth(), 6));\n            }\n\n            if (step >= timeUnitSize.year) {\n              d.setMonth(0);\n            }\n\n            var carry = 0;\n            var v = Number.NaN;\n            var prev;\n\n            do {\n              prev = v;\n              v = d.getTime();\n              ticks.push(v);\n\n              if (unit == 'month' || unit == 'quarter') {\n                if (tickSize < 1) {\n                  // a bit complicated - we'll divide the\n                  // month/quarter up but we need to take\n                  // care of fractions so we don't end up in\n                  // the middle of a day\n                  d.setDate(1);\n                  var start = d.getTime();\n                  d.setMonth(d.getMonth() + (unit == 'quarter' ? 3 : 1));\n                  var end = d.getTime();\n                  d.setTime(v + carry * timeUnitSize.hour + (end - start) * tickSize);\n                  carry = d.getHours();\n                  d.setHours(0);\n                } else {\n                  d.setMonth(d.getMonth() + tickSize * (unit == 'quarter' ? 3 : 1));\n                }\n              } else if (unit == 'year') {\n                d.setFullYear(d.getFullYear() + tickSize);\n              } else {\n                d.setTime(v + step);\n              }\n            } while (v < axis.max && v != prev);\n\n            return ticks;\n          };\n\n          axis.tickFormatter = function (v, axis) {\n            var d = dateGenerator(v, axis.options); // first check global format\n\n            if (opts.timeformat != null) {\n              return formatDate(d, opts.timeformat, opts.monthNames, opts.dayNames);\n            } // possibly use quarters if quarters are mentioned in\n            // any of these places\n\n\n            var useQuarters = axis.options.tickSize && axis.options.tickSize[1] == 'quarter' || axis.options.minTickSize && axis.options.minTickSize[1] == 'quarter';\n            var t = axis.tickSize[0] * timeUnitSize[axis.tickSize[1]];\n            var span = axis.max - axis.min;\n            var suffix = opts.twelveHourClock ? ' %p' : '';\n            var hourCode = opts.twelveHourClock ? '%I' : '%H';\n            var fmt;\n\n            if (t < timeUnitSize.minute) {\n              fmt = hourCode + ':%M:%S' + suffix;\n            } else if (t < timeUnitSize.day) {\n              if (span < 2 * timeUnitSize.day) {\n                fmt = hourCode + ':%M' + suffix;\n              } else {\n                fmt = '%b %d ' + hourCode + ':%M' + suffix;\n              }\n            } else if (t < timeUnitSize.month) {\n              fmt = '%b %d';\n            } else if (useQuarters && t < timeUnitSize.quarter || !useQuarters && t < timeUnitSize.year) {\n              if (span < timeUnitSize.year) {\n                fmt = '%b';\n              } else {\n                fmt = '%b %Y';\n              }\n            } else if (useQuarters && t < timeUnitSize.year) {\n              if (span < timeUnitSize.year) {\n                fmt = 'Q%q';\n              } else {\n                fmt = 'Q%q %Y';\n              }\n            } else {\n              fmt = '%Y';\n            }\n\n            var rt = formatDate(d, fmt, opts.monthNames, opts.dayNames);\n            return rt;\n          };\n        }\n      });\n    });\n  }\n\n  $.plot.plugins.push({\n    init: init,\n    options: options,\n    name: 'time',\n    version: '1.0'\n  }); // Time-axis support used to be in Flot core, which exposed the\n  // formatDate function on the plot object.  Various plugins depend\n  // on the function, so we need to re-expose it here.\n\n  $.plot.formatDate = formatDate;\n})(window.jQuery);","map":{"version":3,"sources":["/app/src/vendor/flot/jquery.flot.time.js"],"names":["$","options","xaxis","timezone","timeformat","twelveHourClock","monthNames","floorInBase","n","base","Math","floor","formatDate","d","fmt","dayNames","strftime","leftPad","pad","length","r","escape","hours","getHours","isAM","hours12","i","c","charAt","getDay","getMonth","getDate","getMinutes","getSeconds","getFullYear","push","join","makeUtcWrapper","addProxyMethod","sourceObj","sourceMethod","targetObj","targetMethod","apply","arguments","utc","date","undefined","props","p","dateGenerator","ts","opts","Date","timeUnitSize","second","minute","hour","day","month","quarter","year","baseSpec","specMonths","concat","specQuarters","init","plot","hooks","processOptions","each","getAxes","axisName","axis","mode","tickGenerator","ticks","min","minSize","spec","tickSize","minTickSize","delta","size","unit","magn","pow","log","LN10","norm","step","setSeconds","setMinutes","setHours","setMonth","setFullYear","setMilliseconds","setDate","carry","v","Number","NaN","prev","getTime","start","end","setTime","max","tickFormatter","useQuarters","t","span","suffix","hourCode","rt","plugins","name","version","window","jQuery"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,CAAC,UAASA,CAAT,EAAY;AACX,MAAMC,OAAO,GAAG;AACdC,IAAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE,IADL;AACW;AAChBC,MAAAA,UAAU,EAAE,IAFP;AAEa;AAClBC,MAAAA,eAAe,EAAE,KAHZ;AAGmB;AACxBC,MAAAA,UAAU,EAAE,IAJP,CAIa;;AAJb;AADO,GAAhB,CADW,CAUX;;AAEA,WAASC,WAAT,CAAqBC,CAArB,EAAwBC,IAAxB,EAA8B;AAC5B,WAAOA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAGC,IAAf,CAAd;AACD,GAdU,CAgBX;AACA;;;AAEA,WAASG,UAAT,CAAoBC,CAApB,EAAuBC,GAAvB,EAA4BR,UAA5B,EAAwCS,QAAxC,EAAkD;AAChD,QAAI,OAAOF,CAAC,CAACG,QAAT,IAAqB,UAAzB,EAAqC;AACnC,aAAOH,CAAC,CAACG,QAAF,CAAWF,GAAX,CAAP;AACD;;AAED,QAAMG,OAAO,GAAG,SAAVA,OAAU,CAAST,CAAT,EAAYU,GAAZ,EAAiB;AAC/BV,MAAAA,CAAC,GAAG,KAAKA,CAAT;AACAU,MAAAA,GAAG,GAAG,MAAMA,GAAG,IAAI,IAAP,GAAc,GAAd,GAAoBA,GAA1B,CAAN;AACA,aAAOV,CAAC,CAACW,MAAF,IAAY,CAAZ,GAAgBD,GAAG,GAAGV,CAAtB,GAA0BA,CAAjC;AACD,KAJD;;AAMA,QAAMY,CAAC,GAAG,EAAV;AACA,QAAIC,MAAM,GAAG,KAAb;AACA,QAAMC,KAAK,GAAGT,CAAC,CAACU,QAAF,EAAd;AACA,QAAMC,IAAI,GAAGF,KAAK,GAAG,EAArB;;AAEA,QAAIhB,UAAU,IAAI,IAAlB,EAAwB;AACtBA,MAAAA,UAAU,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,CAAb;AACD;;AAED,QAAIS,QAAQ,IAAI,IAAhB,EAAsB;AACpBA,MAAAA,QAAQ,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAAX;AACD;;AAED,QAAIU,OAAJ;;AAEA,QAAIH,KAAK,GAAG,EAAZ,EAAgB;AACdG,MAAAA,OAAO,GAAGH,KAAK,GAAG,EAAlB;AACD,KAFD,MAEO,IAAIA,KAAK,IAAI,CAAb,EAAgB;AACrBG,MAAAA,OAAO,GAAG,EAAV;AACD,KAFM,MAEA;AACLA,MAAAA,OAAO,GAAGH,KAAV;AACD;;AAED,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,GAAG,CAACK,MAAxB,EAAgC,EAAEO,CAAlC,EAAqC;AACnC,UAAIC,CAAC,GAAGb,GAAG,CAACc,MAAJ,CAAWF,CAAX,CAAR;;AAEA,UAAIL,MAAJ,EAAY;AACV,gBAAQM,CAAR;AACE,eAAK,GAAL;AACEA,YAAAA,CAAC,GAAG,KAAKZ,QAAQ,CAACF,CAAC,CAACgB,MAAF,EAAD,CAAjB;AACA;;AACF,eAAK,GAAL;AACEF,YAAAA,CAAC,GAAG,KAAKrB,UAAU,CAACO,CAAC,CAACiB,QAAF,EAAD,CAAnB;AACA;;AACF,eAAK,GAAL;AACEH,YAAAA,CAAC,GAAGV,OAAO,CAACJ,CAAC,CAACkB,OAAF,EAAD,EAAc,EAAd,CAAX;AACA;;AACF,eAAK,GAAL;AACEJ,YAAAA,CAAC,GAAGV,OAAO,CAACJ,CAAC,CAACkB,OAAF,EAAD,EAAc,GAAd,CAAX;AACA;;AACF,eAAK,GAAL,CAbF,CAaY;;AACV,eAAK,GAAL;AACEJ,YAAAA,CAAC,GAAGV,OAAO,CAACK,KAAD,CAAX;AACA;;AACF,eAAK,GAAL;AACEK,YAAAA,CAAC,GAAGV,OAAO,CAACQ,OAAD,CAAX;AACA;;AACF,eAAK,GAAL;AACEE,YAAAA,CAAC,GAAGV,OAAO,CAACQ,OAAD,EAAU,GAAV,CAAX;AACA;;AACF,eAAK,GAAL;AACEE,YAAAA,CAAC,GAAGV,OAAO,CAACJ,CAAC,CAACiB,QAAF,KAAe,CAAhB,EAAmB,EAAnB,CAAX;AACA;;AACF,eAAK,GAAL;AACEH,YAAAA,CAAC,GAAGV,OAAO,CAACJ,CAAC,CAACmB,UAAF,EAAD,CAAX;AACA;AACF;;AACA,eAAK,GAAL;AACEL,YAAAA,CAAC,GAAG,MAAMjB,IAAI,CAACC,KAAL,CAAWE,CAAC,CAACiB,QAAF,KAAe,CAA1B,IAA+B,CAArC,CAAJ;AACA;;AACF,eAAK,GAAL;AACEH,YAAAA,CAAC,GAAGV,OAAO,CAACJ,CAAC,CAACoB,UAAF,EAAD,CAAX;AACA;;AACF,eAAK,GAAL;AACEN,YAAAA,CAAC,GAAGV,OAAO,CAACJ,CAAC,CAACqB,WAAF,KAAkB,GAAnB,CAAX;AACA;;AACF,eAAK,GAAL;AACEP,YAAAA,CAAC,GAAG,KAAKd,CAAC,CAACqB,WAAF,EAAT;AACA;;AACF,eAAK,GAAL;AACEP,YAAAA,CAAC,GAAGH,IAAI,GAAG,KAAK,IAAR,GAAe,KAAK,IAA5B;AACA;;AACF,eAAK,GAAL;AACEG,YAAAA,CAAC,GAAGH,IAAI,GAAG,KAAK,IAAR,GAAe,KAAK,IAA5B;AACA;;AACF,eAAK,GAAL;AACEG,YAAAA,CAAC,GAAG,KAAKd,CAAC,CAACgB,MAAF,EAAT;AACA;AAlDJ;;AAoDAT,QAAAA,CAAC,CAACe,IAAF,CAAOR,CAAP;AACAN,QAAAA,MAAM,GAAG,KAAT;AACD,OAvDD,MAuDO;AACL,YAAIM,CAAC,IAAI,GAAT,EAAc;AACZN,UAAAA,MAAM,GAAG,IAAT;AACD,SAFD,MAEO;AACLD,UAAAA,CAAC,CAACe,IAAF,CAAOR,CAAP;AACD;AACF;AACF;;AAED,WAAOP,CAAC,CAACgB,IAAF,CAAO,EAAP,CAAP;AACD,GAzHU,CA2HX;AACA;AACA;AACA;;;AAEA,WAASC,cAAT,CAAwBxB,CAAxB,EAA2B;AACzB,aAASyB,cAAT,CAAwBC,SAAxB,EAAmCC,YAAnC,EAAiDC,SAAjD,EAA4DC,YAA5D,EAA0E;AACxEH,MAAAA,SAAS,CAACC,YAAD,CAAT,GAA0B,YAAW;AACnC,eAAOC,SAAS,CAACC,YAAD,CAAT,CAAwBC,KAAxB,CAA8BF,SAA9B,EAAyCG,SAAzC,CAAP;AACD,OAFD;AAGD;;AAED,QAAMC,GAAG,GAAG;AACVC,MAAAA,IAAI,EAAEjC;AADI,KAAZ,CAPyB,CAWzB;;AAEA,QAAIA,CAAC,CAACG,QAAF,IAAc+B,SAAlB,EAA6B;AAC3BT,MAAAA,cAAc,CAACO,GAAD,EAAM,UAAN,EAAkBhC,CAAlB,EAAqB,UAArB,CAAd;AACD;;AAEDyB,IAAAA,cAAc,CAACO,GAAD,EAAM,SAAN,EAAiBhC,CAAjB,EAAoB,SAApB,CAAd;AACAyB,IAAAA,cAAc,CAACO,GAAD,EAAM,SAAN,EAAiBhC,CAAjB,EAAoB,SAApB,CAAd;AAEA,QAAMmC,KAAK,GAAG,CAAC,MAAD,EAAS,KAAT,EAAgB,UAAhB,EAA4B,OAA5B,EAAqC,cAArC,EAAqD,SAArD,EAAgE,OAAhE,EAAyE,SAAzE,CAAd;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAAC7B,MAA1B,EAAkC8B,CAAC,EAAnC,EAAuC;AACrCX,MAAAA,cAAc,CAACO,GAAD,EAAM,QAAQG,KAAK,CAACC,CAAD,CAAnB,EAAwBpC,CAAxB,EAA2B,WAAWmC,KAAK,CAACC,CAAD,CAA3C,CAAd;AACAX,MAAAA,cAAc,CAACO,GAAD,EAAM,QAAQG,KAAK,CAACC,CAAD,CAAnB,EAAwBpC,CAAxB,EAA2B,WAAWmC,KAAK,CAACC,CAAD,CAA3C,CAAd;AACD;;AAED,WAAOJ,GAAP;AACD,GA5JU,CA8JX;AACA;;;AAEA,WAASK,aAAT,CAAuBC,EAAvB,EAA2BC,IAA3B,EAAiC;AAC/B,QAAIA,IAAI,CAACjD,QAAL,IAAiB,SAArB,EAAgC;AAC9B,aAAO,IAAIkD,IAAJ,CAASF,EAAT,CAAP;AACD,KAFD,MAEO,IAAI,CAACC,IAAI,CAACjD,QAAN,IAAkBiD,IAAI,CAACjD,QAAL,IAAiB,KAAvC,EAA8C;AACnD,aAAOkC,cAAc,CAAC,IAAIgB,IAAJ,CAASF,EAAT,CAAD,CAArB;AACD,KAL8B,CAM/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAAOd,cAAc,CAAC,IAAIgB,IAAJ,CAASF,EAAT,CAAD,CAArB;AACD,GAhLU,CAkLX;;;AAEA,MAAMG,YAAY,GAAG;AACnBC,IAAAA,MAAM,EAAE,IADW;AAEnBC,IAAAA,MAAM,EAAE,KAAK,IAFM;AAGnBC,IAAAA,IAAI,EAAE,KAAK,EAAL,GAAU,IAHG;AAInBC,IAAAA,GAAG,EAAE,KAAK,EAAL,GAAU,EAAV,GAAe,IAJD;AAKnBC,IAAAA,KAAK,EAAE,KAAK,EAAL,GAAU,EAAV,GAAe,EAAf,GAAoB,IALR;AAMnBC,IAAAA,OAAO,EAAE,IAAI,EAAJ,GAAS,EAAT,GAAc,EAAd,GAAmB,EAAnB,GAAwB,IANd;AAOnBC,IAAAA,IAAI,EAAE,WAAW,EAAX,GAAgB,EAAhB,GAAqB,EAArB,GAA0B;AAPb,GAArB,CApLW,CA8LX;AACA;;AAEA,MAAMC,QAAQ,GAAG,CACf,CAAC,CAAD,EAAI,QAAJ,CADe,EAEf,CAAC,CAAD,EAAI,QAAJ,CAFe,EAGf,CAAC,CAAD,EAAI,QAAJ,CAHe,EAIf,CAAC,EAAD,EAAK,QAAL,CAJe,EAKf,CAAC,EAAD,EAAK,QAAL,CALe,EAMf,CAAC,CAAD,EAAI,QAAJ,CANe,EAOf,CAAC,CAAD,EAAI,QAAJ,CAPe,EAQf,CAAC,CAAD,EAAI,QAAJ,CARe,EASf,CAAC,EAAD,EAAK,QAAL,CATe,EAUf,CAAC,EAAD,EAAK,QAAL,CAVe,EAWf,CAAC,CAAD,EAAI,MAAJ,CAXe,EAYf,CAAC,CAAD,EAAI,MAAJ,CAZe,EAaf,CAAC,CAAD,EAAI,MAAJ,CAbe,EAcf,CAAC,CAAD,EAAI,MAAJ,CAde,EAef,CAAC,EAAD,EAAK,MAAL,CAfe,EAgBf,CAAC,CAAD,EAAI,KAAJ,CAhBe,EAiBf,CAAC,CAAD,EAAI,KAAJ,CAjBe,EAkBf,CAAC,CAAD,EAAI,KAAJ,CAlBe,EAmBf,CAAC,IAAD,EAAO,OAAP,CAnBe,EAoBf,CAAC,GAAD,EAAM,OAAN,CApBe,EAqBf,CAAC,CAAD,EAAI,OAAJ,CArBe,EAsBf,CAAC,CAAD,EAAI,OAAJ,CAtBe,CAAjB,CAjMW,CA0NX;AACA;;AAEA,MAAMC,UAAU,GAAGD,QAAQ,CAACE,MAAT,CAAgB,CAAC,CAAC,CAAD,EAAI,OAAJ,CAAD,EAAe,CAAC,CAAD,EAAI,OAAJ,CAAf,EAA6B,CAAC,CAAD,EAAI,MAAJ,CAA7B,CAAhB,CAAnB;AACA,MAAMC,YAAY,GAAGH,QAAQ,CAACE,MAAT,CAAgB,CAAC,CAAC,CAAD,EAAI,SAAJ,CAAD,EAAiB,CAAC,CAAD,EAAI,SAAJ,CAAjB,EAAiC,CAAC,CAAD,EAAI,MAAJ,CAAjC,CAAhB,CAArB;;AAEA,WAASE,IAAT,CAAcC,IAAd,EAAoB;AAClBA,IAAAA,IAAI,CAACC,KAAL,CAAWC,cAAX,CAA0BlC,IAA1B,CAA+B,UAASgC,IAAT,EAAe;AAC5CnE,MAAAA,CAAC,CAACsE,IAAF,CAAOH,IAAI,CAACI,OAAL,EAAP,EAAuB,UAASC,QAAT,EAAmBC,IAAnB,EAAyB;AAC9C,YAAMrB,IAAI,GAAGqB,IAAI,CAACxE,OAAlB;;AAEA,YAAImD,IAAI,CAACsB,IAAL,IAAa,MAAjB,EAAyB;AACvBD,UAAAA,IAAI,CAACE,aAAL,GAAqB,UAASF,IAAT,EAAe;AAClC,gBAAMG,KAAK,GAAG,EAAd;AACA,gBAAM/D,CAAC,GAAGqC,aAAa,CAACuB,IAAI,CAACI,GAAN,EAAWzB,IAAX,CAAvB;AACA,gBAAI0B,OAAO,GAAG,CAAd,CAHkC,CAKlC;AACA;;AAEA,gBAAMC,IAAI,GACP3B,IAAI,CAAC4B,QAAL,IAAiB5B,IAAI,CAAC4B,QAAL,CAAc,CAAd,MAAqB,SAAvC,IAAsD5B,IAAI,CAAC6B,WAAL,IAAoB7B,IAAI,CAAC6B,WAAL,CAAiB,CAAjB,MAAwB,SAAlG,GACIhB,YADJ,GAEIF,UAHN;;AAKA,gBAAIX,IAAI,CAAC6B,WAAL,IAAoB,IAAxB,EAA8B;AAC5B,kBAAI,OAAO7B,IAAI,CAAC4B,QAAZ,IAAwB,QAA5B,EAAsC;AACpCF,gBAAAA,OAAO,GAAG1B,IAAI,CAAC4B,QAAf;AACD,eAFD,MAEO;AACLF,gBAAAA,OAAO,GAAG1B,IAAI,CAAC6B,WAAL,CAAiB,CAAjB,IAAsB3B,YAAY,CAACF,IAAI,CAAC6B,WAAL,CAAiB,CAAjB,CAAD,CAA5C;AACD;AACF;;AAED,iBAAK,IAAIvD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqD,IAAI,CAAC5D,MAAL,GAAc,CAAlC,EAAqC,EAAEO,CAAvC,EAA0C;AACxC,kBACE+C,IAAI,CAACS,KAAL,GAAa,CAACH,IAAI,CAACrD,CAAD,CAAJ,CAAQ,CAAR,IAAa4B,YAAY,CAACyB,IAAI,CAACrD,CAAD,CAAJ,CAAQ,CAAR,CAAD,CAAzB,GAAwCqD,IAAI,CAACrD,CAAC,GAAG,CAAL,CAAJ,CAAY,CAAZ,IAAiB4B,YAAY,CAACyB,IAAI,CAACrD,CAAC,GAAG,CAAL,CAAJ,CAAY,CAAZ,CAAD,CAAtE,IAA0F,CAAvG,IACAqD,IAAI,CAACrD,CAAD,CAAJ,CAAQ,CAAR,IAAa4B,YAAY,CAACyB,IAAI,CAACrD,CAAD,CAAJ,CAAQ,CAAR,CAAD,CAAzB,IAAyCoD,OAF3C,EAGE;AACA;AACD;AACF;;AAED,gBAAIK,IAAI,GAAGJ,IAAI,CAACrD,CAAD,CAAJ,CAAQ,CAAR,CAAX;AACA,gBAAI0D,IAAI,GAAGL,IAAI,CAACrD,CAAD,CAAJ,CAAQ,CAAR,CAAX,CA/BkC,CAiClC;;AAEA,gBAAI0D,IAAI,IAAI,MAAZ,EAAoB;AAClB;AACA;AAEA,kBAAIhC,IAAI,CAAC6B,WAAL,IAAoB,IAApB,IAA4B7B,IAAI,CAAC6B,WAAL,CAAiB,CAAjB,KAAuB,MAAvD,EAA+D;AAC7DE,gBAAAA,IAAI,GAAGzE,IAAI,CAACC,KAAL,CAAWyC,IAAI,CAAC6B,WAAL,CAAiB,CAAjB,CAAX,CAAP;AACD,eAFD,MAEO;AACL,oBAAMI,IAAI,GAAG3E,IAAI,CAAC4E,GAAL,CAAS,EAAT,EAAa5E,IAAI,CAACC,KAAL,CAAWD,IAAI,CAAC6E,GAAL,CAASd,IAAI,CAACS,KAAL,GAAa5B,YAAY,CAACO,IAAnC,IAA2CnD,IAAI,CAAC8E,IAA3D,CAAb,CAAb;AACA,oBAAMC,IAAI,GAAGhB,IAAI,CAACS,KAAL,GAAa5B,YAAY,CAACO,IAA1B,GAAiCwB,IAA9C;;AAEA,oBAAII,IAAI,GAAG,GAAX,EAAgB;AACdN,kBAAAA,IAAI,GAAG,CAAP;AACD,iBAFD,MAEO,IAAIM,IAAI,GAAG,CAAX,EAAc;AACnBN,kBAAAA,IAAI,GAAG,CAAP;AACD,iBAFM,MAEA,IAAIM,IAAI,GAAG,GAAX,EAAgB;AACrBN,kBAAAA,IAAI,GAAG,CAAP;AACD,iBAFM,MAEA;AACLA,kBAAAA,IAAI,GAAG,EAAP;AACD;;AAEDA,gBAAAA,IAAI,IAAIE,IAAR;AACD,eArBiB,CAuBlB;;;AAEA,kBAAIF,IAAI,GAAG,CAAX,EAAc;AACZA,gBAAAA,IAAI,GAAG,CAAP;AACD;AACF;;AAEDV,YAAAA,IAAI,CAACO,QAAL,GAAgB5B,IAAI,CAAC4B,QAAL,IAAiB,CAACG,IAAD,EAAOC,IAAP,CAAjC;AACA,gBAAMJ,QAAQ,GAAGP,IAAI,CAACO,QAAL,CAAc,CAAd,CAAjB;AACAI,YAAAA,IAAI,GAAGX,IAAI,CAACO,QAAL,CAAc,CAAd,CAAP;AAEA,gBAAMU,IAAI,GAAGV,QAAQ,GAAG1B,YAAY,CAAC8B,IAAD,CAApC;;AAEA,gBAAIA,IAAI,IAAI,QAAZ,EAAsB;AACpBvE,cAAAA,CAAC,CAAC8E,UAAF,CAAapF,WAAW,CAACM,CAAC,CAACoB,UAAF,EAAD,EAAiB+C,QAAjB,CAAxB;AACD,aAFD,MAEO,IAAII,IAAI,IAAI,QAAZ,EAAsB;AAC3BvE,cAAAA,CAAC,CAAC+E,UAAF,CAAarF,WAAW,CAACM,CAAC,CAACmB,UAAF,EAAD,EAAiBgD,QAAjB,CAAxB;AACD,aAFM,MAEA,IAAII,IAAI,IAAI,MAAZ,EAAoB;AACzBvE,cAAAA,CAAC,CAACgF,QAAF,CAAWtF,WAAW,CAACM,CAAC,CAACU,QAAF,EAAD,EAAeyD,QAAf,CAAtB;AACD,aAFM,MAEA,IAAII,IAAI,IAAI,OAAZ,EAAqB;AAC1BvE,cAAAA,CAAC,CAACiF,QAAF,CAAWvF,WAAW,CAACM,CAAC,CAACiB,QAAF,EAAD,EAAekD,QAAf,CAAtB;AACD,aAFM,MAEA,IAAII,IAAI,IAAI,SAAZ,EAAuB;AAC5BvE,cAAAA,CAAC,CAACiF,QAAF,CAAW,IAAIvF,WAAW,CAACM,CAAC,CAACiB,QAAF,KAAe,CAAhB,EAAmBkD,QAAnB,CAA1B;AACD,aAFM,MAEA,IAAII,IAAI,IAAI,MAAZ,EAAoB;AACzBvE,cAAAA,CAAC,CAACkF,WAAF,CAAcxF,WAAW,CAACM,CAAC,CAACqB,WAAF,EAAD,EAAkB8C,QAAlB,CAAzB;AACD,aAnFiC,CAqFlC;;;AAEAnE,YAAAA,CAAC,CAACmF,eAAF,CAAkB,CAAlB;;AAEA,gBAAIN,IAAI,IAAIpC,YAAY,CAACE,MAAzB,EAAiC;AAC/B3C,cAAAA,CAAC,CAAC8E,UAAF,CAAa,CAAb;AACD;;AACD,gBAAID,IAAI,IAAIpC,YAAY,CAACG,IAAzB,EAA+B;AAC7B5C,cAAAA,CAAC,CAAC+E,UAAF,CAAa,CAAb;AACD;;AACD,gBAAIF,IAAI,IAAIpC,YAAY,CAACI,GAAzB,EAA8B;AAC5B7C,cAAAA,CAAC,CAACgF,QAAF,CAAW,CAAX;AACD;;AACD,gBAAIH,IAAI,IAAIpC,YAAY,CAACI,GAAb,GAAmB,CAA/B,EAAkC;AAChC7C,cAAAA,CAAC,CAACoF,OAAF,CAAU,CAAV;AACD;;AACD,gBAAIP,IAAI,IAAIpC,YAAY,CAACK,KAAb,GAAqB,CAAjC,EAAoC;AAClC9C,cAAAA,CAAC,CAACiF,QAAF,CAAWvF,WAAW,CAACM,CAAC,CAACiB,QAAF,EAAD,EAAe,CAAf,CAAtB;AACD;;AACD,gBAAI4D,IAAI,IAAIpC,YAAY,CAACM,OAAb,GAAuB,CAAnC,EAAsC;AACpC/C,cAAAA,CAAC,CAACiF,QAAF,CAAWvF,WAAW,CAACM,CAAC,CAACiB,QAAF,EAAD,EAAe,CAAf,CAAtB;AACD;;AACD,gBAAI4D,IAAI,IAAIpC,YAAY,CAACO,IAAzB,EAA+B;AAC7BhD,cAAAA,CAAC,CAACiF,QAAF,CAAW,CAAX;AACD;;AAED,gBAAII,KAAK,GAAG,CAAZ;AACA,gBAAIC,CAAC,GAAGC,MAAM,CAACC,GAAf;AACA,gBAAIC,IAAJ;;AAEA,eAAG;AACDA,cAAAA,IAAI,GAAGH,CAAP;AACAA,cAAAA,CAAC,GAAGtF,CAAC,CAAC0F,OAAF,EAAJ;AACA3B,cAAAA,KAAK,CAACzC,IAAN,CAAWgE,CAAX;;AAEA,kBAAIf,IAAI,IAAI,OAAR,IAAmBA,IAAI,IAAI,SAA/B,EAA0C;AACxC,oBAAIJ,QAAQ,GAAG,CAAf,EAAkB;AAChB;AACA;AACA;AACA;AAEAnE,kBAAAA,CAAC,CAACoF,OAAF,CAAU,CAAV;AACA,sBAAMO,KAAK,GAAG3F,CAAC,CAAC0F,OAAF,EAAd;AACA1F,kBAAAA,CAAC,CAACiF,QAAF,CAAWjF,CAAC,CAACiB,QAAF,MAAgBsD,IAAI,IAAI,SAAR,GAAoB,CAApB,GAAwB,CAAxC,CAAX;AACA,sBAAMqB,GAAG,GAAG5F,CAAC,CAAC0F,OAAF,EAAZ;AACA1F,kBAAAA,CAAC,CAAC6F,OAAF,CAAUP,CAAC,GAAGD,KAAK,GAAG5C,YAAY,CAACG,IAAzB,GAAgC,CAACgD,GAAG,GAAGD,KAAP,IAAgBxB,QAA1D;AACAkB,kBAAAA,KAAK,GAAGrF,CAAC,CAACU,QAAF,EAAR;AACAV,kBAAAA,CAAC,CAACgF,QAAF,CAAW,CAAX;AACD,iBAbD,MAaO;AACLhF,kBAAAA,CAAC,CAACiF,QAAF,CAAWjF,CAAC,CAACiB,QAAF,KAAekD,QAAQ,IAAII,IAAI,IAAI,SAAR,GAAoB,CAApB,GAAwB,CAA5B,CAAlC;AACD;AACF,eAjBD,MAiBO,IAAIA,IAAI,IAAI,MAAZ,EAAoB;AACzBvE,gBAAAA,CAAC,CAACkF,WAAF,CAAclF,CAAC,CAACqB,WAAF,KAAkB8C,QAAhC;AACD,eAFM,MAEA;AACLnE,gBAAAA,CAAC,CAAC6F,OAAF,CAAUP,CAAC,GAAGT,IAAd;AACD;AACF,aA3BD,QA2BSS,CAAC,GAAG1B,IAAI,CAACkC,GAAT,IAAgBR,CAAC,IAAIG,IA3B9B;;AA6BA,mBAAO1B,KAAP;AACD,WAjJD;;AAmJAH,UAAAA,IAAI,CAACmC,aAAL,GAAqB,UAAST,CAAT,EAAY1B,IAAZ,EAAkB;AACrC,gBAAM5D,CAAC,GAAGqC,aAAa,CAACiD,CAAD,EAAI1B,IAAI,CAACxE,OAAT,CAAvB,CADqC,CAGrC;;AAEA,gBAAImD,IAAI,CAAChD,UAAL,IAAmB,IAAvB,EAA6B;AAC3B,qBAAOQ,UAAU,CAACC,CAAD,EAAIuC,IAAI,CAAChD,UAAT,EAAqBgD,IAAI,CAAC9C,UAA1B,EAAsC8C,IAAI,CAACrC,QAA3C,CAAjB;AACD,aAPoC,CASrC;AACA;;;AAEA,gBAAM8F,WAAW,GACdpC,IAAI,CAACxE,OAAL,CAAa+E,QAAb,IAAyBP,IAAI,CAACxE,OAAL,CAAa+E,QAAb,CAAsB,CAAtB,KAA4B,SAAtD,IACCP,IAAI,CAACxE,OAAL,CAAagF,WAAb,IAA4BR,IAAI,CAACxE,OAAL,CAAagF,WAAb,CAAyB,CAAzB,KAA+B,SAF9D;AAIA,gBAAM6B,CAAC,GAAGrC,IAAI,CAACO,QAAL,CAAc,CAAd,IAAmB1B,YAAY,CAACmB,IAAI,CAACO,QAAL,CAAc,CAAd,CAAD,CAAzC;AACA,gBAAM+B,IAAI,GAAGtC,IAAI,CAACkC,GAAL,GAAWlC,IAAI,CAACI,GAA7B;AACA,gBAAMmC,MAAM,GAAG5D,IAAI,CAAC/C,eAAL,GAAuB,KAAvB,GAA+B,EAA9C;AACA,gBAAM4G,QAAQ,GAAG7D,IAAI,CAAC/C,eAAL,GAAuB,IAAvB,GAA8B,IAA/C;AACA,gBAAIS,GAAJ;;AAEA,gBAAIgG,CAAC,GAAGxD,YAAY,CAACE,MAArB,EAA6B;AAC3B1C,cAAAA,GAAG,GAAGmG,QAAQ,GAAG,QAAX,GAAsBD,MAA5B;AACD,aAFD,MAEO,IAAIF,CAAC,GAAGxD,YAAY,CAACI,GAArB,EAA0B;AAC/B,kBAAIqD,IAAI,GAAG,IAAIzD,YAAY,CAACI,GAA5B,EAAiC;AAC/B5C,gBAAAA,GAAG,GAAGmG,QAAQ,GAAG,KAAX,GAAmBD,MAAzB;AACD,eAFD,MAEO;AACLlG,gBAAAA,GAAG,GAAG,WAAWmG,QAAX,GAAsB,KAAtB,GAA8BD,MAApC;AACD;AACF,aANM,MAMA,IAAIF,CAAC,GAAGxD,YAAY,CAACK,KAArB,EAA4B;AACjC7C,cAAAA,GAAG,GAAG,OAAN;AACD,aAFM,MAEA,IAAK+F,WAAW,IAAIC,CAAC,GAAGxD,YAAY,CAACM,OAAjC,IAA8C,CAACiD,WAAD,IAAgBC,CAAC,GAAGxD,YAAY,CAACO,IAAnF,EAA0F;AAC/F,kBAAIkD,IAAI,GAAGzD,YAAY,CAACO,IAAxB,EAA8B;AAC5B/C,gBAAAA,GAAG,GAAG,IAAN;AACD,eAFD,MAEO;AACLA,gBAAAA,GAAG,GAAG,OAAN;AACD;AACF,aANM,MAMA,IAAI+F,WAAW,IAAIC,CAAC,GAAGxD,YAAY,CAACO,IAApC,EAA0C;AAC/C,kBAAIkD,IAAI,GAAGzD,YAAY,CAACO,IAAxB,EAA8B;AAC5B/C,gBAAAA,GAAG,GAAG,KAAN;AACD,eAFD,MAEO;AACLA,gBAAAA,GAAG,GAAG,QAAN;AACD;AACF,aANM,MAMA;AACLA,cAAAA,GAAG,GAAG,IAAN;AACD;;AAED,gBAAMoG,EAAE,GAAGtG,UAAU,CAACC,CAAD,EAAIC,GAAJ,EAASsC,IAAI,CAAC9C,UAAd,EAA0B8C,IAAI,CAACrC,QAA/B,CAArB;AAEA,mBAAOmG,EAAP;AACD,WAnDD;AAoDD;AACF,OA5MD;AA6MD,KA9MD;AA+MD;;AAEDlH,EAAAA,CAAC,CAACmE,IAAF,CAAOgD,OAAP,CAAehF,IAAf,CAAoB;AAClB+B,IAAAA,IAAI,EAAEA,IADY;AAElBjE,IAAAA,OAAO,EAAEA,OAFS;AAGlBmH,IAAAA,IAAI,EAAE,MAHY;AAIlBC,IAAAA,OAAO,EAAE;AAJS,GAApB,EAlbW,CAybX;AACA;AACA;;AAEArH,EAAAA,CAAC,CAACmE,IAAF,CAAOvD,UAAP,GAAoBA,UAApB;AACD,CA9bD,EA8bG0G,MAAM,CAACC,MA9bV","sourcesContent":["/**\n *\n * THIS FILE WAS COPIED INTO PROMETHEUS FROM GRAFANA'S VENDORED FORK OF FLOT\n * (LIVING AT https://github.com/grafana/grafana/tree/master/public/vendor/flot),\n * WHICH CONTAINS FIXES FOR DISPLAYING NULL VALUES IN STACKED GRAPHS. THE ORIGINAL\n * FLOT CODE WAS LICENSED UNDER THE MIT LICENSE AS STATED BELOW. ADDITIONAL\n * CHANGES HAVE BEEN CONTRIBUTED TO THE GRAFANA FORK UNDER AN APACHE 2 LICENSE, SEE\n * https://github.com/grafana/grafana/blob/master/license.\n *\n */\n\n/* eslint-disable prefer-rest-params */\n/* eslint-disable no-useless-concat */\n/* eslint-disable default-case */\n/* eslint-disable prefer-spread */\n/* eslint-disable no-loop-func */\n/* eslint-disable @typescript-eslint/no-this-alias */\n/* eslint-disable no-redeclare */\n/* eslint-disable no-useless-escape */\n/* eslint-disable prefer-const */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable eqeqeq */\n/* eslint-disable no-var */\n\n/* Pretty handling of time axes.\n\nCopyright (c) 2007-2013 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nSet axis.mode to \"time\" to enable. See the section \"Time series data\" in\nAPI.txt for details.\n\n*/\n\n(function($) {\n  const options = {\n    xaxis: {\n      timezone: null, // \"browser\" for local to the client or timezone for timezone-js\n      timeformat: null, // format string to use\n      twelveHourClock: false, // 12 or 24 time in time mode\n      monthNames: null, // list of names of months\n    },\n  };\n\n  // round to nearby lower multiple of base\n\n  function floorInBase(n, base) {\n    return base * Math.floor(n / base);\n  }\n\n  // Returns a string with the date d formatted according to fmt.\n  // A subset of the Open Group's strftime format is supported.\n\n  function formatDate(d, fmt, monthNames, dayNames) {\n    if (typeof d.strftime == 'function') {\n      return d.strftime(fmt);\n    }\n\n    const leftPad = function(n, pad) {\n      n = '' + n;\n      pad = '' + (pad == null ? '0' : pad);\n      return n.length == 1 ? pad + n : n;\n    };\n\n    const r = [];\n    let escape = false;\n    const hours = d.getHours();\n    const isAM = hours < 12;\n\n    if (monthNames == null) {\n      monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    }\n\n    if (dayNames == null) {\n      dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    }\n\n    let hours12;\n\n    if (hours > 12) {\n      hours12 = hours - 12;\n    } else if (hours == 0) {\n      hours12 = 12;\n    } else {\n      hours12 = hours;\n    }\n\n    for (let i = 0; i < fmt.length; ++i) {\n      let c = fmt.charAt(i);\n\n      if (escape) {\n        switch (c) {\n          case 'a':\n            c = '' + dayNames[d.getDay()];\n            break;\n          case 'b':\n            c = '' + monthNames[d.getMonth()];\n            break;\n          case 'd':\n            c = leftPad(d.getDate(), '');\n            break;\n          case 'e':\n            c = leftPad(d.getDate(), ' ');\n            break;\n          case 'h': // For back-compat with 0.7; remove in 1.0\n          case 'H':\n            c = leftPad(hours);\n            break;\n          case 'I':\n            c = leftPad(hours12);\n            break;\n          case 'l':\n            c = leftPad(hours12, ' ');\n            break;\n          case 'm':\n            c = leftPad(d.getMonth() + 1, '');\n            break;\n          case 'M':\n            c = leftPad(d.getMinutes());\n            break;\n          // quarters not in Open Group's strftime specification\n          case 'q':\n            c = '' + (Math.floor(d.getMonth() / 3) + 1);\n            break;\n          case 'S':\n            c = leftPad(d.getSeconds());\n            break;\n          case 'y':\n            c = leftPad(d.getFullYear() % 100);\n            break;\n          case 'Y':\n            c = '' + d.getFullYear();\n            break;\n          case 'p':\n            c = isAM ? '' + 'am' : '' + 'pm';\n            break;\n          case 'P':\n            c = isAM ? '' + 'AM' : '' + 'PM';\n            break;\n          case 'w':\n            c = '' + d.getDay();\n            break;\n        }\n        r.push(c);\n        escape = false;\n      } else {\n        if (c == '%') {\n          escape = true;\n        } else {\n          r.push(c);\n        }\n      }\n    }\n\n    return r.join('');\n  }\n\n  // To have a consistent view of time-based data independent of which time\n  // zone the client happens to be in we need a date-like object independent\n  // of time zones.  This is done through a wrapper that only calls the UTC\n  // versions of the accessor methods.\n\n  function makeUtcWrapper(d) {\n    function addProxyMethod(sourceObj, sourceMethod, targetObj, targetMethod) {\n      sourceObj[sourceMethod] = function() {\n        return targetObj[targetMethod].apply(targetObj, arguments);\n      };\n    }\n\n    const utc = {\n      date: d,\n    };\n\n    // support strftime, if found\n\n    if (d.strftime != undefined) {\n      addProxyMethod(utc, 'strftime', d, 'strftime');\n    }\n\n    addProxyMethod(utc, 'getTime', d, 'getTime');\n    addProxyMethod(utc, 'setTime', d, 'setTime');\n\n    const props = ['Date', 'Day', 'FullYear', 'Hours', 'Milliseconds', 'Minutes', 'Month', 'Seconds'];\n\n    for (let p = 0; p < props.length; p++) {\n      addProxyMethod(utc, 'get' + props[p], d, 'getUTC' + props[p]);\n      addProxyMethod(utc, 'set' + props[p], d, 'setUTC' + props[p]);\n    }\n\n    return utc;\n  }\n\n  // select time zone strategy.  This returns a date-like object tied to the\n  // desired timezone\n\n  function dateGenerator(ts, opts) {\n    if (opts.timezone == 'browser') {\n      return new Date(ts);\n    } else if (!opts.timezone || opts.timezone == 'utc') {\n      return makeUtcWrapper(new Date(ts));\n    }\n    // } else if (typeof timezoneJS != 'undefined' && typeof timezoneJS.Date != 'undefined') {\n    //   const d = new timezoneJS.Date();\n    //   // timezone-js is fickle, so be sure to set the time zone before\n    //   // setting the time.\n    //   d.setTimezone(opts.timezone);\n    //   d.setTime(ts);\n    //   return d;\n    // }\n    return makeUtcWrapper(new Date(ts));\n  }\n\n  // map of app. size of time units in milliseconds\n\n  const timeUnitSize = {\n    second: 1000,\n    minute: 60 * 1000,\n    hour: 60 * 60 * 1000,\n    day: 24 * 60 * 60 * 1000,\n    month: 30 * 24 * 60 * 60 * 1000,\n    quarter: 3 * 30 * 24 * 60 * 60 * 1000,\n    year: 365.2425 * 24 * 60 * 60 * 1000,\n  };\n\n  // the allowed tick sizes, after 1 year we use\n  // an integer algorithm\n\n  const baseSpec = [\n    [1, 'second'],\n    [2, 'second'],\n    [5, 'second'],\n    [10, 'second'],\n    [30, 'second'],\n    [1, 'minute'],\n    [2, 'minute'],\n    [5, 'minute'],\n    [10, 'minute'],\n    [30, 'minute'],\n    [1, 'hour'],\n    [2, 'hour'],\n    [4, 'hour'],\n    [8, 'hour'],\n    [12, 'hour'],\n    [1, 'day'],\n    [2, 'day'],\n    [3, 'day'],\n    [0.25, 'month'],\n    [0.5, 'month'],\n    [1, 'month'],\n    [2, 'month'],\n  ];\n\n  // we don't know which variant(s) we'll need yet, but generating both is\n  // cheap\n\n  const specMonths = baseSpec.concat([[3, 'month'], [6, 'month'], [1, 'year']]);\n  const specQuarters = baseSpec.concat([[1, 'quarter'], [2, 'quarter'], [1, 'year']]);\n\n  function init(plot) {\n    plot.hooks.processOptions.push(function(plot) {\n      $.each(plot.getAxes(), function(axisName, axis) {\n        const opts = axis.options;\n\n        if (opts.mode == 'time') {\n          axis.tickGenerator = function(axis) {\n            const ticks = [];\n            const d = dateGenerator(axis.min, opts);\n            let minSize = 0;\n\n            // make quarter use a possibility if quarters are\n            // mentioned in either of these options\n\n            const spec =\n              (opts.tickSize && opts.tickSize[1] === 'quarter') || (opts.minTickSize && opts.minTickSize[1] === 'quarter')\n                ? specQuarters\n                : specMonths;\n\n            if (opts.minTickSize != null) {\n              if (typeof opts.tickSize == 'number') {\n                minSize = opts.tickSize;\n              } else {\n                minSize = opts.minTickSize[0] * timeUnitSize[opts.minTickSize[1]];\n              }\n            }\n\n            for (var i = 0; i < spec.length - 1; ++i) {\n              if (\n                axis.delta < (spec[i][0] * timeUnitSize[spec[i][1]] + spec[i + 1][0] * timeUnitSize[spec[i + 1][1]]) / 2 &&\n                spec[i][0] * timeUnitSize[spec[i][1]] >= minSize\n              ) {\n                break;\n              }\n            }\n\n            let size = spec[i][0];\n            let unit = spec[i][1];\n\n            // special-case the possibility of several years\n\n            if (unit == 'year') {\n              // if given a minTickSize in years, just use it,\n              // ensuring that it's an integer\n\n              if (opts.minTickSize != null && opts.minTickSize[1] == 'year') {\n                size = Math.floor(opts.minTickSize[0]);\n              } else {\n                const magn = Math.pow(10, Math.floor(Math.log(axis.delta / timeUnitSize.year) / Math.LN10));\n                const norm = axis.delta / timeUnitSize.year / magn;\n\n                if (norm < 1.5) {\n                  size = 1;\n                } else if (norm < 3) {\n                  size = 2;\n                } else if (norm < 7.5) {\n                  size = 5;\n                } else {\n                  size = 10;\n                }\n\n                size *= magn;\n              }\n\n              // minimum size for years is 1\n\n              if (size < 1) {\n                size = 1;\n              }\n            }\n\n            axis.tickSize = opts.tickSize || [size, unit];\n            const tickSize = axis.tickSize[0];\n            unit = axis.tickSize[1];\n\n            const step = tickSize * timeUnitSize[unit];\n\n            if (unit == 'second') {\n              d.setSeconds(floorInBase(d.getSeconds(), tickSize));\n            } else if (unit == 'minute') {\n              d.setMinutes(floorInBase(d.getMinutes(), tickSize));\n            } else if (unit == 'hour') {\n              d.setHours(floorInBase(d.getHours(), tickSize));\n            } else if (unit == 'month') {\n              d.setMonth(floorInBase(d.getMonth(), tickSize));\n            } else if (unit == 'quarter') {\n              d.setMonth(3 * floorInBase(d.getMonth() / 3, tickSize));\n            } else if (unit == 'year') {\n              d.setFullYear(floorInBase(d.getFullYear(), tickSize));\n            }\n\n            // reset smaller components\n\n            d.setMilliseconds(0);\n\n            if (step >= timeUnitSize.minute) {\n              d.setSeconds(0);\n            }\n            if (step >= timeUnitSize.hour) {\n              d.setMinutes(0);\n            }\n            if (step >= timeUnitSize.day) {\n              d.setHours(0);\n            }\n            if (step >= timeUnitSize.day * 4) {\n              d.setDate(1);\n            }\n            if (step >= timeUnitSize.month * 2) {\n              d.setMonth(floorInBase(d.getMonth(), 3));\n            }\n            if (step >= timeUnitSize.quarter * 2) {\n              d.setMonth(floorInBase(d.getMonth(), 6));\n            }\n            if (step >= timeUnitSize.year) {\n              d.setMonth(0);\n            }\n\n            let carry = 0;\n            let v = Number.NaN;\n            let prev;\n\n            do {\n              prev = v;\n              v = d.getTime();\n              ticks.push(v);\n\n              if (unit == 'month' || unit == 'quarter') {\n                if (tickSize < 1) {\n                  // a bit complicated - we'll divide the\n                  // month/quarter up but we need to take\n                  // care of fractions so we don't end up in\n                  // the middle of a day\n\n                  d.setDate(1);\n                  const start = d.getTime();\n                  d.setMonth(d.getMonth() + (unit == 'quarter' ? 3 : 1));\n                  const end = d.getTime();\n                  d.setTime(v + carry * timeUnitSize.hour + (end - start) * tickSize);\n                  carry = d.getHours();\n                  d.setHours(0);\n                } else {\n                  d.setMonth(d.getMonth() + tickSize * (unit == 'quarter' ? 3 : 1));\n                }\n              } else if (unit == 'year') {\n                d.setFullYear(d.getFullYear() + tickSize);\n              } else {\n                d.setTime(v + step);\n              }\n            } while (v < axis.max && v != prev);\n\n            return ticks;\n          };\n\n          axis.tickFormatter = function(v, axis) {\n            const d = dateGenerator(v, axis.options);\n\n            // first check global format\n\n            if (opts.timeformat != null) {\n              return formatDate(d, opts.timeformat, opts.monthNames, opts.dayNames);\n            }\n\n            // possibly use quarters if quarters are mentioned in\n            // any of these places\n\n            const useQuarters =\n              (axis.options.tickSize && axis.options.tickSize[1] == 'quarter') ||\n              (axis.options.minTickSize && axis.options.minTickSize[1] == 'quarter');\n\n            const t = axis.tickSize[0] * timeUnitSize[axis.tickSize[1]];\n            const span = axis.max - axis.min;\n            const suffix = opts.twelveHourClock ? ' %p' : '';\n            const hourCode = opts.twelveHourClock ? '%I' : '%H';\n            let fmt;\n\n            if (t < timeUnitSize.minute) {\n              fmt = hourCode + ':%M:%S' + suffix;\n            } else if (t < timeUnitSize.day) {\n              if (span < 2 * timeUnitSize.day) {\n                fmt = hourCode + ':%M' + suffix;\n              } else {\n                fmt = '%b %d ' + hourCode + ':%M' + suffix;\n              }\n            } else if (t < timeUnitSize.month) {\n              fmt = '%b %d';\n            } else if ((useQuarters && t < timeUnitSize.quarter) || (!useQuarters && t < timeUnitSize.year)) {\n              if (span < timeUnitSize.year) {\n                fmt = '%b';\n              } else {\n                fmt = '%b %Y';\n              }\n            } else if (useQuarters && t < timeUnitSize.year) {\n              if (span < timeUnitSize.year) {\n                fmt = 'Q%q';\n              } else {\n                fmt = 'Q%q %Y';\n              }\n            } else {\n              fmt = '%Y';\n            }\n\n            const rt = formatDate(d, fmt, opts.monthNames, opts.dayNames);\n\n            return rt;\n          };\n        }\n      });\n    });\n  }\n\n  $.plot.plugins.push({\n    init: init,\n    options: options,\n    name: 'time',\n    version: '1.0',\n  });\n\n  // Time-axis support used to be in Flot core, which exposed the\n  // formatDate function on the plot object.  Various plugins depend\n  // on the function, so we need to re-expose it here.\n\n  $.plot.formatDate = formatDate;\n})(window.jQuery);\n"]},"metadata":{},"sourceType":"module"}