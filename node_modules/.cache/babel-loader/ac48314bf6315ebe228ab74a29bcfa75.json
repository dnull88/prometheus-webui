{"ast":null,"code":"import _slicedToArray from\"/app/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import{Alert,Table,Badge}from'reactstrap';import{Link}from'@reach/router';import{formatRelative,createExpressionLink,humanizeDuration,formatDuration}from'../../utils';import{now}from'moment';var GraphExpressionLink=function GraphExpressionLink(props){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"strong\",null,props.title,\":\"),/*#__PURE__*/React.createElement(Link,{className:\"ml-4\",to:createExpressionLink(props.expr)},props.text),/*#__PURE__*/React.createElement(\"br\",null));};export var RulesContent=function RulesContent(_ref){var response=_ref.response;var getBadgeColor=function getBadgeColor(state){switch(state){case'ok':return'success';case'err':return'danger';case'unknown':return'warning';}};if(response.data){var groups=response.data.groups;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"h2\",null,\"Rules\"),groups.map(function(g,i){return/*#__PURE__*/React.createElement(Table,{bordered:true,key:i},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",{colSpan:3},/*#__PURE__*/React.createElement(\"a\",{href:'#'+g.name},/*#__PURE__*/React.createElement(\"h2\",{id:g.name},g.name))),/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(\"h2\",null,formatRelative(g.lastEvaluation,now()),\" ago\")),/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(\"h2\",null,humanizeDuration(parseFloat(g.evaluationTime)*1000))))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",{className:\"font-weight-bold\"},/*#__PURE__*/React.createElement(\"td\",null,\"Rule\"),/*#__PURE__*/React.createElement(\"td\",null,\"State\"),/*#__PURE__*/React.createElement(\"td\",null,\"Error\"),/*#__PURE__*/React.createElement(\"td\",null,\"Last Evaluation\"),/*#__PURE__*/React.createElement(\"td\",null,\"Evaluation Time\")),g.rules.map(function(r,i){return/*#__PURE__*/React.createElement(\"tr\",{key:i},/*#__PURE__*/React.createElement(\"td\",{style:{backgroundColor:'#F5F5F5'},className:\"rule_cell\"},r.alerts?/*#__PURE__*/React.createElement(GraphExpressionLink,{title:\"alert\",text:r.name,expr:\"ALERTS{alertname=\\\"\".concat(r.name,\"\\\"}\")}):/*#__PURE__*/React.createElement(GraphExpressionLink,{title:\"record\",text:r.name,expr:r.name}),/*#__PURE__*/React.createElement(GraphExpressionLink,{title:\"expr\",text:r.query,expr:r.query}),r.duration>0&&/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"strong\",null,\"for:\"),\" \",formatDuration(r.duration*1000)),r.labels&&Object.keys(r.labels).length>0&&/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"strong\",null,\"labels:\"),Object.entries(r.labels).map(function(_ref2){var _ref3=_slicedToArray(_ref2,2),key=_ref3[0],value=_ref3[1];return/*#__PURE__*/React.createElement(\"div\",{className:\"ml-4\",key:key},key,\": \",value);})),r.alerts&&r.annotations&&Object.keys(r.annotations).length>0&&/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"strong\",null,\"annotations:\"),Object.entries(r.annotations).map(function(_ref4){var _ref5=_slicedToArray(_ref4,2),key=_ref5[0],value=_ref5[1];return/*#__PURE__*/React.createElement(\"div\",{className:\"ml-4\",key:key},key,\": \",value);}))),/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(Badge,{color:getBadgeColor(r.health)},r.health.toUpperCase())),/*#__PURE__*/React.createElement(\"td\",null,r.lastError?/*#__PURE__*/React.createElement(Alert,{color:\"danger\"},r.lastError):null),/*#__PURE__*/React.createElement(\"td\",null,formatRelative(r.lastEvaluation,now()),\" ago\"),/*#__PURE__*/React.createElement(\"td\",null,humanizeDuration(parseFloat(r.evaluationTime)*1000)));})));}));}return null;};","map":{"version":3,"sources":["/app/ui/react-app/src/pages/rules/RulesContent.tsx"],"names":["React","Alert","Table","Badge","Link","formatRelative","createExpressionLink","humanizeDuration","formatDuration","now","GraphExpressionLink","props","title","expr","text","RulesContent","response","getBadgeColor","state","data","groups","map","g","i","name","lastEvaluation","parseFloat","evaluationTime","rules","r","backgroundColor","alerts","query","duration","labels","Object","keys","length","entries","key","value","annotations","health","toUpperCase","lastError"],"mappings":"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","sourcesContent":["import React, { FC } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { APIResponse } from '../../hooks/useFetch';\nimport { Alert, Table, Badge } from 'reactstrap';\nimport { Link } from '@reach/router';\nimport { formatRelative, createExpressionLink, humanizeDuration, formatDuration } from '../../utils';\nimport { Rule } from '../../types/types';\nimport { now } from 'moment';\n\ninterface RulesContentProps {\n  response: APIResponse<RulesMap>;\n}\n\ninterface RuleGroup {\n  name: string;\n  file: string;\n  rules: Rule[];\n  evaluationTime: string;\n  lastEvaluation: string;\n}\n\nexport interface RulesMap {\n  groups: RuleGroup[];\n}\n\nconst GraphExpressionLink: FC<{ expr: string; text: string; title: string }> = props => {\n  return (\n    <>\n      <strong>{props.title}:</strong>\n      <Link className=\"ml-4\" to={createExpressionLink(props.expr)}>\n        {props.text}\n      </Link>\n      <br />\n    </>\n  );\n};\n\nexport const RulesContent: FC<RouteComponentProps & RulesContentProps> = ({ response }) => {\n  const getBadgeColor = (state: string) => {\n    switch (state) {\n      case 'ok':\n        return 'success';\n\n      case 'err':\n        return 'danger';\n\n      case 'unknown':\n        return 'warning';\n    }\n  };\n\n  if (response.data) {\n    const groups: RuleGroup[] = response.data.groups;\n    return (\n      <>\n        <h2>Rules</h2>\n        {groups.map((g, i) => {\n          return (\n            <Table bordered key={i}>\n              <thead>\n                <tr>\n                  <td colSpan={3}>\n                    <a href={'#' + g.name}>\n                      <h2 id={g.name}>{g.name}</h2>\n                    </a>\n                  </td>\n                  <td>\n                    <h2>{formatRelative(g.lastEvaluation, now())} ago</h2>\n                  </td>\n                  <td>\n                    <h2>{humanizeDuration(parseFloat(g.evaluationTime) * 1000)}</h2>\n                  </td>\n                </tr>\n              </thead>\n              <tbody>\n                <tr className=\"font-weight-bold\">\n                  <td>Rule</td>\n                  <td>State</td>\n                  <td>Error</td>\n                  <td>Last Evaluation</td>\n                  <td>Evaluation Time</td>\n                </tr>\n                {g.rules.map((r, i) => {\n                  return (\n                    <tr key={i}>\n                      <td style={{ backgroundColor: '#F5F5F5' }} className=\"rule_cell\">\n                        {r.alerts ? (\n                          <GraphExpressionLink title=\"alert\" text={r.name} expr={`ALERTS{alertname=\"${r.name}\"}`} />\n                        ) : (\n                          <GraphExpressionLink title=\"record\" text={r.name} expr={r.name} />\n                        )}\n                        <GraphExpressionLink title=\"expr\" text={r.query} expr={r.query} />\n                        {r.duration > 0 && (\n                          <div>\n                            <strong>for:</strong> {formatDuration(r.duration * 1000)}\n                          </div>\n                        )}\n                        {r.labels && Object.keys(r.labels).length > 0 && (\n                          <div>\n                            <strong>labels:</strong>\n                            {Object.entries(r.labels).map(([key, value]) => (\n                              <div className=\"ml-4\" key={key}>\n                                {key}: {value}\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                        {r.alerts && r.annotations && Object.keys(r.annotations).length > 0 && (\n                          <div>\n                            <strong>annotations:</strong>\n                            {Object.entries(r.annotations).map(([key, value]) => (\n                              <div className=\"ml-4\" key={key}>\n                                {key}: {value}\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                      </td>\n                      <td>\n                        <Badge color={getBadgeColor(r.health)}>{r.health.toUpperCase()}</Badge>\n                      </td>\n                      <td>{r.lastError ? <Alert color=\"danger\">{r.lastError}</Alert> : null}</td>\n                      <td>{formatRelative(r.lastEvaluation, now())} ago</td>\n                      <td>{humanizeDuration(parseFloat(r.evaluationTime) * 1000)}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n          );\n        })}\n      </>\n    );\n  }\n\n  return null;\n};\n"]},"metadata":{},"sourceType":"module"}